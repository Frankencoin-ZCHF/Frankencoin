{
  "address": "0x9359cd75549DaE00Cdd8D22297BC9B13FbBe4B79",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "mainnetChainSelector",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "linkToken",
              "type": "address"
            },
            {
              "internalType": "contract TokenAdminRegistry",
              "name": "tokenAdminRegistry",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rmnProxy",
              "type": "address"
            },
            {
              "internalType": "contract RegistryModuleOwnerCustom",
              "name": "registryModuleOwnerCustom",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "remoteChainSelector",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes[]",
                  "name": "remotePoolAddresses",
                  "type": "bytes[]"
                },
                {
                  "internalType": "bytes",
                  "name": "remoteTokenAddress",
                  "type": "bytes"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "isEnabled",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint128",
                      "name": "capacity",
                      "type": "uint128"
                    },
                    {
                      "internalType": "uint128",
                      "name": "rate",
                      "type": "uint128"
                    }
                  ],
                  "internalType": "struct RateLimiter.Config",
                  "name": "outboundRateLimiterConfig",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "isEnabled",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint128",
                      "name": "capacity",
                      "type": "uint128"
                    },
                    {
                      "internalType": "uint128",
                      "name": "rate",
                      "type": "uint128"
                    }
                  ],
                  "internalType": "struct RateLimiter.Config",
                  "name": "inboundRateLimiterConfig",
                  "type": "tuple"
                }
              ],
              "internalType": "struct ITokenPool.ChainUpdate[]",
              "name": "chainsToAdd",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct L2Deployer.CCIPConfig",
          "name": "_ccipConfig",
          "type": "tuple"
        },
        {
          "internalType": "contract BridgedGovernance",
          "name": "_bridgedGovernance",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minApplicationPeriod",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "bridgeAccounting",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ccipAdmin",
              "type": "address"
            }
          ],
          "internalType": "struct L2Deployer.FrankencoinConfig",
          "name": "_frankencoinConfig",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "expected",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "actual",
          "type": "address"
        }
      ],
      "name": "CCIPAdminMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "bridgedFrankencoin",
      "outputs": [
        {
          "internalType": "contract BridgedFrankencoin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ccipAdmin",
      "outputs": [
        {
          "internalType": "contract CCIPAdmin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testMinter",
      "outputs": [
        {
          "internalType": "contract L2TestMinter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPool",
      "outputs": [
        {
          "internalType": "contract BurnMintTokenPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x699e2379a9078d79f254aee4765337944d4931cd7fea030e9f9b223f28b53dc0",
  "receipt": {
    "to": null,
    "from": "0xb16f9a646201af698A21Bd0D3AFDA0518A86D2A7",
    "contractAddress": "0x9359cd75549DaE00Cdd8D22297BC9B13FbBe4B79",
    "transactionIndex": 9,
    "gasUsed": "10511402",
    "logsBloom": "0x00000000042401400000300400000000000400040000001102800200102000000000000000000000000020000000004800000100000000000006000400000244000000000040000100000048400042000001000001100000040100000000000000000000020000000000000000040800000000000000040000000110002040400000001000000000000000000002a00000008000000000000000000000000000000000000000000000000000240008000000800000008000000000000200000000000046400004000008000000400000000000000000000800000000000120001000000004000000000000041000000004004200028402000908000001800000",
    "blockHash": "0xe2d894dfc73d2908257d833dac6fb66e7d6ed2f9fe0422fe74e05ac4d10d3f99",
    "transactionHash": "0x699e2379a9078d79f254aee4765337944d4931cd7fea030e9f9b223f28b53dc0",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 40394536,
        "transactionHash": "0x699e2379a9078d79f254aee4765337944d4931cd7fea030e9f9b223f28b53dc0",
        "address": "0x5969777eEf73C08Df69FB2D8038836e797A0749e",
        "topics": [
          "0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278",
          "0x0000000000000000000000009359cd75549dae00cdd8d22297bc9b13fbbe4b79",
          "0x00000000000000000000000031e483753fbed8306631244422c46ac1a60ffc1d"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xe2d894dfc73d2908257d833dac6fb66e7d6ed2f9fe0422fe74e05ac4d10d3f99"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 40394536,
        "transactionHash": "0x699e2379a9078d79f254aee4765337944d4931cd7fea030e9f9b223f28b53dc0",
        "address": "0xa022Bdf5720495b5CABD92c37c387568f941f9f2",
        "topics": [
          "0x97326258efdae63280617ca33884e507791c2abeed7b82acd77f1853394ef94b",
          "0x0000000000000000000000005969777eef73c08df69fb2d8038836e797a0749e"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000114275726e4d696e74546f6b656e506f6f6c000000000000000000000000000000",
        "logIndex": 6,
        "blockHash": "0xe2d894dfc73d2908257d833dac6fb66e7d6ed2f9fe0422fe74e05ac4d10d3f99"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 40394536,
        "transactionHash": "0x699e2379a9078d79f254aee4765337944d4931cd7fea030e9f9b223f28b53dc0",
        "address": "0xa022Bdf5720495b5CABD92c37c387568f941f9f2",
        "topics": [
          "0x97326258efdae63280617ca33884e507791c2abeed7b82acd77f1853394ef94b",
          "0x0000000000000000000000009249ee9ea1b620daee4e3e5f61835f489e7ee47c"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000a546573744d696e74657200000000000000000000000000000000000000000000",
        "logIndex": 7,
        "blockHash": "0xe2d894dfc73d2908257d833dac6fb66e7d6ed2f9fe0422fe74e05ac4d10d3f99"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 40394536,
        "transactionHash": "0x699e2379a9078d79f254aee4765337944d4931cd7fea030e9f9b223f28b53dc0",
        "address": "0xa022Bdf5720495b5CABD92c37c387568f941f9f2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b16f9a646201af698a21bd0d3afda0518a86d2a7"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 8,
        "blockHash": "0xe2d894dfc73d2908257d833dac6fb66e7d6ed2f9fe0422fe74e05ac4d10d3f99"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 40394536,
        "transactionHash": "0x699e2379a9078d79f254aee4765337944d4931cd7fea030e9f9b223f28b53dc0",
        "address": "0x73BC11423CBF14914998C23B0aFC9BE0cb5B2229",
        "topics": [
          "0xc54c3051ff16e63bb9203214432372aca006c589e3653619b577a3265675b716",
          "0x000000000000000000000000a022bdf5720495b5cabd92c37c387568f941f9f2",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000031e483753fbed8306631244422c46ac1a60ffc1d"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0xe2d894dfc73d2908257d833dac6fb66e7d6ed2f9fe0422fe74e05ac4d10d3f99"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 40394536,
        "transactionHash": "0x699e2379a9078d79f254aee4765337944d4931cd7fea030e9f9b223f28b53dc0",
        "address": "0x1f524a11d89D68a4E4b1c8A195E91Fb1d8f0B56a",
        "topics": [
          "0x09590fb70af4b833346363965e043a9339e8c7d378b8a2b903c75c277faec4f9",
          "0x000000000000000000000000a022bdf5720495b5cabd92c37c387568f941f9f2",
          "0x00000000000000000000000031e483753fbed8306631244422c46ac1a60ffc1d"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0xe2d894dfc73d2908257d833dac6fb66e7d6ed2f9fe0422fe74e05ac4d10d3f99"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 40394536,
        "transactionHash": "0x699e2379a9078d79f254aee4765337944d4931cd7fea030e9f9b223f28b53dc0",
        "address": "0x73BC11423CBF14914998C23B0aFC9BE0cb5B2229",
        "topics": [
          "0x399b55200f7f639a63d76efe3dcfa9156ce367058d6b673041b84a628885f5a7",
          "0x000000000000000000000000a022bdf5720495b5cabd92c37c387568f941f9f2",
          "0x00000000000000000000000031e483753fbed8306631244422c46ac1a60ffc1d"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0xe2d894dfc73d2908257d833dac6fb66e7d6ed2f9fe0422fe74e05ac4d10d3f99"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 40394536,
        "transactionHash": "0x699e2379a9078d79f254aee4765337944d4931cd7fea030e9f9b223f28b53dc0",
        "address": "0x73BC11423CBF14914998C23B0aFC9BE0cb5B2229",
        "topics": [
          "0x754449ec3aff3bd528bfce43ae9319c4a381b67fcd1d20097b3b24dacaecc35d",
          "0x000000000000000000000000a022bdf5720495b5cabd92c37c387568f941f9f2",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005969777eef73c08df69fb2d8038836e797a0749e"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0xe2d894dfc73d2908257d833dac6fb66e7d6ed2f9fe0422fe74e05ac4d10d3f99"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 40394536,
        "transactionHash": "0x699e2379a9078d79f254aee4765337944d4931cd7fea030e9f9b223f28b53dc0",
        "address": "0x5969777eEf73C08Df69FB2D8038836e797A0749e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000009359cd75549dae00cdd8d22297bc9b13fbbe4b79",
          "0x00000000000000000000000031e483753fbed8306631244422c46ac1a60ffc1d"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0xe2d894dfc73d2908257d833dac6fb66e7d6ed2f9fe0422fe74e05ac4d10d3f99"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 40394536,
        "transactionHash": "0x699e2379a9078d79f254aee4765337944d4931cd7fea030e9f9b223f28b53dc0",
        "address": "0x5969777eEf73C08Df69FB2D8038836e797A0749e",
        "topics": [
          "0x7d628c9a1796743d365ab521a8b2a4686e419b3269919dc9145ea2ce853b54ea",
          "0x00000000000000000000000000000000000000000000000045849994fc9c7b15"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000009359cd75549dae00cdd8d22297bc9b13fbbe4b79",
        "logIndex": 14,
        "blockHash": "0xe2d894dfc73d2908257d833dac6fb66e7d6ed2f9fe0422fe74e05ac4d10d3f99"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 40394536,
        "transactionHash": "0x699e2379a9078d79f254aee4765337944d4931cd7fea030e9f9b223f28b53dc0",
        "address": "0x5969777eEf73C08Df69FB2D8038836e797A0749e",
        "topics": [
          "0x8d340f17e19058004c20453540862a9c62778504476f6756755cb33bcd6c38c2"
        ],
        "data": "0x00000000000000000000000000000000000000000000000045849994fc9c7b1500000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000b58e61c3098d85632df34eecfb899a1ed80921cb",
        "logIndex": 15,
        "blockHash": "0xe2d894dfc73d2908257d833dac6fb66e7d6ed2f9fe0422fe74e05ac4d10d3f99"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 40394536,
        "transactionHash": "0x699e2379a9078d79f254aee4765337944d4931cd7fea030e9f9b223f28b53dc0",
        "address": "0x5969777eEf73C08Df69FB2D8038836e797A0749e",
        "topics": [
          "0x7d628c9a1796743d365ab521a8b2a4686e419b3269919dc9145ea2ce853b54ea",
          "0x000000000000000000000000000000000000000000000000383a1891ae1915b1"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000005969777eef73c08df69fb2d8038836e797a0749e",
        "logIndex": 16,
        "blockHash": "0xe2d894dfc73d2908257d833dac6fb66e7d6ed2f9fe0422fe74e05ac4d10d3f99"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 40394536,
        "transactionHash": "0x699e2379a9078d79f254aee4765337944d4931cd7fea030e9f9b223f28b53dc0",
        "address": "0x5969777eEf73C08Df69FB2D8038836e797A0749e",
        "topics": [
          "0x8d340f17e19058004c20453540862a9c62778504476f6756755cb33bcd6c38c2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000383a1891ae1915ba022bdf5720495b5cabd92c37c387568f941f9f2",
        "logIndex": 17,
        "blockHash": "0xe2d894dfc73d2908257d833dac6fb66e7d6ed2f9fe0422fe74e05ac4d10d3f99"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 40394536,
        "transactionHash": "0x699e2379a9078d79f254aee4765337944d4931cd7fea030e9f9b223f28b53dc0",
        "address": "0x5969777eEf73C08Df69FB2D8038836e797A0749e",
        "topics": [
          "0x7d628c9a1796743d365ab521a8b2a4686e419b3269919dc9145ea2ce853b54ea",
          "0x00000000000000000000000000000000000000000000000033d343f77863cab8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000004d780fdf7fe77e0aae68229d310d1930607ce39b",
        "logIndex": 18,
        "blockHash": "0xe2d894dfc73d2908257d833dac6fb66e7d6ed2f9fe0422fe74e05ac4d10d3f99"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 40394536,
        "transactionHash": "0x699e2379a9078d79f254aee4765337944d4931cd7fea030e9f9b223f28b53dc0",
        "address": "0x5969777eEf73C08Df69FB2D8038836e797A0749e",
        "topics": [
          "0x8d340f17e19058004c20453540862a9c62778504476f6756755cb33bcd6c38c2"
        ],
        "data": "0x00000000000000000000000000000000000000000000000033d343f77863cab80000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000097d60696d4273e5f64ab2b7e1160f885154f1cb9",
        "logIndex": 19,
        "blockHash": "0xe2d894dfc73d2908257d833dac6fb66e7d6ed2f9fe0422fe74e05ac4d10d3f99"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 40394536,
        "transactionHash": "0x699e2379a9078d79f254aee4765337944d4931cd7fea030e9f9b223f28b53dc0",
        "address": "0x5969777eEf73C08Df69FB2D8038836e797A0749e",
        "topics": [
          "0x7d628c9a1796743d365ab521a8b2a4686e419b3269919dc9145ea2ce853b54ea",
          "0x00000000000000000000000000000000000000000000000044ae84d8e9a37444"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000005969777eef73c08df69fb2d8038836e797a0749e",
        "logIndex": 20,
        "blockHash": "0xe2d894dfc73d2908257d833dac6fb66e7d6ed2f9fe0422fe74e05ac4d10d3f99"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 40394536,
        "transactionHash": "0x699e2379a9078d79f254aee4765337944d4931cd7fea030e9f9b223f28b53dc0",
        "address": "0x5969777eEf73C08Df69FB2D8038836e797A0749e",
        "topics": [
          "0x8d340f17e19058004c20453540862a9c62778504476f6756755cb33bcd6c38c2"
        ],
        "data": "0x00000000000000000000000000000000000000000000000044ae84d8e9a3744400000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000a022bdf5720495b5cabd92c37c387568f941f9f2",
        "logIndex": 21,
        "blockHash": "0xe2d894dfc73d2908257d833dac6fb66e7d6ed2f9fe0422fe74e05ac4d10d3f99"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 40394536,
        "transactionHash": "0x699e2379a9078d79f254aee4765337944d4931cd7fea030e9f9b223f28b53dc0",
        "address": "0x5969777eEf73C08Df69FB2D8038836e797A0749e",
        "topics": [
          "0x7d628c9a1796743d365ab521a8b2a4686e419b3269919dc9145ea2ce853b54ea",
          "0x000000000000000000000000000000000000000000000000dda641cfe44aff82"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000005969777eef73c08df69fb2d8038836e797a0749e",
        "logIndex": 22,
        "blockHash": "0xe2d894dfc73d2908257d833dac6fb66e7d6ed2f9fe0422fe74e05ac4d10d3f99"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 40394536,
        "transactionHash": "0x699e2379a9078d79f254aee4765337944d4931cd7fea030e9f9b223f28b53dc0",
        "address": "0x5969777eEf73C08Df69FB2D8038836e797A0749e",
        "topics": [
          "0x8d340f17e19058004c20453540862a9c62778504476f6756755cb33bcd6c38c2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000dda641cfe44aff8200000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000a022bdf5720495b5cabd92c37c387568f941f9f2",
        "logIndex": 23,
        "blockHash": "0xe2d894dfc73d2908257d833dac6fb66e7d6ed2f9fe0422fe74e05ac4d10d3f99"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 40394536,
        "transactionHash": "0x699e2379a9078d79f254aee4765337944d4931cd7fea030e9f9b223f28b53dc0",
        "address": "0x5969777eEf73C08Df69FB2D8038836e797A0749e",
        "topics": [
          "0x7d628c9a1796743d365ab521a8b2a4686e419b3269919dc9145ea2ce853b54ea",
          "0x000000000000000000000000000000000000000000000000594862ae1802b3d5"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000005969777eef73c08df69fb2d8038836e797a0749e",
        "logIndex": 24,
        "blockHash": "0xe2d894dfc73d2908257d833dac6fb66e7d6ed2f9fe0422fe74e05ac4d10d3f99"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 40394536,
        "transactionHash": "0x699e2379a9078d79f254aee4765337944d4931cd7fea030e9f9b223f28b53dc0",
        "address": "0x5969777eEf73C08Df69FB2D8038836e797A0749e",
        "topics": [
          "0x8d340f17e19058004c20453540862a9c62778504476f6756755cb33bcd6c38c2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000594862ae1802b3da022bdf5720495b5cabd92c37c387568f941f9f2",
        "logIndex": 25,
        "blockHash": "0xe2d894dfc73d2908257d833dac6fb66e7d6ed2f9fe0422fe74e05ac4d10d3f99"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 40394536,
        "transactionHash": "0x699e2379a9078d79f254aee4765337944d4931cd7fea030e9f9b223f28b53dc0",
        "address": "0x5969777eEf73C08Df69FB2D8038836e797A0749e",
        "topics": [
          "0x7d628c9a1796743d365ab521a8b2a4686e419b3269919dc9145ea2ce853b54ea",
          "0x000000000000000000000000000000000000000000000000173ac9059db95951"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000005969777eef73c08df69fb2d8038836e797a0749e",
        "logIndex": 26,
        "blockHash": "0xe2d894dfc73d2908257d833dac6fb66e7d6ed2f9fe0422fe74e05ac4d10d3f99"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 40394536,
        "transactionHash": "0x699e2379a9078d79f254aee4765337944d4931cd7fea030e9f9b223f28b53dc0",
        "address": "0x5969777eEf73C08Df69FB2D8038836e797A0749e",
        "topics": [
          "0x8d340f17e19058004c20453540862a9c62778504476f6756755cb33bcd6c38c2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000173ac9059dba022bdf5720495b5cabd92c37c387568f941f9f2",
        "logIndex": 27,
        "blockHash": "0xe2d894dfc73d2908257d833dac6fb66e7d6ed2f9fe0422fe74e05ac4d10d3f99"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 40394536,
        "transactionHash": "0x699e2379a9078d79f254aee4765337944d4931cd7fea030e9f9b223f28b53dc0",
        "address": "0x31E483753fbEd8306631244422c46aC1a60FFc1d",
        "topics": [
          "0x05dbcb65b33e42bc9e68704a2b109e0f4eee368a6945cad1e857b0197c9fef42",
          "0x0000000000000000000000005969777eef73c08df69fb2d8038836e797a0749e"
        ],
        "data": "0x",
        "logIndex": 28,
        "blockHash": "0xe2d894dfc73d2908257d833dac6fb66e7d6ed2f9fe0422fe74e05ac4d10d3f99"
      }
    ],
    "blockNumber": 40394536,
    "cumulativeGasUsed": "14397425",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x4aAD6071085df840abD9Baf1697d5D5992bDadce",
      "5009297550715157269",
      "0xE2e73A1c69ecF83F464EFCE6A5be353a37cA09b2",
      "0x73BC11423CBF14914998C23B0aFC9BE0cb5B2229",
      "0xf5e5e1676942520995c1e39aFaC58A75Fe1cd2bB",
      "0x1f524a11d89D68a4E4b1c8A195E91Fb1d8f0B56a",
      [
        {
          "inboundRateLimiterConfig": {
            "isEnabled": false,
            "capacity": 0,
            "rate": 0
          },
          "outboundRateLimiterConfig": {
            "isEnabled": false,
            "capacity": 0,
            "rate": 0
          },
          "remoteChainSelector": "5009297550715157269",
          "remotePoolAddresses": [
            "0x0000000000000000000000009359cd75549dae00cdd8d22297bc9b13fbbe4b79"
          ],
          "remoteTokenAddress": "0x000000000000000000000000b58e61c3098d85632df34eecfb899a1ed80921cb"
        },
        {
          "inboundRateLimiterConfig": {
            "isEnabled": false,
            "capacity": 0,
            "rate": 0
          },
          "outboundRateLimiterConfig": {
            "isEnabled": false,
            "capacity": 0,
            "rate": 0
          },
          "remoteChainSelector": "4051577828743386545",
          "remotePoolAddresses": [
            "0x0000000000000000000000005969777eef73c08df69fb2d8038836e797a0749e"
          ],
          "remoteTokenAddress": "0x000000000000000000000000a022bdf5720495b5cabd92c37c387568f941f9f2"
        },
        {
          "inboundRateLimiterConfig": {
            "isEnabled": false,
            "capacity": 0,
            "rate": 0
          },
          "outboundRateLimiterConfig": {
            "isEnabled": false,
            "capacity": 0,
            "rate": 0
          },
          "remoteChainSelector": "3734403246176062136",
          "remotePoolAddresses": [
            "0x0000000000000000000000004d780fdf7fe77e0aae68229d310d1930607ce39b"
          ],
          "remoteTokenAddress": "0x00000000000000000000000097d60696d4273e5f64ab2b7e1160f885154f1cb9"
        },
        {
          "inboundRateLimiterConfig": {
            "isEnabled": false,
            "capacity": 0,
            "rate": 0
          },
          "outboundRateLimiterConfig": {
            "isEnabled": false,
            "capacity": 0,
            "rate": 0
          },
          "remoteChainSelector": "4949039107694359620",
          "remotePoolAddresses": [
            "0x0000000000000000000000005969777eef73c08df69fb2d8038836e797a0749e"
          ],
          "remoteTokenAddress": "0x000000000000000000000000a022bdf5720495b5cabd92c37c387568f941f9f2"
        },
        {
          "inboundRateLimiterConfig": {
            "isEnabled": false,
            "capacity": 0,
            "rate": 0
          },
          "outboundRateLimiterConfig": {
            "isEnabled": false,
            "capacity": 0,
            "rate": 0
          },
          "remoteChainSelector": "15971525489660198786",
          "remotePoolAddresses": [
            "0x0000000000000000000000005969777eef73c08df69fb2d8038836e797a0749e"
          ],
          "remoteTokenAddress": "0x000000000000000000000000a022bdf5720495b5cabd92c37c387568f941f9f2"
        },
        {
          "inboundRateLimiterConfig": {
            "isEnabled": false,
            "capacity": 0,
            "rate": 0
          },
          "outboundRateLimiterConfig": {
            "isEnabled": false,
            "capacity": 0,
            "rate": 0
          },
          "remoteChainSelector": "6433500567565415381",
          "remotePoolAddresses": [
            "0x0000000000000000000000005969777eef73c08df69fb2d8038836e797a0749e"
          ],
          "remoteTokenAddress": "0x000000000000000000000000a022bdf5720495b5cabd92c37c387568f941f9f2"
        },
        {
          "inboundRateLimiterConfig": {
            "isEnabled": false,
            "capacity": 0,
            "rate": 0
          },
          "outboundRateLimiterConfig": {
            "isEnabled": false,
            "capacity": 0,
            "rate": 0
          },
          "remoteChainSelector": "1673871237479749969",
          "remotePoolAddresses": [
            "0x0000000000000000000000005969777eef73c08df69fb2d8038836e797a0749e"
          ],
          "remoteTokenAddress": "0x000000000000000000000000a022bdf5720495b5cabd92c37c387568f941f9f2"
        }
      ]
    ],
    "0x88fd2ECD0B9250F203e99E80eb78b0C32B8AdB16",
    [
      1209600,
      "0x88fd2ECD0B9250F203e99E80eb78b0C32B8AdB16",
      "0x31E483753fbEd8306631244422c46aC1a60FFc1d"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "57e6fd2aef4f74cdcfd241869345d37e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"mainnetChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"linkToken\",\"type\":\"address\"},{\"internalType\":\"contract TokenAdminRegistry\",\"name\":\"tokenAdminRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rmnProxy\",\"type\":\"address\"},{\"internalType\":\"contract RegistryModuleOwnerCustom\",\"name\":\"registryModuleOwnerCustom\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes[]\",\"name\":\"remotePoolAddresses\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"remoteTokenAddress\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"capacity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"internalType\":\"struct RateLimiter.Config\",\"name\":\"outboundRateLimiterConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"capacity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"internalType\":\"struct RateLimiter.Config\",\"name\":\"inboundRateLimiterConfig\",\"type\":\"tuple\"}],\"internalType\":\"struct ITokenPool.ChainUpdate[]\",\"name\":\"chainsToAdd\",\"type\":\"tuple[]\"}],\"internalType\":\"struct L2Deployer.CCIPConfig\",\"name\":\"_ccipConfig\",\"type\":\"tuple\"},{\"internalType\":\"contract BridgedGovernance\",\"name\":\"_bridgedGovernance\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minApplicationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bridgeAccounting\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ccipAdmin\",\"type\":\"address\"}],\"internalType\":\"struct L2Deployer.FrankencoinConfig\",\"name\":\"_frankencoinConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"CCIPAdminMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"bridgedFrankencoin\",\"outputs\":[{\"internalType\":\"contract BridgedFrankencoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ccipAdmin\",\"outputs\":[{\"internalType\":\"contract CCIPAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testMinter\",\"outputs\":[{\"internalType\":\"contract L2TestMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPool\",\"outputs\":[{\"internalType\":\"contract BurnMintTokenPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deploy/L2Deployer.sol\":\"L2Deployer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IAny2EVMMessageReceiver} from \\\"../interfaces/IAny2EVMMessageReceiver.sol\\\";\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\nimport {IERC165} from \\\"../../vendor/openzeppelin-solidity/v5.0.2/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\\n  address internal immutable i_ccipRouter;\\n\\n  constructor(\\n    address router\\n  ) {\\n    if (router == address(0)) revert InvalidRouter(address(0));\\n    i_ccipRouter = router;\\n  }\\n\\n  /// @notice IERC165 supports an interfaceId\\n  /// @param interfaceId The interfaceId to check\\n  /// @return true if the interfaceId is supported\\n  /// @dev Should indicate whether the contract implements IAny2EVMMessageReceiver\\n  /// e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId\\n  /// This allows CCIP to check if ccipReceive is available before calling it.\\n  /// If this returns false or reverts, only tokens are transferred to the receiver.\\n  /// If this returns true, tokens are transferred and ccipReceive is called atomically.\\n  /// Additionally, if the receiver address does not have code associated with\\n  /// it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override returns (bool) {\\n    return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\\n  }\\n\\n  /// @inheritdoc IAny2EVMMessageReceiver\\n  function ccipReceive(\\n    Client.Any2EVMMessage calldata message\\n  ) external virtual override onlyRouter {\\n    _ccipReceive(message);\\n  }\\n\\n  /// @notice Override this function in your implementation.\\n  /// @param message Any2EVMMessage\\n  function _ccipReceive(\\n    Client.Any2EVMMessage memory message\\n  ) internal virtual;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  // Plumbing\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Return the current router\\n  /// @return CCIP router address\\n  function getRouter() public view virtual returns (address) {\\n    return address(i_ccipRouter);\\n  }\\n\\n  error InvalidRouter(address router);\\n\\n  /// @dev only calls from the set router are accepted.\\n  modifier onlyRouter() {\\n    if (msg.sender != getRouter()) revert InvalidRouter(msg.sender);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xdfac759d9e7f181e17154daebb2478b76c28c57003b836a3ea06a6a1e6c65e29\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\n/// @notice Application contracts that intend to receive messages from\\n/// the router should implement this interface.\\ninterface IAny2EVMMessageReceiver {\\n  /// @notice Called by the Router to deliver a message.\\n  /// If this reverts, any token transfers also revert. The message\\n  /// will move to a FAILED state and become available for manual execution.\\n  /// @param message CCIP Message\\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\\n  function ccipReceive(\\n    Client.Any2EVMMessage calldata message\\n  ) external;\\n}\\n\",\"keccak256\":\"0x97bcf80c56b5ed4b30a351e3c3b6d5f28f053d4d601894a5067c4e697a00b74d\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IGetCCIPAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGetCCIPAdmin {\\n  /// @notice Returns the admin of the token.\\n  /// @dev This method is named to never conflict with existing methods.\\n  function getCCIPAdmin() external view returns (address);\\n}\\n\",\"keccak256\":\"0x915794040125fbb75110b20e60c3e6b584d92f57d40b77266bc37d31dae3bd29\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwner {\\n  /// @notice Returns the owner of the contract.\\n  /// @dev This method is named to match with the OpenZeppelin Ownable contract.\\n  function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x53acc313bc9fd39590c1a0a770bd311c85d803741d361319393c6bcfff5ed2a6\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Pool} from \\\"../libraries/Pool.sol\\\";\\n\\nimport {IERC165} from \\\"../../vendor/openzeppelin-solidity/v5.0.2/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @notice Shared public interface for multiple V1 pool types.\\n/// Each pool type handles a different child token model (lock/unlock, mint/burn.)\\ninterface IPoolV1 is IERC165 {\\n  /// @notice Lock tokens into the pool or burn the tokens.\\n  /// @param lockOrBurnIn Encoded data fields for the processing of tokens on the source chain.\\n  /// @return lockOrBurnOut Encoded data fields for the processing of tokens on the destination chain.\\n  function lockOrBurn(\\n    Pool.LockOrBurnInV1 calldata lockOrBurnIn\\n  ) external returns (Pool.LockOrBurnOutV1 memory lockOrBurnOut);\\n\\n  /// @notice Releases or mints tokens to the receiver address.\\n  /// @param releaseOrMintIn All data required to release or mint tokens.\\n  /// @return releaseOrMintOut The amount of tokens released or minted on the local chain, denominated\\n  /// in the local token's decimals.\\n  /// @dev The offramp asserts that the balanceOf of the receiver has been incremented by exactly the number\\n  /// of tokens that is returned in ReleaseOrMintOutV1.destinationAmount. If the amounts do not match, the tx reverts.\\n  function releaseOrMint(\\n    Pool.ReleaseOrMintInV1 calldata releaseOrMintIn\\n  ) external returns (Pool.ReleaseOrMintOutV1 memory);\\n\\n  /// @notice Checks whether a remote chain is supported in the token pool.\\n  /// @param remoteChainSelector The selector of the remote chain.\\n  /// @return true if the given chain is a permissioned remote chain.\\n  function isSupportedChain(\\n    uint64 remoteChainSelector\\n  ) external view returns (bool);\\n\\n  /// @notice Returns if the token pool supports the given token.\\n  /// @param token The address of the token.\\n  /// @return true if the token is supported by the pool.\\n  function isSupportedToken(\\n    address token\\n  ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9c7a2905deceb86bd729af5adb650306523db604f83f9cb4e7dbff7652d4e5b5\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRMN.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice This interface contains the only RMN-related functions that might be used on-chain by other CCIP contracts.\\ninterface IRMN {\\n  /// @notice A Merkle root tagged with the address of the commit store contract it is destined for.\\n  struct TaggedRoot {\\n    address commitStore;\\n    bytes32 root;\\n  }\\n\\n  /// @notice Callers MUST NOT cache the return value as a blessed tagged root could become unblessed.\\n  function isBlessed(\\n    TaggedRoot calldata taggedRoot\\n  ) external view returns (bool);\\n\\n  /// @notice Iff there is an active global or legacy curse, this function returns true.\\n  function isCursed() external view returns (bool);\\n\\n  /// @notice Iff there is an active global curse, or an active curse for `subject`, this function returns true.\\n  /// @param subject To check whether a particular chain is cursed, set to bytes16(uint128(chainSelector)).\\n  function isCursed(\\n    bytes16 subject\\n  ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x266447efd07fc416160fe15a2a90e859e1e9d710212663fe35d266c67e2b9532\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouter {\\n  error OnlyOffRamp();\\n\\n  /// @notice Route the message to its intended receiver contract.\\n  /// @param message Client.Any2EVMMessage struct.\\n  /// @param gasForCallExactCheck of params for exec\\n  /// @param gasLimit set of params for exec\\n  /// @param receiver set of params for exec\\n  /// @dev if the receiver is a contracts that signals support for CCIP execution through EIP-165.\\n  /// the contract is called. If not, only tokens are transferred.\\n  /// @return success A boolean value indicating whether the ccip message was received without errors.\\n  /// @return retBytes A bytes array containing return data form CCIP receiver.\\n  /// @return gasUsed the gas used by the external customer call. Does not include any overhead.\\n  function routeMessage(\\n    Client.Any2EVMMessage calldata message,\\n    uint16 gasForCallExactCheck,\\n    uint256 gasLimit,\\n    address receiver\\n  ) external returns (bool success, bytes memory retBytes, uint256 gasUsed);\\n\\n  /// @notice Returns the configured onramp for a specific destination chain.\\n  /// @param destChainSelector The destination chain Id to get the onRamp for.\\n  /// @return onRampAddress The address of the onRamp.\\n  function getOnRamp(\\n    uint64 destChainSelector\\n  ) external view returns (address onRampAddress);\\n\\n  /// @notice Return true if the given offRamp is a configured offRamp for the given source chain.\\n  /// @param sourceChainSelector The source chain selector to check.\\n  /// @param offRamp The address of the offRamp to check.\\n  function isOffRamp(uint64 sourceChainSelector, address offRamp) external view returns (bool isOffRamp);\\n}\\n\",\"keccak256\":\"0x07128ab8bc01fd81fa770047048385cfc9f260d4b932370c3a59acbc26bfdc07\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param destChainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(\\n    uint64 destChainSelector\\n  ) external view returns (bool supported);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns execution fee for the message\\n  /// delivery to destination chain, denominated in the feeToken specified in the message.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1f1402f2a1735a827db4951b6bbb53eeb582ecfe03988e55eeb335858f346e67\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/ITokenAdminRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface ITokenAdminRegistry {\\n  /// @notice Returns the pool for the given token.\\n  function getPool(\\n    address token\\n  ) external view returns (address);\\n\\n  /// @notice Proposes an administrator for the given token as pending administrator.\\n  /// @param localToken The token to register the administrator for.\\n  /// @param administrator The administrator to register.\\n  function proposeAdministrator(address localToken, address administrator) external;\\n\\n  /// @notice Accepts the administrator role for a token.\\n  /// @param localToken The token to accept the administrator role for.\\n  /// @dev This function can only be called by the pending administrator.\\n  function acceptAdminRole(\\n    address localToken\\n  ) external;\\n\\n  /// @notice Sets the pool for a token. Setting the pool to address(0) effectively delists the token\\n  /// from CCIP. Setting the pool to any other address enables the token on CCIP.\\n  /// @param localToken The token to set the pool for.\\n  /// @param pool The pool to set for the token.\\n  function setPool(address localToken, address pool) external;\\n\\n  /// @notice Transfers the administrator role for a token to a new address with a 2-step process.\\n  /// @param localToken The token to transfer the administrator role for.\\n  /// @param newAdmin The address to transfer the administrator role to. Can be address(0) to cancel\\n  /// a pending transfer.\\n  /// @dev The new admin must call `acceptAdminRole` to accept the role.\\n  function transferAdminRole(address localToken, address newAdmin) external;\\n}\\n\",\"keccak256\":\"0xbaf636acea653acae0832636a675f2a830088b4ff7d0a5193daa6f583ba966ae\",\"license\":\"BUSL-1.1\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV2)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(\\n    EVMExtraArgsV1 memory extraArgs\\n  ) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV2\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V2_TAG = 0x181dcf10;\\n\\n  /// @param gasLimit: gas limit for the callback on the destination chain.\\n  /// @param allowOutOfOrderExecution: if true, it indicates that the message can be executed in any order relative to other messages from the same sender.\\n  /// This value's default varies by chain. On some chains, a particular value is enforced, meaning if the expected value\\n  /// is not set, the message request will revert.\\n  struct EVMExtraArgsV2 {\\n    uint256 gasLimit;\\n    bool allowOutOfOrderExecution;\\n  }\\n\\n  function _argsToBytes(\\n    EVMExtraArgsV2 memory extraArgs\\n  ) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V2_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x052174af3c87abcbf5e7754f3d3aa9d0ff5054ecef0d9d01ef087c28a468bb0b\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice This library contains various token pool functions to aid constructing the return data.\\nlibrary Pool {\\n  // The tag used to signal support for the pool v1 standard\\n  // bytes4(keccak256(\\\"CCIP_POOL_V1\\\"))\\n  bytes4 public constant CCIP_POOL_V1 = 0xaff2afbf;\\n\\n  // The number of bytes in the return data for a pool v1 releaseOrMint call.\\n  // This should match the size of the ReleaseOrMintOutV1 struct.\\n  uint16 public constant CCIP_POOL_V1_RET_BYTES = 32;\\n\\n  // The default max number of bytes in the return data for a pool v1 lockOrBurn call.\\n  // This data can be used to send information to the destination chain token pool. Can be overwritten\\n  // in the TokenTransferFeeConfig.destBytesOverhead if more data is required.\\n  uint32 public constant CCIP_LOCK_OR_BURN_V1_RET_BYTES = 32;\\n\\n  struct LockOrBurnInV1 {\\n    bytes receiver; //  The recipient of the tokens on the destination chain, abi encoded\\n    uint64 remoteChainSelector; // \\u2500\\u256e The chain ID of the destination chain\\n    address originalSender; // \\u2500\\u2500\\u2500\\u2500\\u2500\\u256f The original sender of the tx on the source chain\\n    uint256 amount; //  The amount of tokens to lock or burn, denominated in the source token's decimals\\n    address localToken; //  The address on this chain of the token to lock or burn\\n  }\\n\\n  struct LockOrBurnOutV1 {\\n    // The address of the destination token, abi encoded in the case of EVM chains\\n    // This value is UNTRUSTED as any pool owner can return whatever value they want.\\n    bytes destTokenAddress;\\n    // Optional pool data to be transferred to the destination chain. Be default this is capped at\\n    // CCIP_LOCK_OR_BURN_V1_RET_BYTES bytes. If more data is required, the TokenTransferFeeConfig.destBytesOverhead\\n    // has to be set for the specific token.\\n    bytes destPoolData;\\n  }\\n\\n  struct ReleaseOrMintInV1 {\\n    bytes originalSender; //          The original sender of the tx on the source chain\\n    uint64 remoteChainSelector; // \\u2500\\u256e The chain ID of the source chain\\n    address receiver; // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u256f The recipient of the tokens on the destination chain.\\n    uint256 amount; //                The amount of tokens to release or mint, denominated in the source token's decimals\\n    address localToken; //            The address on this chain of the token to release or mint\\n    /// @dev WARNING: sourcePoolAddress should be checked prior to any processing of funds. Make sure it matches the\\n    /// expected pool address for the given remoteChainSelector.\\n    bytes sourcePoolAddress; //       The address of the source pool, abi encoded in the case of EVM chains\\n    bytes sourcePoolData; //          The data received from the source pool to process the release or mint\\n    /// @dev WARNING: offchainTokenData is untrusted data.\\n    bytes offchainTokenData; //       The offchain data to process the release or mint\\n  }\\n\\n  struct ReleaseOrMintOutV1 {\\n    // The number of tokens released or minted on the destination chain, denominated in the local token's decimals.\\n    // This value is expected to be equal to the ReleaseOrMintInV1.amount in the case where the source and destination\\n    // chain have the same number of decimals.\\n    uint256 destinationAmount;\\n  }\\n}\\n\",\"keccak256\":\"0x0bab34da83a9a9f207471db3aeb0866a376aada7e287b0d8a7ac74a8d77fc2a5\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/RateLimiter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\n/// @notice Implements Token Bucket rate limiting.\\n/// @dev uint128 is safe for rate limiter state.\\n/// For USD value rate limiting, it can adequately store USD value in 18 decimals.\\n/// For ERC20 token amount rate limiting, all tokens that will be listed will have at most\\n/// a supply of uint128.max tokens, and it will therefore not overflow the bucket.\\n/// In exceptional scenarios where tokens consumed may be larger than uint128,\\n/// e.g. compromised issuer, an enabled RateLimiter will check and revert.\\nlibrary RateLimiter {\\n  error BucketOverfilled();\\n  error OnlyCallableByAdminOrOwner();\\n  error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress);\\n  error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress);\\n  error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested);\\n  error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available);\\n  error InvalidRateLimitRate(Config rateLimiterConfig);\\n  error DisabledNonZeroRateLimit(Config config);\\n  error RateLimitMustBeDisabled();\\n\\n  event TokensConsumed(uint256 tokens);\\n  event ConfigChanged(Config config);\\n\\n  struct TokenBucket {\\n    uint128 tokens; // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u256e Current number of tokens that are in the bucket.\\n    uint32 lastUpdated; //   \\u2502 Timestamp in seconds of the last token refill, good for 100+ years.\\n    bool isEnabled; // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u256f Indication whether the rate limiting is enabled or not\\n    uint128 capacity; // \\u2500\\u2500\\u2500\\u2500\\u256e Maximum number of tokens that can be in the bucket.\\n    uint128 rate; // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u256f Number of tokens per second that the bucket is refilled.\\n  }\\n\\n  struct Config {\\n    bool isEnabled; // Indication whether the rate limiting should be enabled\\n    uint128 capacity; // \\u2500\\u2500\\u2500\\u2500\\u256e Specifies the capacity of the rate limiter\\n    uint128 rate; //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u256f Specifies the rate of the rate limiter\\n  }\\n\\n  /// @notice _consume removes the given tokens from the pool, lowering the\\n  /// rate tokens allowed to be consumed for subsequent calls.\\n  /// @param requestTokens The total tokens to be consumed from the bucket.\\n  /// @param tokenAddress The token to consume capacity for, use 0x0 to indicate aggregate value capacity.\\n  /// @dev Reverts when requestTokens exceeds bucket capacity or available tokens in the bucket\\n  /// @dev emits removal of requestTokens if requestTokens is > 0\\n  function _consume(TokenBucket storage s_bucket, uint256 requestTokens, address tokenAddress) internal {\\n    // If there is no value to remove or rate limiting is turned off, skip this step to reduce gas usage\\n    if (!s_bucket.isEnabled || requestTokens == 0) {\\n      return;\\n    }\\n\\n    uint256 tokens = s_bucket.tokens;\\n    uint256 capacity = s_bucket.capacity;\\n    uint256 timeDiff = block.timestamp - s_bucket.lastUpdated;\\n\\n    if (timeDiff != 0) {\\n      if (tokens > capacity) revert BucketOverfilled();\\n\\n      // Refill tokens when arriving at a new block time\\n      tokens = _calculateRefill(capacity, tokens, timeDiff, s_bucket.rate);\\n\\n      s_bucket.lastUpdated = uint32(block.timestamp);\\n    }\\n\\n    if (capacity < requestTokens) {\\n      // Token address 0 indicates consuming aggregate value rate limit capacity.\\n      if (tokenAddress == address(0)) revert AggregateValueMaxCapacityExceeded(capacity, requestTokens);\\n      revert TokenMaxCapacityExceeded(capacity, requestTokens, tokenAddress);\\n    }\\n    if (tokens < requestTokens) {\\n      uint256 rate = s_bucket.rate;\\n      // Wait required until the bucket is refilled enough to accept this value, round up to next higher second\\n      // Consume is not guaranteed to succeed after wait time passes if there is competing traffic.\\n      // This acts as a lower bound of wait time.\\n      uint256 minWaitInSeconds = ((requestTokens - tokens) + (rate - 1)) / rate;\\n\\n      if (tokenAddress == address(0)) revert AggregateValueRateLimitReached(minWaitInSeconds, tokens);\\n      revert TokenRateLimitReached(minWaitInSeconds, tokens, tokenAddress);\\n    }\\n    tokens -= requestTokens;\\n\\n    // Downcast is safe here, as tokens is not larger than capacity\\n    s_bucket.tokens = uint128(tokens);\\n    emit TokensConsumed(requestTokens);\\n  }\\n\\n  /// @notice Gets the token bucket with its values for the block it was requested at.\\n  /// @return The token bucket.\\n  function _currentTokenBucketState(\\n    TokenBucket memory bucket\\n  ) internal view returns (TokenBucket memory) {\\n    // We update the bucket to reflect the status at the exact time of the\\n    // call. This means we might need to refill a part of the bucket based\\n    // on the time that has passed since the last update.\\n    bucket.tokens =\\n      uint128(_calculateRefill(bucket.capacity, bucket.tokens, block.timestamp - bucket.lastUpdated, bucket.rate));\\n    bucket.lastUpdated = uint32(block.timestamp);\\n    return bucket;\\n  }\\n\\n  /// @notice Sets the rate limited config.\\n  /// @param s_bucket The token bucket\\n  /// @param config The new config\\n  function _setTokenBucketConfig(TokenBucket storage s_bucket, Config memory config) internal {\\n    // First update the bucket to make sure the proper rate is used for all the time\\n    // up until the config change.\\n    uint256 timeDiff = block.timestamp - s_bucket.lastUpdated;\\n    if (timeDiff != 0) {\\n      s_bucket.tokens = uint128(_calculateRefill(s_bucket.capacity, s_bucket.tokens, timeDiff, s_bucket.rate));\\n\\n      s_bucket.lastUpdated = uint32(block.timestamp);\\n    }\\n\\n    s_bucket.tokens = uint128(_min(config.capacity, s_bucket.tokens));\\n    s_bucket.isEnabled = config.isEnabled;\\n    s_bucket.capacity = config.capacity;\\n    s_bucket.rate = config.rate;\\n\\n    emit ConfigChanged(config);\\n  }\\n\\n  /// @notice Validates the token bucket config\\n  function _validateTokenBucketConfig(Config memory config, bool mustBeDisabled) internal pure {\\n    if (config.isEnabled) {\\n      if (config.rate >= config.capacity || config.rate == 0) {\\n        revert InvalidRateLimitRate(config);\\n      }\\n      if (mustBeDisabled) {\\n        revert RateLimitMustBeDisabled();\\n      }\\n    } else {\\n      if (config.rate != 0 || config.capacity != 0) {\\n        revert DisabledNonZeroRateLimit(config);\\n      }\\n    }\\n  }\\n\\n  /// @notice Calculate refilled tokens\\n  /// @param capacity bucket capacity\\n  /// @param tokens current bucket tokens\\n  /// @param timeDiff block time difference since last refill\\n  /// @param rate bucket refill rate\\n  /// @return the value of tokens after refill\\n  function _calculateRefill(\\n    uint256 capacity,\\n    uint256 tokens,\\n    uint256 timeDiff,\\n    uint256 rate\\n  ) private pure returns (uint256) {\\n    return _min(capacity, tokens + timeDiff * rate);\\n  }\\n\\n  /// @notice Return the smallest of two integers\\n  /// @param a first int\\n  /// @param b second int\\n  /// @return smallest\\n  function _min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n}\\n\",\"keccak256\":\"0xd279954d3429598e5b8513c90e42805195bc29780abb8350007285626333809d\",\"license\":\"BUSL-1.1\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/pools/BurnMintTokenPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.24;\\n\\nimport {ITypeAndVersion} from \\\"../../shared/interfaces/ITypeAndVersion.sol\\\";\\nimport {IBurnMintERC20} from \\\"../../shared/token/ERC20/IBurnMintERC20.sol\\\";\\n\\nimport {BurnMintTokenPoolAbstract} from \\\"./BurnMintTokenPoolAbstract.sol\\\";\\nimport {TokenPool} from \\\"./TokenPool.sol\\\";\\n\\n/// @notice This pool mints and burns a 3rd-party token.\\n/// @dev Pool whitelisting mode is set in the constructor and cannot be modified later.\\n/// It either accepts any address as originalSender, or only accepts whitelisted originalSender.\\n/// The only way to change whitelisting mode is to deploy a new pool.\\n/// If that is expected, please make sure the token's burner/minter roles are adjustable.\\n/// @dev This contract is a variant of BurnMintTokenPool that uses `burn(amount)`.\\ncontract BurnMintTokenPool is BurnMintTokenPoolAbstract, ITypeAndVersion {\\n  string public constant override typeAndVersion = \\\"BurnMintTokenPool 1.5.1\\\";\\n\\n  constructor(\\n    IBurnMintERC20 token,\\n    uint8 localTokenDecimals,\\n    address[] memory allowlist,\\n    address rmnProxy,\\n    address router\\n  ) TokenPool(token, localTokenDecimals, allowlist, rmnProxy, router) {}\\n\\n  /// @inheritdoc BurnMintTokenPoolAbstract\\n  function _burn(\\n    uint256 amount\\n  ) internal virtual override {\\n    IBurnMintERC20(address(i_token)).burn(amount);\\n  }\\n}\\n\",\"keccak256\":\"0x6a2ab062333ac4043a5779d2ba782637577c01489cb3bbad831bf44c74602406\",\"license\":\"BUSL-1.1\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/pools/BurnMintTokenPoolAbstract.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.24;\\n\\nimport {IBurnMintERC20} from \\\"../../shared/token/ERC20/IBurnMintERC20.sol\\\";\\n\\nimport {Pool} from \\\"../libraries/Pool.sol\\\";\\nimport {TokenPool} from \\\"./TokenPool.sol\\\";\\n\\nabstract contract BurnMintTokenPoolAbstract is TokenPool {\\n  /// @notice Contains the specific burn call for a pool.\\n  /// @dev overriding this method allows us to create pools with different burn signatures\\n  /// without duplicating the underlying logic.\\n  function _burn(\\n    uint256 amount\\n  ) internal virtual;\\n\\n  /// @notice Burn the token in the pool\\n  /// @dev The _validateLockOrBurn check is an essential security check\\n  function lockOrBurn(\\n    Pool.LockOrBurnInV1 calldata lockOrBurnIn\\n  ) external virtual override returns (Pool.LockOrBurnOutV1 memory) {\\n    _validateLockOrBurn(lockOrBurnIn);\\n\\n    _burn(lockOrBurnIn.amount);\\n\\n    emit Burned(msg.sender, lockOrBurnIn.amount);\\n\\n    return Pool.LockOrBurnOutV1({\\n      destTokenAddress: getRemoteToken(lockOrBurnIn.remoteChainSelector),\\n      destPoolData: _encodeLocalDecimals()\\n    });\\n  }\\n\\n  /// @notice Mint tokens from the pool to the recipient\\n  /// @dev The _validateReleaseOrMint check is an essential security check\\n  function releaseOrMint(\\n    Pool.ReleaseOrMintInV1 calldata releaseOrMintIn\\n  ) external virtual override returns (Pool.ReleaseOrMintOutV1 memory) {\\n    _validateReleaseOrMint(releaseOrMintIn);\\n\\n    // Calculate the local amount\\n    uint256 localAmount =\\n      _calculateLocalAmount(releaseOrMintIn.amount, _parseRemoteDecimals(releaseOrMintIn.sourcePoolData));\\n\\n    // Mint to the receiver\\n    IBurnMintERC20(address(i_token)).mint(releaseOrMintIn.receiver, localAmount);\\n\\n    emit Minted(msg.sender, releaseOrMintIn.receiver, localAmount);\\n\\n    return Pool.ReleaseOrMintOutV1({destinationAmount: localAmount});\\n  }\\n}\\n\",\"keccak256\":\"0x4cb9b780e28ad623884538d1c5eb07bda3d65a7bf9249cfa9cc95e0064d7b631\",\"license\":\"BUSL-1.1\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/pools/TokenPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.24;\\n\\nimport {IPoolV1} from \\\"../interfaces/IPool.sol\\\";\\nimport {IRMN} from \\\"../interfaces/IRMN.sol\\\";\\nimport {IRouter} from \\\"../interfaces/IRouter.sol\\\";\\n\\nimport {Ownable2StepMsgSender} from \\\"../../shared/access/Ownable2StepMsgSender.sol\\\";\\nimport {Pool} from \\\"../libraries/Pool.sol\\\";\\nimport {RateLimiter} from \\\"../libraries/RateLimiter.sol\\\";\\n\\nimport {IERC20} from \\\"../../vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from\\n  \\\"../../vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IERC165} from \\\"../../vendor/openzeppelin-solidity/v5.0.2/contracts/utils/introspection/IERC165.sol\\\";\\nimport {EnumerableSet} from \\\"../../vendor/openzeppelin-solidity/v5.0.2/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/// @dev This pool supports different decimals on different chains but using this feature could impact the total number\\n/// of tokens in circulation. Since all of the tokens are locked/burned on the source, and a rounded amount is minted/released on the\\n/// destination, the number of tokens minted/released could be less than the number of tokens burned/locked. This is because the source\\n/// chain does not know about the destination token decimals. This is not a problem if the decimals are the same on both\\n/// chains.\\n///\\n/// Example:\\n/// Assume there is a token with 6 decimals on chain A and 3 decimals on chain B.\\n/// - 1.234567 tokens are burned on chain A.\\n/// - 1.234    tokens are minted on chain B.\\n/// When sending the 1.234 tokens back to chain A, you will receive 1.234000 tokens on chain A, effectively losing\\n/// 0.000567 tokens.\\n/// In the case of a burnMint pool on chain A, these funds are burned in the pool on chain A.\\n/// In the case of a lockRelease pool on chain A, these funds accumulate in the pool on chain A.\\nabstract contract TokenPool is IPoolV1, Ownable2StepMsgSender {\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n  using RateLimiter for RateLimiter.TokenBucket;\\n\\n  error CallerIsNotARampOnRouter(address caller);\\n  error ZeroAddressNotAllowed();\\n  error SenderNotAllowed(address sender);\\n  error AllowListNotEnabled();\\n  error NonExistentChain(uint64 remoteChainSelector);\\n  error ChainNotAllowed(uint64 remoteChainSelector);\\n  error CursedByRMN();\\n  error ChainAlreadyExists(uint64 chainSelector);\\n  error InvalidSourcePoolAddress(bytes sourcePoolAddress);\\n  error InvalidToken(address token);\\n  error Unauthorized(address caller);\\n  error PoolAlreadyAdded(uint64 remoteChainSelector, bytes remotePoolAddress);\\n  error InvalidRemotePoolForChain(uint64 remoteChainSelector, bytes remotePoolAddress);\\n  error InvalidRemoteChainDecimals(bytes sourcePoolData);\\n  error MismatchedArrayLengths();\\n  error OverflowDetected(uint8 remoteDecimals, uint8 localDecimals, uint256 remoteAmount);\\n  error InvalidDecimalArgs(uint8 expected, uint8 actual);\\n\\n  event Locked(address indexed sender, uint256 amount);\\n  event Burned(address indexed sender, uint256 amount);\\n  event Released(address indexed sender, address indexed recipient, uint256 amount);\\n  event Minted(address indexed sender, address indexed recipient, uint256 amount);\\n  event ChainAdded(\\n    uint64 remoteChainSelector,\\n    bytes remoteToken,\\n    RateLimiter.Config outboundRateLimiterConfig,\\n    RateLimiter.Config inboundRateLimiterConfig\\n  );\\n  event ChainConfigured(\\n    uint64 remoteChainSelector,\\n    RateLimiter.Config outboundRateLimiterConfig,\\n    RateLimiter.Config inboundRateLimiterConfig\\n  );\\n  event ChainRemoved(uint64 remoteChainSelector);\\n  event RemotePoolAdded(uint64 indexed remoteChainSelector, bytes remotePoolAddress);\\n  event RemotePoolRemoved(uint64 indexed remoteChainSelector, bytes remotePoolAddress);\\n  event AllowListAdd(address sender);\\n  event AllowListRemove(address sender);\\n  event RouterUpdated(address oldRouter, address newRouter);\\n  event RateLimitAdminSet(address rateLimitAdmin);\\n\\n  struct ChainUpdate {\\n    uint64 remoteChainSelector; // Remote chain selector\\n    bytes[] remotePoolAddresses; // Address of the remote pool, ABI encoded in the case of a remote EVM chain.\\n    bytes remoteTokenAddress; // Address of the remote token, ABI encoded in the case of a remote EVM chain.\\n    RateLimiter.Config outboundRateLimiterConfig; // Outbound rate limited config, meaning the rate limits for all of the onRamps for the given chain\\n    RateLimiter.Config inboundRateLimiterConfig; // Inbound rate limited config, meaning the rate limits for all of the offRamps for the given chain\\n  }\\n\\n  struct RemoteChainConfig {\\n    RateLimiter.TokenBucket outboundRateLimiterConfig; // Outbound rate limited config, meaning the rate limits for all of the onRamps for the given chain\\n    RateLimiter.TokenBucket inboundRateLimiterConfig; // Inbound rate limited config, meaning the rate limits for all of the offRamps for the given chain\\n    bytes remoteTokenAddress; // Address of the remote token, ABI encoded in the case of a remote EVM chain.\\n    EnumerableSet.Bytes32Set remotePools; // Set of remote pool hashes, ABI encoded in the case of a remote EVM chain.\\n  }\\n\\n  /// @dev The bridgeable token that is managed by this pool. Pools could support multiple tokens at the same time if\\n  /// required, but this implementation only supports one token.\\n  IERC20 internal immutable i_token;\\n  /// @dev The number of decimals of the token managed by this pool.\\n  uint8 internal immutable i_tokenDecimals;\\n  /// @dev The address of the RMN proxy\\n  address internal immutable i_rmnProxy;\\n  /// @dev The immutable flag that indicates if the pool is access-controlled.\\n  bool internal immutable i_allowlistEnabled;\\n  /// @dev A set of addresses allowed to trigger lockOrBurn as original senders.\\n  /// Only takes effect if i_allowlistEnabled is true.\\n  /// This can be used to ensure only token-issuer specified addresses can move tokens.\\n  EnumerableSet.AddressSet internal s_allowlist;\\n  /// @dev The address of the router\\n  IRouter internal s_router;\\n  /// @dev A set of allowed chain selectors. We want the allowlist to be enumerable to\\n  /// be able to quickly determine (without parsing logs) who can access the pool.\\n  /// @dev The chain selectors are in uint256 format because of the EnumerableSet implementation.\\n  EnumerableSet.UintSet internal s_remoteChainSelectors;\\n  mapping(uint64 remoteChainSelector => RemoteChainConfig) internal s_remoteChainConfigs;\\n  /// @notice A mapping of hashed pool addresses to their unhashed form. This is used to be able to find the actually\\n  /// configured pools and not just their hashed versions.\\n  mapping(bytes32 poolAddressHash => bytes poolAddress) internal s_remotePoolAddresses;\\n  /// @notice The address of the rate limiter admin.\\n  /// @dev Can be address(0) if none is configured.\\n  address internal s_rateLimitAdmin;\\n\\n  constructor(IERC20 token, uint8 localTokenDecimals, address[] memory allowlist, address rmnProxy, address router) {\\n    if (address(token) == address(0) || router == address(0) || rmnProxy == address(0)) revert ZeroAddressNotAllowed();\\n    i_token = token;\\n    i_rmnProxy = rmnProxy;\\n\\n    try IERC20Metadata(address(token)).decimals() returns (uint8 actualTokenDecimals) {\\n      if (localTokenDecimals != actualTokenDecimals) {\\n        revert InvalidDecimalArgs(localTokenDecimals, actualTokenDecimals);\\n      }\\n    } catch {\\n      // The decimals function doesn't exist, which is possible since it's optional in the ERC20 spec. We skip the check and\\n      // assume the supplied token decimals are correct.\\n    }\\n    i_tokenDecimals = localTokenDecimals;\\n\\n    s_router = IRouter(router);\\n\\n    // Pool can be set as permissioned or permissionless at deployment time only to save hot-path gas.\\n    i_allowlistEnabled = allowlist.length > 0;\\n    if (i_allowlistEnabled) {\\n      _applyAllowListUpdates(new address[](0), allowlist);\\n    }\\n  }\\n\\n  /// @inheritdoc IPoolV1\\n  function isSupportedToken(\\n    address token\\n  ) public view virtual returns (bool) {\\n    return token == address(i_token);\\n  }\\n\\n  /// @notice Gets the IERC20 token that this pool can lock or burn.\\n  /// @return token The IERC20 token representation.\\n  function getToken() public view returns (IERC20 token) {\\n    return i_token;\\n  }\\n\\n  /// @notice Get RMN proxy address\\n  /// @return rmnProxy Address of RMN proxy\\n  function getRmnProxy() public view returns (address rmnProxy) {\\n    return i_rmnProxy;\\n  }\\n\\n  /// @notice Gets the pool's Router\\n  /// @return router The pool's Router\\n  function getRouter() public view returns (address router) {\\n    return address(s_router);\\n  }\\n\\n  /// @notice Sets the pool's Router\\n  /// @param newRouter The new Router\\n  function setRouter(\\n    address newRouter\\n  ) public onlyOwner {\\n    if (newRouter == address(0)) revert ZeroAddressNotAllowed();\\n    address oldRouter = address(s_router);\\n    s_router = IRouter(newRouter);\\n\\n    emit RouterUpdated(oldRouter, newRouter);\\n  }\\n\\n  /// @notice Signals which version of the pool interface is supported\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public pure virtual override returns (bool) {\\n    return interfaceId == Pool.CCIP_POOL_V1 || interfaceId == type(IPoolV1).interfaceId\\n      || interfaceId == type(IERC165).interfaceId;\\n  }\\n\\n  // ================================================================\\n  // \\u2502                         Validation                           \\u2502\\n  // ================================================================\\n\\n  /// @notice Validates the lock or burn input for correctness on\\n  /// - token to be locked or burned\\n  /// - RMN curse status\\n  /// - allowlist status\\n  /// - if the sender is a valid onRamp\\n  /// - rate limit status\\n  /// @param lockOrBurnIn The input to validate.\\n  /// @dev This function should always be called before executing a lock or burn. Not doing so would allow\\n  /// for various exploits.\\n  function _validateLockOrBurn(\\n    Pool.LockOrBurnInV1 calldata lockOrBurnIn\\n  ) internal {\\n    if (!isSupportedToken(lockOrBurnIn.localToken)) revert InvalidToken(lockOrBurnIn.localToken);\\n    if (IRMN(i_rmnProxy).isCursed(bytes16(uint128(lockOrBurnIn.remoteChainSelector)))) revert CursedByRMN();\\n    _checkAllowList(lockOrBurnIn.originalSender);\\n\\n    _onlyOnRamp(lockOrBurnIn.remoteChainSelector);\\n    _consumeOutboundRateLimit(lockOrBurnIn.remoteChainSelector, lockOrBurnIn.amount);\\n  }\\n\\n  /// @notice Validates the release or mint input for correctness on\\n  /// - token to be released or minted\\n  /// - RMN curse status\\n  /// - if the sender is a valid offRamp\\n  /// - if the source pool is valid\\n  /// - rate limit status\\n  /// @param releaseOrMintIn The input to validate.\\n  /// @dev This function should always be called before executing a release or mint. Not doing so would allow\\n  /// for various exploits.\\n  function _validateReleaseOrMint(\\n    Pool.ReleaseOrMintInV1 calldata releaseOrMintIn\\n  ) internal {\\n    if (!isSupportedToken(releaseOrMintIn.localToken)) revert InvalidToken(releaseOrMintIn.localToken);\\n    if (IRMN(i_rmnProxy).isCursed(bytes16(uint128(releaseOrMintIn.remoteChainSelector)))) revert CursedByRMN();\\n    _onlyOffRamp(releaseOrMintIn.remoteChainSelector);\\n\\n    // Validates that the source pool address is configured on this pool.\\n    if (!isRemotePool(releaseOrMintIn.remoteChainSelector, releaseOrMintIn.sourcePoolAddress)) {\\n      revert InvalidSourcePoolAddress(releaseOrMintIn.sourcePoolAddress);\\n    }\\n\\n    _consumeInboundRateLimit(releaseOrMintIn.remoteChainSelector, releaseOrMintIn.amount);\\n  }\\n\\n  // ================================================================\\n  // \\u2502                      Token decimals                          \\u2502\\n  // ================================================================\\n\\n  /// @notice Gets the IERC20 token decimals on the local chain.\\n  function getTokenDecimals() public view virtual returns (uint8 decimals) {\\n    return i_tokenDecimals;\\n  }\\n\\n  function _encodeLocalDecimals() internal view virtual returns (bytes memory) {\\n    return abi.encode(i_tokenDecimals);\\n  }\\n\\n  function _parseRemoteDecimals(\\n    bytes memory sourcePoolData\\n  ) internal view virtual returns (uint8) {\\n    // Fallback to the local token decimals if the source pool data is empty. This allows for backwards compatibility.\\n    if (sourcePoolData.length == 0) {\\n      return i_tokenDecimals;\\n    }\\n    if (sourcePoolData.length != 32) {\\n      revert InvalidRemoteChainDecimals(sourcePoolData);\\n    }\\n    uint256 remoteDecimals = abi.decode(sourcePoolData, (uint256));\\n    if (remoteDecimals > type(uint8).max) {\\n      revert InvalidRemoteChainDecimals(sourcePoolData);\\n    }\\n    return uint8(remoteDecimals);\\n  }\\n\\n  /// @notice Calculates the local amount based on the remote amount and decimals.\\n  /// @param remoteAmount The amount on the remote chain.\\n  /// @param remoteDecimals The decimals of the token on the remote chain.\\n  /// @return The local amount.\\n  /// @dev This function protects against overflows. If there is a transaction that hits the overflow check, it is\\n  /// probably incorrect as that means the amount cannot be represented on this chain. If the local decimals have been\\n  /// wrongly configured, the token issuer could redeploy the pool with the correct decimals and manually re-execute the\\n  /// CCIP tx to fix the issue.\\n  function _calculateLocalAmount(uint256 remoteAmount, uint8 remoteDecimals) internal view virtual returns (uint256) {\\n    if (remoteDecimals == i_tokenDecimals) {\\n      return remoteAmount;\\n    }\\n    if (remoteDecimals > i_tokenDecimals) {\\n      uint8 decimalsDiff = remoteDecimals - i_tokenDecimals;\\n      if (decimalsDiff > 77) {\\n        // This is a safety check to prevent overflow in the next calculation.\\n        revert OverflowDetected(remoteDecimals, i_tokenDecimals, remoteAmount);\\n      }\\n      // Solidity rounds down so there is no risk of minting more tokens than the remote chain sent.\\n      return remoteAmount / (10 ** decimalsDiff);\\n    }\\n\\n    // This is a safety check to prevent overflow in the next calculation.\\n    // More than 77 would never fit in a uint256 and would cause an overflow. We also check if the resulting amount\\n    // would overflow.\\n    uint8 diffDecimals = i_tokenDecimals - remoteDecimals;\\n    if (diffDecimals > 77 || remoteAmount > type(uint256).max / (10 ** diffDecimals)) {\\n      revert OverflowDetected(remoteDecimals, i_tokenDecimals, remoteAmount);\\n    }\\n\\n    return remoteAmount * (10 ** diffDecimals);\\n  }\\n\\n  // ================================================================\\n  // \\u2502                     Chain permissions                        \\u2502\\n  // ================================================================\\n\\n  /// @notice Gets the pool address on the remote chain.\\n  /// @param remoteChainSelector Remote chain selector.\\n  /// @dev To support non-evm chains, this value is encoded into bytes\\n  function getRemotePools(\\n    uint64 remoteChainSelector\\n  ) public view returns (bytes[] memory) {\\n    bytes32[] memory remotePoolHashes = s_remoteChainConfigs[remoteChainSelector].remotePools.values();\\n\\n    bytes[] memory remotePools = new bytes[](remotePoolHashes.length);\\n    for (uint256 i = 0; i < remotePoolHashes.length; ++i) {\\n      remotePools[i] = s_remotePoolAddresses[remotePoolHashes[i]];\\n    }\\n\\n    return remotePools;\\n  }\\n\\n  /// @notice Checks if the pool address is configured on the remote chain.\\n  /// @param remoteChainSelector Remote chain selector.\\n  /// @param remotePoolAddress The address of the remote pool.\\n  function isRemotePool(uint64 remoteChainSelector, bytes calldata remotePoolAddress) public view returns (bool) {\\n    return s_remoteChainConfigs[remoteChainSelector].remotePools.contains(keccak256(remotePoolAddress));\\n  }\\n\\n  /// @notice Gets the token address on the remote chain.\\n  /// @param remoteChainSelector Remote chain selector.\\n  /// @dev To support non-evm chains, this value is encoded into bytes\\n  function getRemoteToken(\\n    uint64 remoteChainSelector\\n  ) public view returns (bytes memory) {\\n    return s_remoteChainConfigs[remoteChainSelector].remoteTokenAddress;\\n  }\\n\\n  /// @notice Adds a remote pool for a given chain selector. This could be due to a pool being upgraded on the remote\\n  /// chain. We don't simply want to replace the old pool as there could still be valid inflight messages from the old\\n  /// pool. This function allows for multiple pools to be added for a single chain selector.\\n  /// @param remoteChainSelector The remote chain selector for which the remote pool address is being added.\\n  /// @param remotePoolAddress The address of the new remote pool.\\n  function addRemotePool(uint64 remoteChainSelector, bytes calldata remotePoolAddress) external onlyOwner {\\n    if (!isSupportedChain(remoteChainSelector)) revert NonExistentChain(remoteChainSelector);\\n\\n    _setRemotePool(remoteChainSelector, remotePoolAddress);\\n  }\\n\\n  /// @notice Removes the remote pool address for a given chain selector.\\n  /// @dev All inflight txs from the remote pool will be rejected after it is removed. To ensure no loss of funds, there\\n  /// should be no inflight txs from the given pool.\\n  function removeRemotePool(uint64 remoteChainSelector, bytes calldata remotePoolAddress) external onlyOwner {\\n    if (!isSupportedChain(remoteChainSelector)) revert NonExistentChain(remoteChainSelector);\\n\\n    if (!s_remoteChainConfigs[remoteChainSelector].remotePools.remove(keccak256(remotePoolAddress))) {\\n      revert InvalidRemotePoolForChain(remoteChainSelector, remotePoolAddress);\\n    }\\n\\n    emit RemotePoolRemoved(remoteChainSelector, remotePoolAddress);\\n  }\\n\\n  /// @inheritdoc IPoolV1\\n  function isSupportedChain(\\n    uint64 remoteChainSelector\\n  ) public view returns (bool) {\\n    return s_remoteChainSelectors.contains(remoteChainSelector);\\n  }\\n\\n  /// @notice Get list of allowed chains\\n  /// @return list of chains.\\n  function getSupportedChains() public view returns (uint64[] memory) {\\n    uint256[] memory uint256ChainSelectors = s_remoteChainSelectors.values();\\n    uint64[] memory chainSelectors = new uint64[](uint256ChainSelectors.length);\\n    for (uint256 i = 0; i < uint256ChainSelectors.length; ++i) {\\n      chainSelectors[i] = uint64(uint256ChainSelectors[i]);\\n    }\\n\\n    return chainSelectors;\\n  }\\n\\n  /// @notice Sets the permissions for a list of chains selectors. Actual senders for these chains\\n  /// need to be allowed on the Router to interact with this pool.\\n  /// @param remoteChainSelectorsToRemove A list of chain selectors to remove.\\n  /// @param chainsToAdd A list of chains and their new permission status & rate limits. Rate limits\\n  /// are only used when the chain is being added through `allowed` being true.\\n  /// @dev Only callable by the owner\\n  function applyChainUpdates(\\n    uint64[] calldata remoteChainSelectorsToRemove,\\n    ChainUpdate[] calldata chainsToAdd\\n  ) external virtual onlyOwner {\\n    for (uint256 i = 0; i < remoteChainSelectorsToRemove.length; ++i) {\\n      uint64 remoteChainSelectorToRemove = remoteChainSelectorsToRemove[i];\\n      // If the chain doesn't exist, revert\\n      if (!s_remoteChainSelectors.remove(remoteChainSelectorToRemove)) {\\n        revert NonExistentChain(remoteChainSelectorToRemove);\\n      }\\n\\n      // Remove all remote pool hashes for the chain\\n      bytes32[] memory remotePools = s_remoteChainConfigs[remoteChainSelectorToRemove].remotePools.values();\\n      for (uint256 j = 0; j < remotePools.length; ++j) {\\n        s_remoteChainConfigs[remoteChainSelectorToRemove].remotePools.remove(remotePools[j]);\\n      }\\n\\n      delete s_remoteChainConfigs[remoteChainSelectorToRemove];\\n\\n      emit ChainRemoved(remoteChainSelectorToRemove);\\n    }\\n\\n    for (uint256 i = 0; i < chainsToAdd.length; ++i) {\\n      ChainUpdate memory newChain = chainsToAdd[i];\\n      RateLimiter._validateTokenBucketConfig(newChain.outboundRateLimiterConfig, false);\\n      RateLimiter._validateTokenBucketConfig(newChain.inboundRateLimiterConfig, false);\\n\\n      if (newChain.remoteTokenAddress.length == 0) {\\n        revert ZeroAddressNotAllowed();\\n      }\\n\\n      // If the chain already exists, revert\\n      if (!s_remoteChainSelectors.add(newChain.remoteChainSelector)) {\\n        revert ChainAlreadyExists(newChain.remoteChainSelector);\\n      }\\n\\n      RemoteChainConfig storage remoteChainConfig = s_remoteChainConfigs[newChain.remoteChainSelector];\\n\\n      remoteChainConfig.outboundRateLimiterConfig = RateLimiter.TokenBucket({\\n        rate: newChain.outboundRateLimiterConfig.rate,\\n        capacity: newChain.outboundRateLimiterConfig.capacity,\\n        tokens: newChain.outboundRateLimiterConfig.capacity,\\n        lastUpdated: uint32(block.timestamp),\\n        isEnabled: newChain.outboundRateLimiterConfig.isEnabled\\n      });\\n      remoteChainConfig.inboundRateLimiterConfig = RateLimiter.TokenBucket({\\n        rate: newChain.inboundRateLimiterConfig.rate,\\n        capacity: newChain.inboundRateLimiterConfig.capacity,\\n        tokens: newChain.inboundRateLimiterConfig.capacity,\\n        lastUpdated: uint32(block.timestamp),\\n        isEnabled: newChain.inboundRateLimiterConfig.isEnabled\\n      });\\n      remoteChainConfig.remoteTokenAddress = newChain.remoteTokenAddress;\\n\\n      for (uint256 j = 0; j < newChain.remotePoolAddresses.length; ++j) {\\n        _setRemotePool(newChain.remoteChainSelector, newChain.remotePoolAddresses[j]);\\n      }\\n\\n      emit ChainAdded(\\n        newChain.remoteChainSelector,\\n        newChain.remoteTokenAddress,\\n        newChain.outboundRateLimiterConfig,\\n        newChain.inboundRateLimiterConfig\\n      );\\n    }\\n  }\\n\\n  /// @notice Adds a pool address to the allowed remote token pools for a particular chain.\\n  /// @param remoteChainSelector The remote chain selector for which the remote pool address is being added.\\n  /// @param remotePoolAddress The address of the new remote pool.\\n  function _setRemotePool(uint64 remoteChainSelector, bytes memory remotePoolAddress) internal {\\n    if (remotePoolAddress.length == 0) {\\n      revert ZeroAddressNotAllowed();\\n    }\\n\\n    bytes32 poolHash = keccak256(remotePoolAddress);\\n\\n    // Check if the pool already exists.\\n    if (!s_remoteChainConfigs[remoteChainSelector].remotePools.add(poolHash)) {\\n      revert PoolAlreadyAdded(remoteChainSelector, remotePoolAddress);\\n    }\\n\\n    // Add the pool to the mapping to be able to un-hash it later.\\n    s_remotePoolAddresses[poolHash] = remotePoolAddress;\\n\\n    emit RemotePoolAdded(remoteChainSelector, remotePoolAddress);\\n  }\\n\\n  // ================================================================\\n  // \\u2502                        Rate limiting                         \\u2502\\n  // ================================================================\\n\\n  /// @dev The inbound rate limits should be slightly higher than the outbound rate limits. This is because many chains\\n  /// finalize blocks in batches. CCIP also commits messages in batches: the commit plugin bundles multiple messages in\\n  /// a single merkle root.\\n  /// Imagine the following scenario.\\n  /// - Chain A has an inbound and outbound rate limit of 100 tokens capacity and 1 token per second refill rate.\\n  /// - Chain B has an inbound and outbound rate limit of 100 tokens capacity and 1 token per second refill rate.\\n  ///\\n  /// At time 0:\\n  /// - Chain A sends 100 tokens to Chain B.\\n  /// At time 5:\\n  /// - Chain A sends 5 tokens to Chain B.\\n  /// At time 6:\\n  /// The epoch that contains blocks [0-5] is finalized.\\n  /// Both transactions will be included in the same merkle root and become executable at the same time. This means\\n  /// the token pool on chain B requires a capacity of 105 to successfully execute both messages at the same time.\\n  /// The exact additional capacity required depends on the refill rate and the size of the source chain epochs and the\\n  /// CCIP round time. For simplicity, a 5-10% buffer should be sufficient in most cases.\\n\\n  /// @notice Sets the rate limiter admin address.\\n  /// @dev Only callable by the owner.\\n  /// @param rateLimitAdmin The new rate limiter admin address.\\n  function setRateLimitAdmin(\\n    address rateLimitAdmin\\n  ) external onlyOwner {\\n    s_rateLimitAdmin = rateLimitAdmin;\\n    emit RateLimitAdminSet(rateLimitAdmin);\\n  }\\n\\n  /// @notice Gets the rate limiter admin address.\\n  function getRateLimitAdmin() external view returns (address) {\\n    return s_rateLimitAdmin;\\n  }\\n\\n  /// @notice Consumes outbound rate limiting capacity in this pool\\n  function _consumeOutboundRateLimit(uint64 remoteChainSelector, uint256 amount) internal {\\n    s_remoteChainConfigs[remoteChainSelector].outboundRateLimiterConfig._consume(amount, address(i_token));\\n  }\\n\\n  /// @notice Consumes inbound rate limiting capacity in this pool\\n  function _consumeInboundRateLimit(uint64 remoteChainSelector, uint256 amount) internal {\\n    s_remoteChainConfigs[remoteChainSelector].inboundRateLimiterConfig._consume(amount, address(i_token));\\n  }\\n\\n  /// @notice Gets the token bucket with its values for the block it was requested at.\\n  /// @return The token bucket.\\n  function getCurrentOutboundRateLimiterState(\\n    uint64 remoteChainSelector\\n  ) external view returns (RateLimiter.TokenBucket memory) {\\n    return s_remoteChainConfigs[remoteChainSelector].outboundRateLimiterConfig._currentTokenBucketState();\\n  }\\n\\n  /// @notice Gets the token bucket with its values for the block it was requested at.\\n  /// @return The token bucket.\\n  function getCurrentInboundRateLimiterState(\\n    uint64 remoteChainSelector\\n  ) external view returns (RateLimiter.TokenBucket memory) {\\n    return s_remoteChainConfigs[remoteChainSelector].inboundRateLimiterConfig._currentTokenBucketState();\\n  }\\n\\n  /// @notice Sets multiple chain rate limiter configs.\\n  /// @param remoteChainSelectors The remote chain selector for which the rate limits apply.\\n  /// @param outboundConfigs The new outbound rate limiter config, meaning the onRamp rate limits for the given chain.\\n  /// @param inboundConfigs The new inbound rate limiter config, meaning the offRamp rate limits for the given chain.\\n  function setChainRateLimiterConfigs(\\n    uint64[] calldata remoteChainSelectors,\\n    RateLimiter.Config[] calldata outboundConfigs,\\n    RateLimiter.Config[] calldata inboundConfigs\\n  ) external {\\n    if (msg.sender != s_rateLimitAdmin && msg.sender != owner()) revert Unauthorized(msg.sender);\\n    if (remoteChainSelectors.length != outboundConfigs.length || remoteChainSelectors.length != inboundConfigs.length) {\\n      revert MismatchedArrayLengths();\\n    }\\n\\n    for (uint256 i = 0; i < remoteChainSelectors.length; ++i) {\\n      _setRateLimitConfig(remoteChainSelectors[i], outboundConfigs[i], inboundConfigs[i]);\\n    }\\n  }\\n\\n  /// @notice Sets the chain rate limiter config.\\n  /// @param remoteChainSelector The remote chain selector for which the rate limits apply.\\n  /// @param outboundConfig The new outbound rate limiter config, meaning the onRamp rate limits for the given chain.\\n  /// @param inboundConfig The new inbound rate limiter config, meaning the offRamp rate limits for the given chain.\\n  function setChainRateLimiterConfig(\\n    uint64 remoteChainSelector,\\n    RateLimiter.Config memory outboundConfig,\\n    RateLimiter.Config memory inboundConfig\\n  ) external {\\n    if (msg.sender != s_rateLimitAdmin && msg.sender != owner()) revert Unauthorized(msg.sender);\\n\\n    _setRateLimitConfig(remoteChainSelector, outboundConfig, inboundConfig);\\n  }\\n\\n  function _setRateLimitConfig(\\n    uint64 remoteChainSelector,\\n    RateLimiter.Config memory outboundConfig,\\n    RateLimiter.Config memory inboundConfig\\n  ) internal {\\n    if (!isSupportedChain(remoteChainSelector)) revert NonExistentChain(remoteChainSelector);\\n    RateLimiter._validateTokenBucketConfig(outboundConfig, false);\\n    s_remoteChainConfigs[remoteChainSelector].outboundRateLimiterConfig._setTokenBucketConfig(outboundConfig);\\n    RateLimiter._validateTokenBucketConfig(inboundConfig, false);\\n    s_remoteChainConfigs[remoteChainSelector].inboundRateLimiterConfig._setTokenBucketConfig(inboundConfig);\\n    emit ChainConfigured(remoteChainSelector, outboundConfig, inboundConfig);\\n  }\\n\\n  // ================================================================\\n  // \\u2502                           Access                             \\u2502\\n  // ================================================================\\n\\n  /// @notice Checks whether remote chain selector is configured on this contract, and if the msg.sender\\n  /// is a permissioned onRamp for the given chain on the Router.\\n  function _onlyOnRamp(\\n    uint64 remoteChainSelector\\n  ) internal view {\\n    if (!isSupportedChain(remoteChainSelector)) revert ChainNotAllowed(remoteChainSelector);\\n    if (!(msg.sender == s_router.getOnRamp(remoteChainSelector))) revert CallerIsNotARampOnRouter(msg.sender);\\n  }\\n\\n  /// @notice Checks whether remote chain selector is configured on this contract, and if the msg.sender\\n  /// is a permissioned offRamp for the given chain on the Router.\\n  function _onlyOffRamp(\\n    uint64 remoteChainSelector\\n  ) internal view {\\n    if (!isSupportedChain(remoteChainSelector)) revert ChainNotAllowed(remoteChainSelector);\\n    if (!s_router.isOffRamp(remoteChainSelector, msg.sender)) revert CallerIsNotARampOnRouter(msg.sender);\\n  }\\n\\n  // ================================================================\\n  // \\u2502                          Allowlist                           \\u2502\\n  // ================================================================\\n\\n  function _checkAllowList(\\n    address sender\\n  ) internal view {\\n    if (i_allowlistEnabled) {\\n      if (!s_allowlist.contains(sender)) {\\n        revert SenderNotAllowed(sender);\\n      }\\n    }\\n  }\\n\\n  /// @notice Gets whether the allowlist functionality is enabled.\\n  /// @return true is enabled, false if not.\\n  function getAllowListEnabled() external view returns (bool) {\\n    return i_allowlistEnabled;\\n  }\\n\\n  /// @notice Gets the allowed addresses.\\n  /// @return The allowed addresses.\\n  function getAllowList() external view returns (address[] memory) {\\n    return s_allowlist.values();\\n  }\\n\\n  /// @notice Apply updates to the allow list.\\n  /// @param removes The addresses to be removed.\\n  /// @param adds The addresses to be added.\\n  function applyAllowListUpdates(address[] calldata removes, address[] calldata adds) external onlyOwner {\\n    _applyAllowListUpdates(removes, adds);\\n  }\\n\\n  /// @notice Internal version of applyAllowListUpdates to allow for reuse in the constructor.\\n  function _applyAllowListUpdates(address[] memory removes, address[] memory adds) internal {\\n    if (!i_allowlistEnabled) revert AllowListNotEnabled();\\n\\n    for (uint256 i = 0; i < removes.length; ++i) {\\n      address toRemove = removes[i];\\n      if (s_allowlist.remove(toRemove)) {\\n        emit AllowListRemove(toRemove);\\n      }\\n    }\\n    for (uint256 i = 0; i < adds.length; ++i) {\\n      address toAdd = adds[i];\\n      if (toAdd == address(0)) {\\n        continue;\\n      }\\n      if (s_allowlist.add(toAdd)) {\\n        emit AllowListAdd(toAdd);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x40d1bd015250743b42d6460c2ce2200f3a45a6e2baaa11e94d4c84923152d6e1\",\"license\":\"BUSL-1.1\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/tokenAdminRegistry/RegistryModuleOwnerCustom.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.24;\\n\\nimport {ITypeAndVersion} from \\\"../../shared/interfaces/ITypeAndVersion.sol\\\";\\nimport {IGetCCIPAdmin} from \\\"../interfaces/IGetCCIPAdmin.sol\\\";\\nimport {IOwner} from \\\"../interfaces/IOwner.sol\\\";\\nimport {ITokenAdminRegistry} from \\\"../interfaces/ITokenAdminRegistry.sol\\\";\\n\\nimport {AccessControl} from \\\"../../vendor/openzeppelin-solidity/v5.0.2/contracts/access/AccessControl.sol\\\";\\n\\ncontract RegistryModuleOwnerCustom is ITypeAndVersion {\\n  error CanOnlySelfRegister(address admin, address token);\\n  error RequiredRoleNotFound(address msgSender, bytes32 role, address token);\\n  error AddressZero();\\n\\n  event AdministratorRegistered(address indexed token, address indexed administrator);\\n\\n  string public constant override typeAndVersion = \\\"RegistryModuleOwnerCustom 1.6.0\\\";\\n\\n  // The TokenAdminRegistry contract\\n  ITokenAdminRegistry internal immutable i_tokenAdminRegistry;\\n\\n  constructor(\\n    address tokenAdminRegistry\\n  ) {\\n    if (tokenAdminRegistry == address(0)) {\\n      revert AddressZero();\\n    }\\n    i_tokenAdminRegistry = ITokenAdminRegistry(tokenAdminRegistry);\\n  }\\n\\n  /// @notice Registers the admin of the token using the `getCCIPAdmin` method.\\n  /// @param token The token to register the admin for.\\n  /// @dev The caller must be the admin returned by the `getCCIPAdmin` method.\\n  function registerAdminViaGetCCIPAdmin(\\n    address token\\n  ) external {\\n    _registerAdmin(token, IGetCCIPAdmin(token).getCCIPAdmin());\\n  }\\n\\n  /// @notice Registers the admin of the token using the `owner` method.\\n  /// @param token The token to register the admin for.\\n  /// @dev The caller must be the admin returned by the `owner` method.\\n  function registerAdminViaOwner(\\n    address token\\n  ) external {\\n    _registerAdmin(token, IOwner(token).owner());\\n  }\\n\\n  /// @notice Registers the admin of the token using OZ's AccessControl DEFAULT_ADMIN_ROLE.\\n  /// @param token The token to register the admin for.\\n  /// @dev The caller must have the DEFAULT_ADMIN_ROLE as defined by the contract itself.\\n  function registerAccessControlDefaultAdmin(\\n    address token\\n  ) external {\\n    bytes32 defaultAdminRole = AccessControl(token).DEFAULT_ADMIN_ROLE();\\n    if (!AccessControl(token).hasRole(defaultAdminRole, msg.sender)) {\\n      revert RequiredRoleNotFound(msg.sender, defaultAdminRole, token);\\n    }\\n\\n    _registerAdmin(token, msg.sender);\\n  }\\n\\n  /// @notice Registers the admin of the token to msg.sender given that the\\n  /// admin is equal to msg.sender.\\n  /// @param token The token to register the admin for.\\n  /// @param admin The caller must be the admin.\\n  function _registerAdmin(address token, address admin) internal {\\n    if (admin != msg.sender) {\\n      revert CanOnlySelfRegister(admin, token);\\n    }\\n\\n    i_tokenAdminRegistry.proposeAdministrator(token, admin);\\n\\n    emit AdministratorRegistered(token, admin);\\n  }\\n}\\n\",\"keccak256\":\"0x8d6c257b30168f951bbdf3dcc218142886aa4e33b09e2bd384c46e7cf9d5d9c8\",\"license\":\"BUSL-1.1\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/tokenAdminRegistry/TokenAdminRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.24;\\n\\nimport {ITypeAndVersion} from \\\"../../shared/interfaces/ITypeAndVersion.sol\\\";\\nimport {IPoolV1} from \\\"../interfaces/IPool.sol\\\";\\nimport {ITokenAdminRegistry} from \\\"../interfaces/ITokenAdminRegistry.sol\\\";\\n\\nimport {OwnerIsCreator} from \\\"../../shared/access/OwnerIsCreator.sol\\\";\\n\\nimport {EnumerableSet} from \\\"../../vendor/openzeppelin-solidity/v5.0.2/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/// @notice This contract stores the token pool configuration for all CCIP enabled tokens. It works\\n/// on a self-serve basis, where tokens can be registered without intervention from the CCIP owner.\\n/// @dev This contract is not considered upgradable, as it is a customer facing contract that will store\\n/// significant amounts of data.\\ncontract TokenAdminRegistry is ITokenAdminRegistry, ITypeAndVersion, OwnerIsCreator {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  error OnlyRegistryModuleOrOwner(address sender);\\n  error OnlyAdministrator(address sender, address token);\\n  error OnlyPendingAdministrator(address sender, address token);\\n  error AlreadyRegistered(address token);\\n  error ZeroAddress();\\n  error InvalidTokenPoolToken(address token);\\n\\n  event PoolSet(address indexed token, address indexed previousPool, address indexed newPool);\\n  event AdministratorTransferRequested(address indexed token, address indexed currentAdmin, address indexed newAdmin);\\n  event AdministratorTransferred(address indexed token, address indexed newAdmin);\\n  event RegistryModuleAdded(address module);\\n  event RegistryModuleRemoved(address indexed module);\\n\\n  // The struct is packed in a way that optimizes the attributes that are accessed together.\\n  // solhint-disable-next-line gas-struct-packing\\n  struct TokenConfig {\\n    address administrator; // the current administrator of the token\\n    address pendingAdministrator; // the address that is pending to become the new administrator\\n    address tokenPool; // the token pool for this token. Can be address(0) if not deployed or not configured.\\n  }\\n\\n  string public constant override typeAndVersion = \\\"TokenAdminRegistry 1.5.0\\\";\\n\\n  // Mapping of token address to token configuration\\n  mapping(address token => TokenConfig) internal s_tokenConfig;\\n\\n  // All tokens that have been configured\\n  EnumerableSet.AddressSet internal s_tokens;\\n\\n  // Registry modules are allowed to register administrators for tokens\\n  EnumerableSet.AddressSet internal s_registryModules;\\n\\n  /// @notice Returns all pools for the given tokens.\\n  /// @dev Will return address(0) for tokens that do not have a pool.\\n  function getPools(\\n    address[] calldata tokens\\n  ) external view returns (address[] memory) {\\n    address[] memory pools = new address[](tokens.length);\\n    for (uint256 i = 0; i < tokens.length; ++i) {\\n      pools[i] = s_tokenConfig[tokens[i]].tokenPool;\\n    }\\n    return pools;\\n  }\\n\\n  /// @inheritdoc ITokenAdminRegistry\\n  function getPool(\\n    address token\\n  ) external view returns (address) {\\n    return s_tokenConfig[token].tokenPool;\\n  }\\n\\n  /// @notice Returns the configuration for a token.\\n  /// @param token The token to get the configuration for.\\n  /// @return config The configuration for the token.\\n  function getTokenConfig(\\n    address token\\n  ) external view returns (TokenConfig memory) {\\n    return s_tokenConfig[token];\\n  }\\n\\n  /// @notice Returns a list of tokens that are configured in the token admin registry.\\n  /// @param startIndex Starting index in list, can be 0 if you want to start from the beginning.\\n  /// @param maxCount Maximum number of tokens to retrieve. Since the list can be large,\\n  /// it is recommended to use a paging mechanism to retrieve all tokens. If querying for very\\n  /// large lists, RPCs can time out. If you want all tokens, use type(uint64).max.\\n  /// @return tokens List of configured tokens.\\n  /// @dev The function is paginated to avoid RPC timeouts.\\n  /// @dev The ordering is guaranteed to remain the same as it is not possible to remove tokens\\n  /// from s_tokens.\\n  function getAllConfiguredTokens(uint64 startIndex, uint64 maxCount) external view returns (address[] memory tokens) {\\n    uint256 numberOfTokens = s_tokens.length();\\n    if (startIndex >= numberOfTokens) {\\n      return tokens;\\n    }\\n    uint256 count = maxCount;\\n    if (count + startIndex > numberOfTokens) {\\n      count = numberOfTokens - startIndex;\\n    }\\n    tokens = new address[](count);\\n    for (uint256 i = 0; i < count; ++i) {\\n      tokens[i] = s_tokens.at(startIndex + i);\\n    }\\n\\n    return tokens;\\n  }\\n\\n  // ================================================================\\n  // \\u2502                  Administrator functions                     \\u2502\\n  // ================================================================\\n\\n  /// @notice Sets the pool for a token. Setting the pool to address(0) effectively delists the token\\n  /// from CCIP. Setting the pool to any other address enables the token on CCIP.\\n  /// @param localToken The token to set the pool for.\\n  /// @param pool The pool to set for the token.\\n  function setPool(address localToken, address pool) external onlyTokenAdmin(localToken) {\\n    // The pool has to support the token, but we want to allow removing the pool, so we only check\\n    // if the pool supports the token if it is not address(0).\\n    if (pool != address(0) && !IPoolV1(pool).isSupportedToken(localToken)) {\\n      revert InvalidTokenPoolToken(localToken);\\n    }\\n\\n    TokenConfig storage config = s_tokenConfig[localToken];\\n\\n    address previousPool = config.tokenPool;\\n    config.tokenPool = pool;\\n\\n    if (previousPool != pool) {\\n      emit PoolSet(localToken, previousPool, pool);\\n    }\\n  }\\n\\n  /// @notice Transfers the administrator role for a token to a new address with a 2-step process.\\n  /// @param localToken The token to transfer the administrator role for.\\n  /// @param newAdmin The address to transfer the administrator role to. Can be address(0) to cancel\\n  /// a pending transfer.\\n  /// @dev The new admin must call `acceptAdminRole` to accept the role.\\n  function transferAdminRole(address localToken, address newAdmin) external onlyTokenAdmin(localToken) {\\n    TokenConfig storage config = s_tokenConfig[localToken];\\n    config.pendingAdministrator = newAdmin;\\n\\n    emit AdministratorTransferRequested(localToken, msg.sender, newAdmin);\\n  }\\n\\n  /// @notice Accepts the administrator role for a token.\\n  /// @param localToken The token to accept the administrator role for.\\n  /// @dev This function can only be called by the pending administrator.\\n  function acceptAdminRole(\\n    address localToken\\n  ) external {\\n    TokenConfig storage config = s_tokenConfig[localToken];\\n    if (config.pendingAdministrator != msg.sender) {\\n      revert OnlyPendingAdministrator(msg.sender, localToken);\\n    }\\n\\n    config.administrator = msg.sender;\\n    config.pendingAdministrator = address(0);\\n\\n    emit AdministratorTransferred(localToken, msg.sender);\\n  }\\n\\n  // ================================================================\\n  // \\u2502                    Administrator config                      \\u2502\\n  // ================================================================\\n\\n  /// @notice Public getter to check for permissions of an administrator\\n  function isAdministrator(address localToken, address administrator) external view returns (bool) {\\n    return s_tokenConfig[localToken].administrator == administrator;\\n  }\\n\\n  /// @inheritdoc ITokenAdminRegistry\\n  /// @dev Can only be called by a registry module.\\n  function proposeAdministrator(address localToken, address administrator) external {\\n    if (!isRegistryModule(msg.sender) && msg.sender != owner()) {\\n      revert OnlyRegistryModuleOrOwner(msg.sender);\\n    }\\n    if (administrator == address(0)) {\\n      revert ZeroAddress();\\n    }\\n    TokenConfig storage config = s_tokenConfig[localToken];\\n\\n    if (config.administrator != address(0)) {\\n      revert AlreadyRegistered(localToken);\\n    }\\n\\n    config.pendingAdministrator = administrator;\\n\\n    // We don't care if it's already in the set, as it's a no-op.\\n    s_tokens.add(localToken);\\n\\n    emit AdministratorTransferRequested(localToken, address(0), administrator);\\n  }\\n\\n  // ================================================================\\n  // \\u2502                      Registry Modules                        \\u2502\\n  // ================================================================\\n\\n  /// @notice Checks if an address is a registry module.\\n  /// @param module The address to check.\\n  /// @return True if the address is a registry module, false otherwise.\\n  function isRegistryModule(\\n    address module\\n  ) public view returns (bool) {\\n    return s_registryModules.contains(module);\\n  }\\n\\n  /// @notice Adds a new registry module to the list of allowed modules.\\n  /// @param module The module to add.\\n  function addRegistryModule(\\n    address module\\n  ) external onlyOwner {\\n    if (s_registryModules.add(module)) {\\n      emit RegistryModuleAdded(module);\\n    }\\n  }\\n\\n  /// @notice Removes a registry module from the list of allowed modules.\\n  /// @param module The module to remove.\\n  function removeRegistryModule(\\n    address module\\n  ) external onlyOwner {\\n    if (s_registryModules.remove(module)) {\\n      emit RegistryModuleRemoved(module);\\n    }\\n  }\\n\\n  // ================================================================\\n  // \\u2502                           Access                             \\u2502\\n  // ================================================================\\n\\n  /// @notice Checks if an address is the administrator of the given token.\\n  modifier onlyTokenAdmin(\\n    address token\\n  ) {\\n    if (s_tokenConfig[token].administrator != msg.sender) {\\n      revert OnlyAdministrator(msg.sender, token);\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xe6fba137fe2bf74d803c5e904fa1ec9e522ca501b9cb2a50fbf80f249aa9dd53\",\"license\":\"BUSL-1.1\"},\"@chainlink/contracts-ccip/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/shared/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @notice A minimal contract that implements 2-step ownership transfer and nothing more. It's made to be minimal\\n/// to reduce the impact of the bytecode size on any contract that inherits from it.\\ncontract Ownable2Step is IOwnable {\\n  /// @notice The pending owner is the address to which ownership may be transferred.\\n  address private s_pendingOwner;\\n  /// @notice The owner is the current owner of the contract.\\n  /// @dev The owner is the second storage variable so any implementing contract could pack other state with it\\n  /// instead of the much less used s_pendingOwner.\\n  address private s_owner;\\n\\n  error OwnerCannotBeZero();\\n  error MustBeProposedOwner();\\n  error CannotTransferToSelf();\\n  error OnlyCallableByOwner();\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    if (newOwner == address(0)) {\\n      revert OwnerCannotBeZero();\\n    }\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address. The new owner needs to call\\n  /// `acceptOwnership` to accept the transfer before any permissions are changed.\\n  /// @param to The address to which ownership will be transferred.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  /// @param to The address to which ownership will be transferred.\\n  function _transferOwnership(address to) private {\\n    if (to == msg.sender) {\\n      revert CannotTransferToSelf();\\n    }\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    if (msg.sender != s_pendingOwner) {\\n      revert MustBeProposedOwner();\\n    }\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    if (msg.sender != s_owner) {\\n      revert OnlyCallableByOwner();\\n    }\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xb1fdd309eb568ed0f36e854a4a360ecf7826b9ea8f2876797fd518b59dc66c67\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/shared/access/Ownable2StepMsgSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {Ownable2Step} from \\\"./Ownable2Step.sol\\\";\\n\\n/// @notice Sets the msg.sender to be the owner of the contract and does not set a pending owner.\\ncontract Ownable2StepMsgSender is Ownable2Step {\\n  constructor() Ownable2Step(msg.sender, address(0)) {}\\n}\\n\",\"keccak256\":\"0x1aeb8111eab08d37341b874d4f1210e81bdb07761d0bf14699a3084c6677fe1b\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/shared/access/OwnerIsCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwner} from \\\"./ConfirmedOwner.sol\\\";\\n\\n/// @title The OwnerIsCreator contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract OwnerIsCreator is ConfirmedOwner {\\n  constructor() ConfirmedOwner(msg.sender) {}\\n}\\n\",\"keccak256\":\"0x895af02d6a3df2930bbb6ec1f2d68118b492ca6e710ba0c34fcb6b574a0906aa\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/shared/interfaces/ITypeAndVersion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITypeAndVersion {\\n  function typeAndVersion() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0xf5827cb463c01d055021684d04f9186391c2d9ac850e0d0819f76140e4fc84ed\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/shared/token/ERC20/IBurnMintERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../../../vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBurnMintERC20 is IERC20 {\\n  /// @notice Mints new tokens for a given address.\\n  /// @param account The address to mint the new tokens to.\\n  /// @param amount The number of tokens to be minted.\\n  /// @dev this function increases the total supply.\\n  function mint(address account, uint256 amount) external;\\n\\n  /// @notice Burns tokens from the sender.\\n  /// @param amount The number of tokens to be burned.\\n  /// @dev this function decreases the total supply.\\n  function burn(uint256 amount) external;\\n\\n  /// @notice Burns tokens from a given address..\\n  /// @param account The address to burn tokens from.\\n  /// @param amount The number of tokens to be burned.\\n  /// @dev this function decreases the total supply.\\n  function burn(address account, uint256 amount) external;\\n\\n  /// @notice Burns tokens from a given address..\\n  /// @param account The address to burn tokens from.\\n  /// @param amount The number of tokens to be burned.\\n  /// @dev this function decreases the total supply.\\n  function burnFrom(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xbb8f9a00d41bbc516c691a4685c07c291b978fff98d133a50bb4773a6fc2b19f\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x527e858729af8197f6c8f99554d32bfc4f5a72b15975489c94809363d7ae522f\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x057a2ba732c7946ef55d676e5a7aa0119443cf67c75f404838065a31ddd4877c\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/bridge/CCIPAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IGovernance} from \\\"../equity/IGovernance.sol\\\";\\nimport {ITokenPool} from \\\"./ITokenPool.sol\\\";\\nimport {TokenAdminRegistry} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/tokenAdminRegistry/TokenAdminRegistry.sol\\\";\\nimport {RateLimiter} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/RateLimiter.sol\\\";\\nimport {IBasicFrankencoin} from \\\"../stablecoin/IBasicFrankencoin.sol\\\";\\nimport {RegistryModuleOwnerCustom} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/tokenAdminRegistry/RegistryModuleOwnerCustom.sol\\\";\\n\\n/**\\n * Since there is no centralized administrator, a smart contract relying on the decentralized governance process takes over\\n * the admin role. This contract contains all functions to configure the CCIP bridge based on the typical Frankencoin\\n * governance process.\\n * \\n * For the token pool to function properly, it must be equipped with minting power and registered as a minting module.\\n * \\n * For example, any qualified users can at any time adjust the rate limit of the bridge. But the other, less time-critical\\n * functions are exercised in two steps, a proposal and a delayed actual execution if no veto has been cast in the meantime.\\n */\\ncontract CCIPAdmin {\\n    struct RemotePoolUpdate {\\n        bool add; // true if adding, false if removing\\n        uint64 chain;\\n        bytes poolAddress;\\n    }\\n\\n    uint64 public constant DAY = 24 * 60 * 60;\\n\\n    IGovernance public immutable GOVERNANCE;\\n    TokenAdminRegistry public immutable TOKEN_ADMIN_REGISTRY;\\n    address public immutable ZCHF;\\n\\n    ITokenPool public tokenPool;\\n    mapping(bytes32 hash => uint64 deadline) public proposals;\\n\\n    error TooEarly(uint64 deadline);\\n    error UnknownProposal(bytes32 hash);\\n    error ProposalAlreadyMade(bytes32 hash);\\n    error AlreadyRegistered();\\n    error TokenPoolNotSet();\\n\\n    event TokenPoolSet(address indexed tokenPool);\\n\\n    event ProposalMade(bytes32 hash, uint64 deadline);\\n    event ProposalDenied(bytes32 hash);\\n    event ProposalEnacted(bytes32 hash);\\n\\n    event RemotePoolUpdateProposed(bytes32 hash, address indexed proposer, RemotePoolUpdate update);\\n    event RemoveChainProposed(bytes32 hash, address indexed proposer, uint64 chain);\\n    event AddChainProposed(bytes32 hash, address indexed proposer, ITokenPool.ChainUpdate update);\\n    event AdminTransferProposed(bytes32 hash, address indexed proposer, address newAdmin);\\n\\n    event RemotePoolAdded(uint64 indexed chain, bytes indexed poolAddress);\\n    event RemotePoolRemoved(uint64 indexed chain, bytes indexed poolAddress);\\n    event ChainRemoved(uint64 id);\\n    event ChainAdded(ITokenPool.ChainUpdate config);\\n    event AdminTransferred(address newAdmin);\\n    event RateLimit(uint64 remoteChain, RateLimiter.Config inboundConfigs, RateLimiter.Config outboundConfig);\\n\\n    modifier onlyQualified(address[] calldata helpers) {\\n        GOVERNANCE.checkQualified(msg.sender, helpers);\\n        _;\\n    }\\n\\n    modifier tokenPoolSet() {\\n        if (address(tokenPool) == address(0)) revert TokenPoolNotSet();\\n        _;\\n    }\\n\\n    constructor(TokenAdminRegistry tokenAdminRegistry, IBasicFrankencoin zchf) {\\n        GOVERNANCE = zchf.reserve();\\n        TOKEN_ADMIN_REGISTRY = tokenAdminRegistry;\\n        ZCHF = address(zchf);\\n    }\\n    \\n    /// @notice Registers the token in the CCIP system\\n    /// @dev Can only be called while the token admin is not set\\n    /// @param registry The registry to register the token with\\n    /// @param _tokenPool The token pool to administer\\n    /// @param chainsToAdd The chains to add to the token pool\\n    function registerToken(RegistryModuleOwnerCustom registry, ITokenPool _tokenPool, ITokenPool.ChainUpdate[] calldata chainsToAdd) external {\\n        // This prevents from reregistering the inital ccipAdmin contract after it got superseded by a new version\\n        if (TOKEN_ADMIN_REGISTRY.getTokenConfig(ZCHF).administrator != address(0)) {\\n            revert AlreadyRegistered();\\n        }\\n        // registerAdminViaGetCCIPAdmin() calls proposeAdministrator() in the background which prevents the existing admin from being set as pending\\n        registry.registerAdminViaGetCCIPAdmin(ZCHF);\\n        acceptAdmin(_tokenPool, chainsToAdd);\\n    }\\n    \\n    /// @notice Accepts the admin role transfer on the TokenAdminRegistry and sets the token pool\\n    /// @dev Can only be called if this contract is the pending owner for the token.\\n    /// @param _tokenPool The token pool to administer\\n    /// @param chainsToAdd The chains to add to the token pool\\n    function acceptAdmin(ITokenPool _tokenPool, ITokenPool.ChainUpdate[] calldata chainsToAdd) public {\\n        // The token pool can only be reset if this contract is a pending admin again. In this case it could be beneficial to reset the token pool\\n        TOKEN_ADMIN_REGISTRY.acceptAdminRole(ZCHF);\\n        setTokenPool(_tokenPool, chainsToAdd);\\n    }\\n    \\n    /// @notice Proposed a remote pool update\\n    /// @dev The contract only stores the hash. So the data has to be passed in during apply again\\n    /// @param update  The update proposal\\n    /// @param helpers The helpers to get enough votes\\n    function proposeRemotePoolUpdate(RemotePoolUpdate memory update, address[] calldata helpers) external {\\n        bytes32 hash = keccak256(abi.encode(\\\"remotePoolUpdate\\\", update));\\n        propose(hash, 7, helpers);\\n        emit RemotePoolUpdateProposed(hash, msg.sender, update);\\n    }\\n    \\n    /// @notice Applies the update on the TokenPool\\n    /// @dev Requires the token pool to be set\\n    /// @param update RemotePoolUpdate information\\n    function applyRemotePoolUpdate(RemotePoolUpdate memory update) external tokenPoolSet {\\n        enact(keccak256(abi.encode(\\\"remotePoolUpdate\\\", update)));\\n        if (update.add) {\\n            tokenPool.addRemotePool(update.chain, update.poolAddress);\\n            emit RemotePoolAdded(update.chain, update.poolAddress);\\n        } else {\\n            tokenPool.removeRemotePool(update.chain, update.poolAddress);\\n            emit RemotePoolRemoved(update.chain, update.poolAddress);\\n        }\\n    }\\n    \\n    /// @notice Sets the rate limits for the given chain. Any qualified voter can apply rate limits with immediate effect.\\n    ///         Rate limits can only do limited harm, so it is acceptable to be very permissive. At the same time, rate limits are typically\\n    ///         applied during emergencies, e.g. when a chain has been hacked. Therefore, it is desirable to ensure that\\n    ///         they can be applied quickly.\\n    /// @dev Requires the token pool to be set\\n    /// @param chain The chain to set the rate limits for\\n    /// @param inbound The inbound rate limits\\n    /// @param outbound The outbound rate limits\\n    /// @param helpers Array of helper addresses for qualification check\\n    function applyRateLimit(uint64 chain, RateLimiter.Config calldata inbound, RateLimiter.Config calldata outbound, address[] calldata helpers) external onlyQualified(helpers) tokenPoolSet {\\n        tokenPool.setChainRateLimiterConfig(chain, inbound, outbound);\\n        emit RateLimit(chain, inbound, outbound);\\n    }\\n    \\n    /// @notice Propose to add or remove remote chains\\n    /// @dev The contract only stores the hash. So the data has to be passed in during apply again\\n    /// @param chainId The chain to remove\\n    /// @param helpers Array of helper addresses for qualification check\\n    function proposeRemoveChain(uint64 chainId, address[] calldata helpers) external {\\n        bytes32 hash = keccak256(abi.encode(\\\"removeChain\\\", chainId));\\n        propose(hash, 7, helpers);\\n        emit RemoveChainProposed(hash, msg.sender, chainId);\\n    }\\n    \\n    /// @notice Applies the remove chain proposal\\n    /// @dev Requires the token pool to be set\\n    /// @param chainId The chain to remove\\n    function applyRemoveChain(uint64 chainId) external tokenPoolSet {\\n        enact(keccak256(abi.encode(\\\"removeChain\\\", chainId)));\\n        uint64[] memory chainsToRemove = new uint64[](1);\\n        chainsToRemove[0] = chainId;\\n        ITokenPool.ChainUpdate[] memory chainsToAdd = new ITokenPool.ChainUpdate[](0);\\n        tokenPool.applyChainUpdates(chainsToRemove, chainsToAdd);\\n        emit ChainRemoved(chainId);\\n    }\\n    \\n    /// @notice Propose to add a remote chains\\n    /// @dev The contract only stores the hash. So the data has to be passed in during apply again\\n    /// @param config The chain configuration\\n    /// @param helpers Array of helper addresses for qualification check\\n    function proposeAddChain(ITokenPool.ChainUpdate calldata config, address[] calldata helpers) external {\\n        bytes32 hash = keccak256(abi.encode(\\\"addChain\\\", config));\\n        propose(hash, 7, helpers);\\n        emit AddChainProposed(hash, msg.sender, config);\\n    }\\n    \\n    /// @notice Applies the remote chain update\\n    /// @dev Requires the token pool to be set\\n    /// @param config RemoteChainUpdate information\\n    function applyAddChain(ITokenPool.ChainUpdate memory config) external tokenPoolSet {\\n        enact(keccak256(abi.encode(\\\"addChain\\\", config)));\\n        uint64[] memory chainsToRemove = new uint64[](0);\\n        ITokenPool.ChainUpdate[] memory chainsToAdd = new ITokenPool.ChainUpdate[](1);\\n        chainsToAdd[0] = config;\\n        tokenPool.applyChainUpdates(chainsToRemove, chainsToAdd);\\n        emit ChainAdded(config);\\n    }\\n    \\n    /// @notice Proposed a new admin for the TokenPool and Admin on the Token registry\\n    /// @param newAdmin  The address of the new admin\\n    /// @param helpers Array of helper addresses for qualification check\\n    function proposeAdminTransfer(address newAdmin, address[] calldata helpers) external {\\n        bytes32 hash = keccak256(abi.encode(\\\"adminTransfer\\\", newAdmin));\\n        propose(hash, 21, helpers);\\n        emit AdminTransferProposed(hash, msg.sender, newAdmin);\\n    }\\n    \\n    /// @notice Applies the admin transfer\\n    /// @dev Transfers admin on the TokenPool and ownership on the ZCHF token on the TokenAdminRegistry\\n    /// @param newAdmin The address of the new admin\\n    function applyAdminTransfer(address newAdmin) external {\\n        enact(keccak256(abi.encode(\\\"adminTransfer\\\", newAdmin)));\\n        TOKEN_ADMIN_REGISTRY.transferAdminRole(ZCHF, newAdmin);\\n        if (address(tokenPool) != address(0)) tokenPool.transferOwnership(newAdmin);\\n        emit AdminTransferred(newAdmin);\\n    }\\n    \\n    /// @notice Denies and removes a pending proposal\\n    /// @dev Only qualified voters can deny proposals\\n    /// @param hash The hash of the proposal to deny\\n    /// @param helpers Array of helper addresses for qualification check\\n    function deny(bytes32 hash, address[] calldata helpers) external onlyQualified(helpers) {\\n        if (proposals[hash] == 0) revert UnknownProposal(hash);\\n        delete proposals[hash];\\n        emit ProposalDenied(hash);\\n    }\\n    \\n    /// @notice Enacts a pending proposal\\n    /// @param hash The hash of the proposal to enact\\n    function enact(bytes32 hash) internal {\\n        uint64 deadline = proposals[hash];\\n        if (deadline == 0) revert UnknownProposal(hash);\\n        if (deadline > block.timestamp) revert TooEarly(deadline);\\n        delete proposals[hash];\\n        emit ProposalEnacted(hash);\\n    }\\n    \\n    /// @notice Creates a new proposal with a delay period\\n    /// @dev Only qualified voters can create proposals\\n    /// @param hash The hash of the proposal data\\n    /// @param delayInDays Number of days to delay the proposal execution\\n    /// @param helpers Array of helper addresses for qualification check\\n    function propose(bytes32 hash, uint64 delayInDays, address[] calldata helpers) internal onlyQualified(helpers) {\\n        if (proposals[hash] > 0) revert ProposalAlreadyMade(hash);\\n        proposals[hash] = uint64(block.timestamp) + delayInDays * DAY;\\n        emit ProposalMade(hash, proposals[hash]);\\n    }\\n    \\n    /// @notice Sets the token pool to administer, sets it in the TokenAdminRegistry, accept ownership, and applies the chain updates\\n    /// @dev The token pool needs to have this contract as pending owner\\n    /// @param _tokenPool The token pool to set\\n    /// @param chainsToAdd The chains to add to the token pool\\n    function setTokenPool(ITokenPool _tokenPool, ITokenPool.ChainUpdate[] calldata chainsToAdd) internal {\\n        TOKEN_ADMIN_REGISTRY.setPool(ZCHF, address(_tokenPool));\\n        _tokenPool.acceptOwnership();\\n\\n        if (chainsToAdd.length > 0) {\\n            _tokenPool.applyChainUpdates(new uint64[](0), chainsToAdd);\\n        }\\n\\n        tokenPool = _tokenPool;\\n        emit TokenPoolSet(address(_tokenPool));\\n    }\\n}\\n\",\"keccak256\":\"0xe517e4544553e0562603caa44c26e5c708e27ee43789e13622367be9035c5e82\",\"license\":\"MIT\"},\"contracts/bridge/CCIPSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\nimport {IRouterClient} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\nimport {IERC20} from \\\"../erc20/IERC20.sol\\\";\\n\\nabstract contract CCIPSender {\\n    IRouterClient public immutable ROUTER;\\n    address public immutable LINK;\\n\\n    error InsufficientFeeTokens(address token, uint256 fee);\\n    error InsufficientFeeTokenAllowance(address token, uint256 fee);\\n\\n    constructor(IRouterClient router, address link) {\\n        ROUTER = router;\\n        LINK = link;\\n    }\\n\\n    /// @notice Encodes the receiver correctly\\n    /// @param target The target address\\n    /// @return The encoded receiver\\n    function _toReceiver(address target) internal pure returns (bytes memory) {\\n        return abi.encode(target);\\n    }\\n\\n    /// @notice Builds the message struct\\n    /// @dev Guesses the fee token based on msg.value\\n    /// @param receiver The receiver\\n    /// @param payload The payload\\n    /// @param tokenAmounts The token amounts\\n    /// @param extraArgs The extra args such as gas limit and out-of-order execution\\n    /// @return The message struct\\n    function _constructMessage(bytes memory receiver, bytes memory payload, Client.EVMTokenAmount[] memory tokenAmounts, bytes memory extraArgs) internal view returns (Client.EVM2AnyMessage memory) {\\n        return Client.EVM2AnyMessage(receiver, payload, tokenAmounts, _guessFeeToken(), extraArgs);\\n    }\\n\\n    /// @notice Builds the message struct\\n    /// @param receiver The receiver\\n    /// @param payload The payload\\n    /// @param tokenAmounts The token amounts\\n    /// @param nativeToken Whether to use native token or LINK\\n    /// @param extraArgs The extra args such as gas limit and out-of-order execution\\n    /// @return The message struct\\n    function _constructMessage(bytes memory receiver, bytes memory payload, Client.EVMTokenAmount[] memory tokenAmounts, bool nativeToken,  bytes memory extraArgs) internal view returns (Client.EVM2AnyMessage memory) {\\n        return Client.EVM2AnyMessage(receiver, payload, tokenAmounts, nativeToken ? address(0) : LINK, extraArgs);\\n    }\\n\\n    /// @notice Gets the fee from the router for the given message and chain combination\\n    /// @param chain The chain\\n    /// @param message The message\\n    /// @return The fee\\n    function _calculateFee(uint64 chain, Client.EVM2AnyMessage memory message) internal view returns (uint256) {\\n        return ROUTER.getFee(chain, message);\\n    }\\n\\n    /// @notice Sends the message to the router and handles fee payment\\n    /// @dev External call to msg.sender if fees are paid in native token. This function can lead to a potential reentrancy.\\n    /// @param chain The chain\\n    /// @param message The message\\n    /// @return The message id and fee\\n    function _send(uint64 chain, Client.EVM2AnyMessage memory message) internal returns (bytes32, uint256) {\\n        uint256 fee = _calculateFee(chain, message);\\n        bytes32 messageId;\\n        if (message.feeToken != address(0)) {\\n            // We trust the feeToken to be not malicious.\\n            // ROUTER.getFee() verifies that the feeToken is supported by CCIP and thus vetted.\\n            if (IERC20(message.feeToken).balanceOf(msg.sender) < fee) revert InsufficientFeeTokens(message.feeToken, fee);\\n            if (IERC20(message.feeToken).allowance(msg.sender, address(this)) < fee) revert InsufficientFeeTokenAllowance(message.feeToken, fee);\\n            IERC20(message.feeToken).transferFrom(msg.sender, address(this), fee);\\n            IERC20(message.feeToken).approve(address(ROUTER), fee);\\n            messageId = ROUTER.ccipSend(chain, message);\\n\\n            // Send back any leftover fee tokens\\n            uint256 leftover = IERC20(message.feeToken).balanceOf(address(this));\\n            if (leftover > 0) IERC20(message.feeToken).transfer(msg.sender, leftover);\\n        } else {\\n            if (msg.value < fee) revert InsufficientFeeTokens(message.feeToken, fee);\\n            messageId = ROUTER.ccipSend{value: fee}(chain, message);\\n            // return overpaid fee to sender. We don't care about the success of this call.\\n            if(msg.value - fee > 0) payable(msg.sender).call{value: msg.value - fee}(\\\"\\\");\\n        }\\n        return (messageId, fee);\\n    }\\n\\n    /// @notice Guesses the fee token based on msg.value\\n    /// @return The fee token\\n    function _guessFeeToken() internal view returns (address) {\\n        return (msg.value > 0) ? address(0) : LINK;\\n    }\\n}\\n\",\"keccak256\":\"0x4f447901d8b83476766f00948463eff5651fee360823b4d245416df5fde6aa96\",\"license\":\"MIT\"},\"contracts/bridge/ITokenPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {RateLimiter} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/RateLimiter.sol\\\";\\n\\ninterface ITokenPool {\\n    \\n    struct ChainUpdate {\\n        uint64 remoteChainSelector; // Remote chain selector\\n        bytes[] remotePoolAddresses; // Address of the remote pool, ABI encoded in the case of a remote EVM chain.\\n        bytes remoteTokenAddress; // Address of the remote token, ABI encoded in the case of a remote EVM chain.\\n        RateLimiter.Config outboundRateLimiterConfig; // Outbound rate limited config, meaning the rate limits for all of the onRamps for the given chain\\n        RateLimiter.Config inboundRateLimiterConfig; // Inbound rate limited config, meaning the rate limits for all of the offRamps for the given chain\\n    }\\n\\n    function addRemotePool(uint64 remoteChainSelector, bytes calldata remotePoolAddress) external;\\n    function removeRemotePool(uint64 remoteChainSelector, bytes calldata remotePoolAddress) external;\\n\\n    function setChainRateLimiterConfig(\\n        uint64 remoteChainSelectors,\\n        RateLimiter.Config calldata outboundConfigs,\\n        RateLimiter.Config calldata inboundConfigs\\n    ) external;\\n    \\n    function applyChainUpdates(\\n        uint64[] calldata remoteChainSelectorsToRemove,\\n        ChainUpdate[] calldata chainsToAdd\\n    ) external;\\n\\n    function acceptOwnership() external;\\n    function transferOwnership(address to) external;\\n}\\n\",\"keccak256\":\"0xaf29bf95153673054a35587472988d5d6044a2cb0b2a8961b30714bb9b38722b\",\"license\":\"MIT\"},\"contracts/deploy/L2Deployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {BridgedFrankencoin} from \\\"../stablecoin/BridgedFrankencoin.sol\\\";\\nimport {BridgedGovernance} from \\\"../equity/BridgedGovernance.sol\\\";\\nimport {CCIPAdmin} from \\\"../bridge/CCIPAdmin.sol\\\";\\nimport {TokenAdminRegistry} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/tokenAdminRegistry/TokenAdminRegistry.sol\\\";\\nimport {BurnMintTokenPool} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/pools/BurnMintTokenPool.sol\\\";\\nimport {IBurnMintERC20} from \\\"@chainlink/contracts-ccip/src/v0.8/shared/token/ERC20/IBurnMintERC20.sol\\\";\\nimport {RegistryModuleOwnerCustom} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/tokenAdminRegistry/RegistryModuleOwnerCustom.sol\\\";\\nimport {ITokenPool} from \\\"../bridge/ITokenPool.sol\\\";\\nimport {L2TestMinter} from \\\"./L2TestMinter.sol\\\";\\n\\ncontract L2Deployer {\\n    struct CCIPConfig {\\n        address router;\\n        uint64 mainnetChainSelector;\\n        address linkToken;\\n        TokenAdminRegistry tokenAdminRegistry;\\n        address rmnProxy;\\n        RegistryModuleOwnerCustom registryModuleOwnerCustom;\\n        ITokenPool.ChainUpdate[] chainsToAdd;\\n    }\\n\\n    struct FrankencoinConfig {\\n        uint256 minApplicationPeriod;\\n        address bridgeAccounting;\\n        address ccipAdmin;\\n    }\\n\\n    BridgedFrankencoin public bridgedFrankencoin;\\n    CCIPAdmin public ccipAdmin;\\n    BurnMintTokenPool public tokenPool;\\n    L2TestMinter public testMinter;\\n\\n    error CCIPAdminMismatch(address expected, address actual);\\n\\n    constructor(CCIPConfig memory _ccipConfig, BridgedGovernance _bridgedGovernance, FrankencoinConfig memory _frankencoinConfig) {\\n        // Deployment logic\\n        bridgedFrankencoin = new BridgedFrankencoin(\\n            _bridgedGovernance,\\n            _ccipConfig.router,\\n            _frankencoinConfig.minApplicationPeriod,\\n            _ccipConfig.linkToken,\\n            _ccipConfig.mainnetChainSelector,\\n            _frankencoinConfig.bridgeAccounting,\\n            _frankencoinConfig.ccipAdmin\\n        );\\n        ccipAdmin = new CCIPAdmin(_ccipConfig.tokenAdminRegistry, bridgedFrankencoin);\\n        if (_frankencoinConfig.ccipAdmin != address(ccipAdmin)) revert CCIPAdminMismatch(address(ccipAdmin), _frankencoinConfig.ccipAdmin);\\n\\n        address[] memory allowlist = new address[](0);\\n        tokenPool = new BurnMintTokenPool(IBurnMintERC20(address(bridgedFrankencoin)), bridgedFrankencoin.decimals(), allowlist, _ccipConfig.rmnProxy, _ccipConfig.router);\\n        tokenPool.transferOwnership(address(ccipAdmin));\\n\\n        testMinter = new L2TestMinter();\\n\\n        address[] memory minters = new address[](2);\\n        minters[0] = address(tokenPool);\\n        minters[1] = address(testMinter);\\n\\n        string[] memory minterComments = new string[](2);\\n        minterComments[0] = \\\"BurnMintTokenPool\\\";\\n        minterComments[1] = \\\"TestMinter\\\";\\n        bridgedFrankencoin.initialize(minters, minterComments);\\n\\n        testMinter.mint(bridgedFrankencoin, msg.sender);\\n\\n        ccipAdmin.registerToken(_ccipConfig.registryModuleOwnerCustom, ITokenPool(address(tokenPool)), _ccipConfig.chainsToAdd);\\n    }\\n}\\n\",\"keccak256\":\"0x2887c8ec453cb8e8648c9903859f9f996bb72d1df075f0027ae1ac2905f24c4f\",\"license\":\"MIT\"},\"contracts/deploy/L2TestMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IBasicFrankencoin} from \\\"../stablecoin/IBasicFrankencoin.sol\\\";\\n\\n\\ncontract L2TestMinter {\\n    bool public used;\\n\\n    constructor() {\\n\\n    }\\n\\n    function mint(IBasicFrankencoin token, address target) external {\\n        require(!used, \\\"Used\\\");\\n        token.mint(target, 1 ether);\\n        used = true;\\n    }\\n}\",\"keccak256\":\"0x4ecb40fd9e27595d6745cdf315165c983995b8e7f5c32355b93907e49dd90d92\",\"license\":\"MIT\"},\"contracts/equity/BridgedGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {CCIPReceiver} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\\\";\\nimport {Client} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\nimport {SyncVote, SyncMessage} from \\\"./IGovernance.sol\\\";\\nimport {Governance} from \\\"./Governance.sol\\\";\\n\\n/**\\n * This contract receives messages from the mainnet governance contract about the voting power of individual addresses\\n * as well as the total number of votes at the time of synchronization, and to whom they are delegating (if anyone).\\n * \\n * Accounts that alone or with the help of delegations reach 2% of the votes gain veto power and are considered 'qualified'.\\n * See also the 'checkQualified' method in the parent class and the IGovernance interface. The governance process is not\\n * done through majority votes, but by exercising veto power. Generally, anyone can make governance proposals that pass\\n * automatically after a grace period unless a qualified user vetoes the proposal, leading to a very light-weight and\\n * decentralized governance process.\\n * \\n * As the total number of votes increases with time (votes is the holding duration times the number of governance tokens\\n * held), the voting power of previously synchronized accounts tends to decrease with subsequent new synchronizations,\\n * leading to a natural and desired decay. Delegations can either be synchronized from mainnet or done locally on\\n * the current chain (with the risk of being overwritten when someone triggers a sync for the delegating account).\\n */\\ncontract BridgedGovernance is CCIPReceiver, Governance {\\n\\n    uint64 public immutable MAINNET_CHAIN_SELECTOR;\\n    address public immutable MAINNET_GOVERNANCE_ADDRESS;\\n\\n    mapping(address => uint256) private _votes;\\n    uint256 private _totalVotes;\\n\\n    event MessageReceived(bytes32 messageId, uint64 sourceChain, uint256 totalVotes, SyncVote[] syncedVotes);\\n\\n    error InvalidSourceChain();\\n    error InvalidSender();\\n\\n    constructor(address router, uint64 mainnetChainSelector, address mainnetGovernanceAddress) CCIPReceiver(router) {\\n        MAINNET_CHAIN_SELECTOR = mainnetChainSelector;\\n        MAINNET_GOVERNANCE_ADDRESS = mainnetGovernanceAddress;\\n    }\\n\\n    /// @notice Get the number of votes held by a holder.\\n    /// @param holder The address to check.\\n    function votes(address holder) public view override returns (uint256) {\\n        return _votes[holder];\\n    }\\n\\n    /// @notice Get the total number of votes.\\n    function totalVotes() public view override returns (uint256) {\\n        return _totalVotes;\\n    }\\n\\n    /// @notice Process a sync message.\\n    /// @param any2EvmMessage The message to process.\\n    function _ccipReceive(Client.Any2EVMMessage memory any2EvmMessage) internal override {\\n        if (any2EvmMessage.sourceChainSelector != MAINNET_CHAIN_SELECTOR) revert InvalidSourceChain();\\n        if (abi.decode(any2EvmMessage.sender, (address)) != MAINNET_GOVERNANCE_ADDRESS) revert InvalidSender();\\n\\n        SyncMessage memory syncMessage = abi.decode(any2EvmMessage.data, (SyncMessage)); // abi-decoding of the sent text\\n\\n        _processSyncMessage(syncMessage);\\n\\n        emit MessageReceived(any2EvmMessage.messageId, any2EvmMessage.sourceChainSelector, syncMessage.totalVotes, syncMessage.votes);\\n    }\\n\\n    /// @notice Updates internal state with received message\\n    /// @param syncMessage The message to process.\\n    function _processSyncMessage(SyncMessage memory syncMessage) internal {\\n        _totalVotes = syncMessage.totalVotes;\\n\\n        // omitted unchecked optimization for readability\\n        for (uint64 i = 0; i < syncMessage.votes.length; i++) {\\n            SyncVote memory syncVote = syncMessage.votes[i];\\n            _votes[syncVote.voter] = syncVote.votes;\\n            delegate(syncVote.voter, syncVote.delegatee);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98ff7a2fd8fde2addfe61de19103c12b83d3a6e1fc4022392cba0cb02b2d23c4\",\"license\":\"MIT\"},\"contracts/equity/Equity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Governance.sol\\\";\\nimport \\\"../stablecoin/Frankencoin.sol\\\";\\nimport \\\"../utils/MathUtil.sol\\\";\\nimport \\\"../erc20/IERC677Receiver.sol\\\";\\n\\n/**\\n * @title Equity\\n * @notice If the Frankencoin system was a bank, this contract would represent the equity on its balance sheet.\\n * Like with a corporation, the owners of the equity capital are the shareholders, or in this case the holders\\n * of Frankencoin Pool Shares (FPS) tokens. Anyone can mint additional FPS tokens by adding Frankencoins to the\\n * reserve pool. Also, FPS tokens can be redeemed for Frankencoins again after a minimum holding period.\\n * Furthermore, the FPS shares come with some voting power. Anyone that held at least 3% of the holding-period-\\n * weighted reserve pool shares gains veto power and can veto new proposals.\\n */\\ncontract Equity is Governance, ERC20PermitLight, MathUtil {\\n    /**\\n     * The VALUATION_FACTOR determines the market cap of the reserve pool shares relative to the equity reserves.\\n     * The following always holds: Market Cap = Valuation Factor * Equity Reserve = Price * Supply\\n     *\\n     * In the absence of profits and losses, the variables grow as follows when FPS tokens are minted:\\n     *\\n     * |   Reserve     |   Market Cap  |     Price     |     Supply   |\\n     * |          1000 |          3000 |             3 |         1000 |\\n     * |       1000000 |       3000000 |           300 |        10000 |\\n     * |    1000000000 |    3000000000 |         30000 |       100000 |\\n     * | 1000000000000 | 3000000000000 |       3000000 |      1000000 |\\n     *\\n     * I.e., the supply is proporational to the cubic root of the reserve and the price is proportional to the\\n     * squared cubic root. When profits accumulate or losses materialize, the reserve, the market cap,\\n     * and the price are adjusted proportionally, with the supply staying constant. In the absence of an extreme\\n     * inflation of the Swiss franc, it is unlikely that there will ever be more than ten million FPS.\\n     */\\n    uint32 public constant VALUATION_FACTOR = 3;\\n\\n    uint256 private constant MINIMUM_EQUITY = 1000 * ONE_DEC18;\\n\\n    /**\\n     * @notice The number of digits to store the average holding time of share tokens.\\n     */\\n    uint8 private constant TIME_RESOLUTION_BITS = 20;\\n\\n    /**\\n     * @notice The minimum holding duration. You are not allowed to redeem your pool shares if you held them\\n     * for less than the minimum holding duration at average. For example, if you have two pool shares on your\\n     * address, one acquired 5 days ago and one acquired 105 days ago, you cannot redeem them as the average\\n     * holding duration of your shares is only 55 days < 90 days.\\n     */\\n    uint256 public constant MIN_HOLDING_DURATION = 90 days << TIME_RESOLUTION_BITS; // Set to 5 for local testing\\n\\n    Frankencoin public immutable zchf;\\n\\n    /**\\n     * @dev To track the total number of votes we need to know the number of votes at the anchor time and when the\\n     * anchor time was. This is (hopefully) stored in one 256 bit slot, with the anchor time taking 64 Bits and\\n     * the total vote count 192 Bits. Given the sub-second resolution of 20 Bits, the implicit assumption is\\n     * that the timestamp can always be stored in 44 Bits (i.e. it does not exceed half a million years). Further,\\n     * given 18 decimals (about 60 Bits), this implies that the total supply cannot exceed\\n     *   192 - 60 - 44 - 20 = 68 Bits\\n     * Here, we are also save, as 68 Bits would imply more than a trillion outstanding shares. In fact,\\n     * a limit of about 2**36 shares (that's about 2**96 Bits when taking into account the decimals) is imposed\\n     * when minting. This means that the maximum supply is billions shares, which is could only be reached in\\n     * a scenario with hyper inflation, in which case the stablecoin is worthless anyway.\\n     */\\n    uint192 private totalVotesAtAnchor; // Total number of votes at the anchor time, see comment on the um\\n    uint64 private totalVotesAnchorTime; // 44 Bit for the time stamp, 20 Bit sub-second time resolution\\n\\n    /**\\n     * @notice A time stamp in the past such that: votes = balance * (time passed since anchor was set)\\n     */\\n    mapping(address owner => uint64 timestamp) private voteAnchor; // 44 bits for time stamp, 20 subsecond resolution\\n\\n    event Trade(address who, int amount, uint totPrice, uint newprice); // amount pos or neg for mint or redemption\\n\\n    constructor(Frankencoin zchf_) ERC20(18) {\\n        zchf = zchf_;\\n    }\\n\\n    function name() external pure override returns (string memory) {\\n        return \\\"Frankencoin Pool Share\\\";\\n    }\\n\\n    function symbol() external pure override returns (string memory) {\\n        return \\\"FPS\\\";\\n    }\\n\\n    /**\\n     * @notice Returns the price of one FPS in ZCHF with 18 decimals precision.\\n     */\\n    function price() public view returns (uint256) {\\n        uint256 equity = zchf.equity();\\n        if (equity == 0 || totalSupply() == 0) {\\n            return ONE_DEC18; // initial price is 1000 ZCHF for the first 1000 FPS\\n        } else {\\n            return (VALUATION_FACTOR * zchf.equity() * ONE_DEC18) / totalSupply();\\n        }\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override {\\n        super._beforeTokenTransfer(from, to, amount);\\n        if (amount > 0) {\\n            // No need to adjust the sender votes. When they send out 10% of their shares, they also lose 10% of\\n            // their votes so everything falls nicely into place. Recipient votes should stay the same, but grow\\n            // faster in the future, requiring an adjustment of the anchor.\\n            uint256 roundingLoss = _adjustRecipientVoteAnchor(to, amount);\\n            // The total also must be adjusted and kept accurate by taking into account the rounding error.\\n            _adjustTotalVotes(from, amount, roundingLoss);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns whether the given address is allowed to redeem FPS, which is the\\n     * case after their average holding duration is larger than the required minimum.\\n     */\\n    function canRedeem(address owner) public view returns (bool) {\\n        return _anchorTime() - voteAnchor[owner] >= MIN_HOLDING_DURATION;\\n    }\\n\\n    /**\\n     * @notice Decrease the total votes anchor when tokens lose their voting power due to being moved\\n     * @param from      sender\\n     * @param amount    amount to be sent\\n     */\\n    function _adjustTotalVotes(address from, uint256 amount, uint256 roundingLoss) internal {\\n        uint64 time = _anchorTime();\\n        uint256 lostVotes = from == address(0x0) ? 0 : (time - voteAnchor[from]) * amount;\\n        totalVotesAtAnchor = uint192(totalVotes() - roundingLoss - lostVotes);\\n        totalVotesAnchorTime = time;\\n    }\\n\\n    /**\\n     * @notice the vote anchor of the recipient is moved forward such that the number of calculated\\n     * votes does not change despite the higher balance.\\n     * @param to        receiver address\\n     * @param amount    amount to be received\\n     * @return the number of votes lost due to rounding errors\\n     */\\n    function _adjustRecipientVoteAnchor(address to, uint256 amount) internal returns (uint256) {\\n        if (to != address(0x0)) {\\n            uint256 recipientVotes = votes(to); // for example 21 if 7 shares were held for 3 seconds\\n            uint256 newbalance = balanceOf(to) + amount; // for example 11 if 4 shares are added\\n            // new example anchor is only 21 / 11 = 1 second in the past\\n            voteAnchor[to] = uint64(_anchorTime() - recipientVotes / newbalance);\\n            return recipientVotes % newbalance; // we have lost 21 % 11 = 10 votes\\n        } else {\\n            // optimization for burn, vote anchor of null address does not matter\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Time stamp with some additional bits for higher resolution.\\n     */\\n    function _anchorTime() internal view returns (uint64) {\\n        return uint64(block.timestamp << TIME_RESOLUTION_BITS);\\n    }\\n\\n    /**\\n     * @notice The relative voting power of the address.\\n     * @return A percentage with 1e18 being 100%\\n     */\\n    function relativeVotes(address holder) external view returns (uint256) {\\n        return (ONE_DEC18 * votes(holder)) / totalVotes();\\n    }\\n\\n    /**\\n     * @notice The votes of the holder, excluding votes from delegates.\\n     */\\n    function votes(address holder) public override view returns (uint256) {\\n        return balanceOf(holder) * (_anchorTime() - voteAnchor[holder]);\\n    }\\n\\n    /**\\n     * @notice How long the holder already held onto their average FPS in seconds.\\n     */\\n    function holdingDuration(address holder) public view returns (uint256) {\\n        return (_anchorTime() - voteAnchor[holder]) >> TIME_RESOLUTION_BITS;\\n    }\\n\\n    /**\\n     * @notice Total number of votes in the system.\\n     */\\n    function totalVotes() public override view returns (uint256) {\\n        return totalVotesAtAnchor + totalSupply() * (_anchorTime() - totalVotesAnchorTime);\\n    }\\n\\n    /**\\n     * @notice Since quorum is rather low, it is important to have a way to prevent malicious minority holders\\n     * from blocking the whole system. This method provides a way for the good guys to team up and destroy\\n     * the bad guy's votes (at the cost of also reducing their own votes). This mechanism potentially\\n     * gives full control over the system to whoever has 51% of the votes.\\n     *\\n     * Since this is a rather aggressive measure, delegation is not supported. Every holder must call this\\n     * method on their own.\\n     * @param targets   The target addresses to remove votes from\\n     * @param votesToDestroy    The maximum number of votes the caller is willing to sacrifice\\n     */\\n    function kamikaze(address[] calldata targets, uint256 votesToDestroy) external {\\n        uint256 budget = _reduceVotes(msg.sender, votesToDestroy);\\n        uint256 destroyedVotes = 0;\\n        for (uint256 i = 0; i < targets.length && destroyedVotes < budget; i++) {\\n            destroyedVotes += _reduceVotes(targets[i], budget - destroyedVotes);\\n        }\\n        require(destroyedVotes > 0); // sanity check\\n        totalVotesAtAnchor = uint192(totalVotes() - destroyedVotes - budget);\\n        totalVotesAnchorTime = _anchorTime();\\n    }\\n\\n    function _reduceVotes(address target, uint256 amount) internal returns (uint256) {\\n        uint256 votesBefore = votes(target);\\n        if (amount >= votesBefore) {\\n            voteAnchor[target] = _anchorTime();\\n            return votesBefore;\\n        } else {\\n            voteAnchor[target] = uint64(_anchorTime() - (votesBefore - amount) / balanceOf(target));\\n            return votesBefore - votes(target);\\n        }\\n    }\\n\\n    /**\\n     * @notice Call this method to obtain newly minted pool shares in exchange for Frankencoins.\\n     * No allowance required (i.e. it is hardcoded in the Frankencoin token contract).\\n     * Make sure to invest at least 10e-12 * market cap to avoid rounding losses.\\n     *\\n     * @dev If equity is close to zero or negative, you need to send enough ZCHF to bring equity back to 1000 ZCHF.\\n     *\\n     * @param amount            Frankencoins to invest\\n     * @param expectedShares    Minimum amount of expected shares for frontrunning protection\\n     */\\n    function invest(uint256 amount, uint256 expectedShares) external returns (uint256) {\\n        zchf.transferFrom(msg.sender, address(this), amount);\\n        uint256 equity = zchf.equity();\\n        require(equity >= MINIMUM_EQUITY, \\\"insuf equity\\\"); // ensures that the initial deposit is at least 1000 ZCHF\\n\\n        uint256 shares = _calculateShares(equity <= amount ? 0 : equity - amount, amount);\\n        require(shares >= expectedShares);\\n        _mint(msg.sender, shares);\\n        emit Trade(msg.sender, int(shares), amount, price());\\n\\n        // limit the total supply to a reasonable amount to guard against overflows with price and vote calculations\\n        // the 36 bits are 68 bits for magnitude and 60 bits for precision, as calculated in an above comment\\n        require(totalSupply() <= type(uint96).max, \\\"total supply exceeded\\\");\\n        return shares;\\n    }\\n\\n    /**\\n     * @notice Calculate shares received when investing Frankencoins\\n     * @param investment    ZCHF to be invested\\n     * @return shares to be received in return\\n     */\\n    function calculateShares(uint256 investment) external view returns (uint256) {\\n        return _calculateShares(zchf.equity(), investment);\\n    }\\n\\n    function _calculateShares(uint256 capitalBefore, uint256 investment) internal view returns (uint256) {\\n        uint256 totalShares = totalSupply();\\n        uint256 investmentExFees = (investment * 997) / 1000; // remove 0.3% fee\\n        // Assign 1000 FPS for the initial deposit, calculate the amount otherwise\\n        uint256 newTotalShares = capitalBefore < MINIMUM_EQUITY || totalShares == 0\\n            ? totalShares + 1000 * ONE_DEC18\\n            : _mulD18(totalShares, _cubicRoot(_divD18(capitalBefore + investmentExFees, capitalBefore)));\\n        return newTotalShares - totalShares;\\n    }\\n\\n    /**\\n     * @notice Redeem the given amount of shares owned by the sender and transfer the proceeds to the target.\\n     * @return The amount of ZCHF transferred to the target\\n     */\\n    function redeem(address target, uint256 shares) external returns (uint256) {\\n        return _redeemFrom(msg.sender, target, shares);\\n    }\\n\\n    /**\\n     * @notice Like redeem(...), but with an extra parameter to protect against frontrunning.\\n     * @param expectedProceeds  The minimum acceptable redemption proceeds.\\n     */\\n    function redeemExpected(address target, uint256 shares, uint256 expectedProceeds) external returns (uint256) {\\n        uint256 proceeds = _redeemFrom(msg.sender, target, shares);\\n        require(proceeds >= expectedProceeds);\\n        return proceeds;\\n    }\\n\\n    /**\\n     * @notice Redeem FPS based on an allowance from the owner to the caller.\\n     * See also redeemExpected(...).\\n     */\\n    function redeemFrom(\\n        address owner,\\n        address target,\\n        uint256 shares,\\n        uint256 expectedProceeds\\n    ) external returns (uint256) {\\n        _useAllowance(owner, msg.sender, shares);\\n        uint256 proceeds = _redeemFrom(owner, target, shares);\\n        require(proceeds >= expectedProceeds);\\n        return proceeds;\\n    }\\n\\n    function _redeemFrom(address owner, address target, uint256 shares) internal returns (uint256) {\\n        require(canRedeem(owner));\\n        uint256 proceeds = calculateProceeds(shares);\\n        _burn(owner, shares);\\n        zchf.transfer(target, proceeds);\\n        emit Trade(owner, -int(shares), proceeds, price());\\n        return proceeds;\\n    }\\n\\n    /**\\n     * @notice Calculate ZCHF received when depositing shares\\n     * @param shares number of shares we want to exchange for ZCHF,\\n     *               in dec18 format\\n     * @return amount of ZCHF received for the shares\\n     */\\n    function calculateProceeds(uint256 shares) public view returns (uint256) {\\n        uint256 totalShares = totalSupply();\\n        require(shares + ONE_DEC18 < totalShares, \\\"too many shares\\\"); // make sure there is always at least one share\\n        uint256 capital = zchf.equity();\\n        uint256 reductionAfterFees = (shares * 997) / 1000;\\n        uint256 newCapital = _mulD18(capital, _power3(_divD18(totalShares - reductionAfterFees, totalShares)));\\n        return capital - newCapital;\\n    }\\n\\n    /**\\n     * @notice If there is less than 1000 ZCHF in equity left (maybe even negative), the system is at risk\\n     * and we should allow qualified FPS holders to restructure the system.\\n     *\\n     * Example: there was a devastating loss and equity stands at -1'000'000. Most shareholders have lost hope in the\\n     * Frankencoin system except for a group of small FPS holders who still believes in it and is willing to provide\\n     * 2'000'000 ZCHF to save it. These brave souls are essentially donating 1'000'000 to the minter reserve and it\\n     * would be wrong to force them to share the other million with the passive FPS holders. Instead, they will get\\n     * the possibility to bootstrap the system again owning 100% of all FPS shares.\\n     *\\n     * @param helpers          A list of addresses that delegate to the caller in incremental order\\n     * @param addressesToWipe  A list of addresses whose FPS will be burned to zero\\n     */\\n    function restructureCapTable(address[] calldata helpers, address[] calldata addressesToWipe) external {\\n        require(zchf.equity() < MINIMUM_EQUITY);\\n        checkQualified(msg.sender, helpers);\\n        for (uint256 i = 0; i < addressesToWipe.length; i++) {\\n            address current = addressesToWipe[i];\\n            _burn(current, balanceOf(current));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd84d9f2eeb750f04ffbdf8f4262e8bdb3e873a6a444f64f7905dc541c2095b8f\",\"license\":\"MIT\"},\"contracts/equity/Governance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IGovernance.sol\\\";\\n\\n/**\\n * Contract to consult when checking if someone has veto power.\\n * Veto power is reached with 2% of the votes.\\n */\\nabstract contract Governance is IGovernance {\\n\\n    /**\\n     * @notice The quorum in basis points. 100 is 1%.\\n     */\\n    uint32 private constant QUORUM = 200;\\n\\n    /**\\n     * @notice Keeping track on who delegated votes to whom.\\n     * Note that delegation does not mean you cannot vote / veto any more, it just means that the delegate can\\n     * benefit from your votes when invoking a veto. Circular delegations are valid, do not help when voting.\\n     */\\n    mapping(address owner => address delegate) public delegates;\\n\\n    event Delegation(address indexed from, address indexed to); // indicates a delegation\\n\\n    /**\\n     * @notice The votes of the holder, excluding votes from delegates.\\n     */\\n    function votes(address holder) virtual public view returns (uint256);\\n\\n    /**\\n     * @notice Total number of votes in the system.\\n     */\\n    function totalVotes() virtual public view returns (uint256);\\n\\n    /**\\n     * @notice The number of votes the sender commands when taking the support of the helpers into account.\\n     * @param sender    The address whose total voting power is of interest\\n     * @param helpers   An incrementally sorted list of helpers without duplicates and without the sender.\\n     *                  The call fails if the list contains an address that does not delegate to sender.\\n     *                  For indirect delegates, i.e. a -> b -> c, both a and b must be included for both to count.\\n     * @return          The total number of votes of sender at the current point in time.\\n     */\\n    function votesDelegated(address sender, address[] calldata helpers) public view returns (uint256) {\\n        uint256 _votes = votes(sender);\\n        require(_checkDuplicatesAndSorted(helpers));\\n        for (uint i = 0; i < helpers.length; i++) {\\n            address current = helpers[i];\\n            require(current != sender);\\n            require(_canVoteFor(sender, current));\\n            _votes += votes(current);\\n        }\\n        return _votes;\\n    }\\n\\n    function _checkDuplicatesAndSorted(address[] calldata helpers) internal pure returns (bool ok) {\\n        if (helpers.length <= 1) {\\n            return true;\\n        } else {\\n            address prevAddress = helpers[0];\\n            for (uint i = 1; i < helpers.length; i++) {\\n                if (helpers[i] <= prevAddress) {\\n                    return false;\\n                }\\n                prevAddress = helpers[i];\\n            }\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks whether the sender address is qualified given a list of helpers that delegated their votes\\n     * directly or indirectly to the sender. It is the responsiblity of the caller to figure out whether\\n     * helps are necessary and to identify them by scanning the blockchain for Delegation events.\\n     */\\n    function checkQualified(address sender, address[] calldata helpers) public view override {\\n        uint256 _votes = votesDelegated(sender, helpers);\\n        if (_votes * 10000 < QUORUM * totalVotes()) revert NotQualified();\\n    }\\n\\n    error NotQualified();\\n\\n    /**\\n     * @notice Increases the voting power of the delegate by your number of votes without taking away any voting power\\n     * from the sender.\\n     */\\n    function delegateVoteTo(address delegate_) external {\\n        delegate(msg.sender, delegate_);\\n    }\\n\\n    function delegate(address owner, address delegate_) internal {\\n        delegates[owner] = delegate_;\\n        emit Delegation(owner, delegate_);\\n    }\\n\\n    function _canVoteFor(address delegate_, address owner) internal view returns (bool) {\\n        if (owner == delegate_) {\\n            return true;\\n        } else if (owner == address(0x0)) {\\n            return false;\\n        } else {\\n            return _canVoteFor(delegate_, delegates[owner]);\\n        }\\n    }\\n\\n}\",\"keccak256\":\"0xa720eda045a92306593753381ef691c550dc458f3fb7f7c45c99d5e69bed3c59\",\"license\":\"MIT\"},\"contracts/equity/IGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGovernance {\\n   function checkQualified(address sender, address[] calldata helpers) external view;\\n}\\n\\nstruct SyncVote {\\n    address voter;\\n    uint256 votes;\\n    address delegatee;\\n}\\n\\nstruct SyncMessage {\\n    SyncVote[] votes;\\n    uint256 totalVotes;\\n}\\n\",\"keccak256\":\"0xd6329ac67953e19cee718b79f14ff527f49984d8a01141b496ee68c91b0a4274\",\"license\":\"MIT\"},\"contracts/erc20/CrossChainERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied from https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol\\n// and modified it.\\n\\npragma solidity ^0.8.0;\\n\\nimport {ERC20} from \\\"./ERC20.sol\\\";\\nimport {IRouterClient} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\nimport {Client} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\nimport {CCIPSender} from \\\"../bridge/CCIPSender.sol\\\";\\n\\nabstract contract CrossChainERC20 is ERC20, CCIPSender {\\n    event Transfer(address indexed from, uint64 toChain, bytes indexed to, uint256 value);\\n\\n    constructor(address router, address linkToken) CCIPSender(IRouterClient(router), linkToken) {}\\n\\n    /// @notice Transfers tokens to the target chain\\n    /// @dev Requires the caller to approve this contract to spend fee tokens if the CCIP fee is not paid in the chain native token.\\n    /// @param targetChain The chain selector of the destination chain.\\n    /// @param target The address of the recipient on the destination chain.\\n    /// @param amount The amount of tokens to transfer.\\n    function transfer(uint64 targetChain, address target, uint256 amount) external payable {\\n        transfer(targetChain, _toReceiver(target), amount, \\\"\\\");\\n    }\\n\\n    /// @notice Transfers tokens to the target chain\\n    /// @dev Requires the caller to approve this contract to spend fee tokens if the CCIP fee is not paid in the chain native token.\\n    /// @param targetChain The chain selector of the destination chain.\\n    /// @param target The address of the recipient on the destination chain.\\n    /// @param amount The amount of tokens to transfer.\\n    /// @param extraArgs Extra arguments for CCIP\\n    function transfer(uint64 targetChain, address target, uint256 amount, Client.EVMExtraArgsV2 calldata extraArgs) external payable {\\n        transfer(targetChain, _toReceiver(target), amount, Client._argsToBytes(extraArgs));\\n    }\\n\\n    /// @notice Transfers tokens to the target chain\\n    /// @dev Requires the caller to approve this contract to spend fee tokens if the CCIP fee is not paid in the chain native token.\\n    /// @param targetChain The chain selector of the destination chain.\\n    /// @param target The address of the recipient on the destination chain.\\n    /// @param amount The amount of tokens to transfer.\\n    /// @param extraArgs Extra arguments for CCIP\\n    function transfer(uint64 targetChain, bytes memory target, uint256 amount, bytes memory extraArgs) public payable {\\n        _transfer(msg.sender, address(this), amount);\\n        _approve(address(this), address(ROUTER), amount);\\n        _send(targetChain, constructTransferMessage(target, amount, extraArgs));\\n        emit Transfer(msg.sender, targetChain, target, amount);\\n    }\\n\\n    /// @notice Gets the CCIP fee for a transfer.\\n    /// @param targetChain The chain selector of the destination chain.\\n    /// @param target The address of the recipient on the destination chain.\\n    /// @param amount The amount of tokens to transfer.\\n    /// @param nativeToken Whether the token is a native token.\\n    function getCCIPFee(uint64 targetChain, address target, uint256 amount, bool nativeToken) public view returns (uint256) {\\n        return getCCIPFee(targetChain, _toReceiver(target), amount, nativeToken, \\\"\\\");\\n    }\\n\\n    /// @notice Gets the CCIP fee for a transfer.\\n    /// @param targetChain The chain selector of the destination chain.\\n    /// @param target The address of the recipient on the destination chain.\\n    /// @param amount The amount of tokens to transfer.\\n    /// @param nativeToken Whether the token is a native token.\\n    /// @param extraArgs Extra arguments for CCIP\\n    function getCCIPFee(uint64 targetChain, address target, uint256 amount, bool nativeToken, bytes memory extraArgs) public view returns (uint256) {\\n        return getCCIPFee(targetChain, _toReceiver(target), amount, nativeToken, extraArgs);\\n    }\\n\\n    /// @notice Gets the CCIP fee for a transfer.\\n    /// @param targetChain The chain selector of the destination chain.\\n    /// @param target The address of the recipient on the destination chain.\\n    /// @param amount The amount of tokens to transfer.\\n    /// @param nativeToken Whether the token is a native token.\\n    /// @param extraArgs Extra arguments for CCIP\\n    function getCCIPFee(uint64 targetChain, bytes memory target, uint256 amount, bool nativeToken, bytes memory extraArgs) public view returns (uint256) {\\n        Client.EVMTokenAmount[] memory tokenAmounts = new Client.EVMTokenAmount[](1);\\n        tokenAmounts[0] = Client.EVMTokenAmount(address(this), amount);\\n        return _calculateFee(targetChain, _constructMessage(target, \\\"\\\", tokenAmounts, nativeToken, extraArgs));\\n    }\\n\\n    /// @notice Construct a CCIP message.\\n    /// @dev This function will create an EVM2AnyMessage struct with all the necessary information for tokens transfer.\\n    /// @param receiver The address of the receiver.\\n    /// @param amount The amount of the token to be transferred.\\n    /// @return Client.EVM2AnyMessage Returns an EVM2AnyMessage struct which contains information for sending a CCIP message.\\n    function constructTransferMessage(bytes memory receiver, uint256 amount, bytes memory extraArgs) internal view returns (Client.EVM2AnyMessage memory) {\\n        Client.EVMTokenAmount[] memory tokenAmounts = new Client.EVMTokenAmount[](1);\\n        tokenAmounts[0] = Client.EVMTokenAmount(address(this), amount);\\n        return _constructMessage(receiver, \\\"\\\", tokenAmounts, extraArgs);\\n    }\\n}\\n\",\"keccak256\":\"0xf9d57599079b67616a7ee2a444a30965c32ab4e333b98f0986c914c35e926431\",\"license\":\"MIT\"},\"contracts/erc20/CrossChainReference.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CrossChainERC20} from \\\"./CrossChainERC20.sol\\\";\\nimport {ERC20} from \\\"./ERC20.sol\\\";\\nimport {Client} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\n\\n/**\\n * @dev A module for Frankencoin crosschain transfers with a reference number\\n */\\nabstract contract CrossChainReference is CrossChainERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 amount, string ref);\\n\\n    // @dev: **to** is type bytes to support arbitrary destination chains without risk of unsafe conversion\\n    event CrossTransfer(address indexed sender, address indexed from, uint64 toChain, bytes indexed to, uint256 amount, string ref);\\n\\n    constructor(address router, address linkToken) CrossChainERC20(router, linkToken) {}\\n\\n    // transfer within the erc20 context\\n    function transfer(address recipient, uint256 amount, string calldata ref) public returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        emit Transfer(msg.sender, recipient, amount, ref);\\n        return true;\\n    }\\n\\n    function transferFrom(address owner, address recipient, uint256 amount, string calldata ref) public returns (bool) {\\n        _useAllowance(owner, msg.sender, amount);\\n        _transfer(owner, recipient, amount);\\n        emit Transfer(owner, recipient, amount, ref);\\n        return true;\\n    }\\n\\n    // transfer within the cross chain context\\n    function transfer(uint64 targetChain, address recipient, uint256 amount, string calldata ref) public returns (bool) {\\n        return transfer(targetChain, _toReceiver(recipient), amount, \\\"\\\", ref);\\n    }\\n\\n    function transfer(uint64 targetChain, address recipient, uint256 amount, Client.EVMExtraArgsV2 calldata extraArgs, string calldata ref) public returns (bool) {\\n        return transfer(targetChain, _toReceiver(recipient), amount, Client._argsToBytes(extraArgs), ref);\\n    }\\n\\n    function transfer(uint64 targetChain, bytes memory recipient, uint256 amount, bytes memory extraArgs, string calldata ref) public returns (bool) {\\n        _crossTransfer(targetChain, msg.sender, recipient, amount, extraArgs, ref);\\n        return true;\\n    }\\n\\n    // cross transfer from\\n    function transferFrom(uint64 targetChain, address owner, address recipient, uint256 amount, string calldata ref) public returns (bool) {\\n        return transferFrom(targetChain, owner, _toReceiver(recipient), amount, \\\"\\\", ref);\\n    }\\n\\n    function transferFrom(uint64 targetChain, address owner, address recipient, uint256 amount, Client.EVMExtraArgsV2 calldata extraArgs, string calldata ref) public returns (bool) {\\n        return transferFrom(targetChain, owner, _toReceiver(recipient), amount, Client._argsToBytes(extraArgs), ref);\\n    }\\n\\n    function transferFrom(uint64 targetChain, address owner, bytes memory recipient, uint256 amount, bytes memory extraArgs, string calldata ref) public returns (bool) {\\n        _useAllowance(owner, msg.sender, amount);\\n        _crossTransfer(targetChain, owner, recipient, amount, extraArgs, ref);\\n        return true;\\n    }\\n\\n    function _crossTransfer(uint64 targetChain, address from, bytes memory target, uint256 amount, bytes memory extraArgs, string calldata ref) private {\\n        _transfer(from, address(this), amount);\\n        _approve(address(this), address(ROUTER), amount);\\n        _send(targetChain, constructTransferMessage(target, amount, extraArgs));\\n        emit CrossTransfer(msg.sender, from, targetChain, target, amount, ref); // @dev: target is type bytes\\n    }\\n}\\n\",\"keccak256\":\"0xcf03a3f0ba54e32e9e5a346cea053514c4dbdb7adfdc8c9427648eba59a2dcd5\",\"license\":\"MIT\"},\"contracts/erc20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied and adjusted from OpenZeppelin\\n// Adjustments:\\n// - modifications to support ERC-677\\n// - removed require messages to save space\\n// - removed unnecessary require statements\\n// - removed GSN Context\\n// - upgraded to 0.8 to drop SafeMath\\n// - let name() and symbol() be implemented by subclass\\n// - infinite allowance support, with 2^255 and above considered infinite\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IERC677Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the `IERC20` interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using `_mint`.\\n * For a generic mechanism see `ERC20Mintable`.\\n *\\n * *For a detailed writeup see our guide [How to implement supply\\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n */\\n\\nabstract contract ERC20 is IERC20 {\\n    mapping(address account => uint256 balance) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256 allowance)) private _allowances;\\n\\n    uint256 internal constant INFINITY = (1 << 255);\\n\\n    uint256 private _totalSupply;\\n\\n    uint8 public immutable override decimals;\\n\\n    // Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4139/files#diff-fa792f7d08644eebc519dac2c29b00a54afc4c6a76b9ef3bba56c8401fe674f6\\n    // Indicates an error related to the current balance of a sender. Used in transfers.\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n    // Indicates a failure with the spender\\u2019s allowance. Used in transfers.\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    constructor(uint8 _decimals) {\\n        decimals = _decimals;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.totalSupply`.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.balanceOf`.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See `IERC20.transfer`.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.allowance`.\\n     */\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return _allowance(owner, spender);\\n    }\\n\\n    function _allowance(address owner, address spender) internal view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See `IERC20.approve`.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) external override returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.transferFrom`.\\n     *\\n     * Emits an `Approval` event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of `ERC20`;\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `value`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _useAllowance(sender, msg.sender, amount);\\n        return true;\\n    }\\n\\n    function _useAllowance(address owner, address spender, uint256 amount) internal {\\n        uint256 currentAllowance = _allowance(owner, spender);\\n        if (currentAllowance < INFINITY) {\\n            // Only decrease the allowance if it was not set to 'infinite'\\n            // Documented in github.com/aktionariat/contracts/blob/master/doc/infiniteallowance.md\\n            if (currentAllowance < amount) revert ERC20InsufficientAllowance(owner, currentAllowance, amount);\\n            _approve(owner, spender, currentAllowance - amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to `transfer`, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a `Transfer` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(recipient != address(0));\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n        if (_balances[sender] < amount) revert ERC20InsufficientBalance(sender, _balances[sender], amount);\\n        _balances[sender] -= amount;\\n        _balances[recipient] += amount;\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a `Transfer` event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address recipient, uint256 amount) internal virtual {\\n        require(recipient != address(0));\\n\\n        _beforeTokenTransfer(address(0), recipient, amount);\\n\\n        _totalSupply += amount;\\n        _balances[recipient] += amount;\\n        emit Transfer(address(0), recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a `Transfer` event with `to` set to the zero address.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _totalSupply -= amount;\\n        _balances[account] -= amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0x3599df1a0b431988601f79e5fad3613eea322a2822f1bc2186e37c507467b8d2\",\"license\":\"MIT\"},\"contracts/erc20/ERC20PermitLight.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied from https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol\\n// and modified it.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20.sol\\\";\\n\\nabstract contract ERC20PermitLight is ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address account => uint256 nonce) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        unchecked {\\n            // unchecked to save a little gas with the nonce increment...\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"),\\n                                bytes32(0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n            _approve(recoveredAddress, spender, value);\\n        }\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    //keccak256(\\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\");\\n                    bytes32(0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x646faabf144ee832204ff8068f113c88a2766983eab58a1bc2ad1b4c61aa40b7\",\"license\":\"MIT\"},\"contracts/erc20/IERC20.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: MIT\\n *\\n * Copyright (c) 2016-2019 zOS Global Limited\\n *\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns always true. Throws error on failure.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value can change when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns always true. Throws error on failure.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6c4823424e1d0c53e2d3e978b81929fcec2583b96ed286abc955b71a5aad5544\",\"license\":\"MIT\"},\"contracts/erc20/IERC677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC677Receiver {\\n    \\n    function onTokenTransfer(address from, uint256 amount, bytes calldata data) external returns (bool);\\n\\n}\",\"keccak256\":\"0x40703acdfa2126286b117ad0cca84c0a4ca2d3b18586765186c9bdd8ad5cf744\",\"license\":\"MIT\"},\"contracts/stablecoin/BridgedFrankencoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../erc20/CrossChainReference.sol\\\";\\nimport \\\"../erc20/ERC20PermitLight.sol\\\";\\nimport \\\"../equity/Equity.sol\\\";\\nimport \\\"../equity/IGovernance.sol\\\";\\nimport \\\"../equity/BridgedGovernance.sol\\\";\\nimport \\\"./IBasicFrankencoin.sol\\\";\\n\\n/**\\n * @title Bridged Frankencoin ERC-20 Token\\n *\\n * Like its mainnet counterpart, it has the capability to add minting modules. This allows to\\n * potentially add similar collateralized minting methods as in the mainnet Frankencoin.\\n * \\n * Minting modules are extremely powerful. They can mint, move, and burn Frankencoins on arbitrary addresses.\\n * A typical minting module is the CCIP Token Manager that mints tokens as they arrive from other chains or\\n * burns them when sent away again.\\n *\\n * The bridged Frankencoin relies on the bridged governance module to veto bad proposals for new minters.\\n * \\n * System income (e.g. from proposal fees) is accumualted on the governance address (this could be any address,\\n * but on mainnet, it is also the governance module that contains the equity capital). Furthermore, the contract\\n * keeps track of accumulated costs (losses), for example when the Savings module pays out interests.\\n * \\n * The accumulated profit or loss should be synchronized back to mainnet from time to time using a CCIP\\n * message.\\n */\\ncontract BridgedFrankencoin is CrossChainReference, ERC20PermitLight, IBasicFrankencoin {\\n    /**\\n     * @notice Minimal fee and application period when suggesting a new minter.\\n     */\\n    uint256 public constant MIN_FEE = 1000 * (10 ** 18);\\n    uint256 public immutable MIN_APPLICATION_PERIOD; // for example 10 days\\n    address public immutable BRIDGE_ACCOUNTING;\\n    uint64 public immutable MAINNET_CHAIN_SELECTOR;\\n    address public immutable CCIP_ADMIN;\\n\\n    /**\\n     * @notice The contract that holds the reserve.\\n     */\\n    IGovernance public immutable override reserve;\\n\\n    /**\\n     * @notice Map of minters to approval time stamps. If the time stamp is in the past, the minter contract is allowed\\n     * to mint Frankencoins.\\n     */\\n    mapping(address minter => uint256 validityStart) public minters;\\n\\n    /**\\n     * @notice List of positions that are allowed to mint and the minter that registered them.\\n     * \\n     * This is not used in the bridged Frankencoins for now, but can be useful once we want to introduce collateralized\\n     * minting like on mainnet.\\n     */\\n    mapping(address position => address registeringMinter) public positions;\\n\\n    uint256 public accruedLoss;\\n    bool public initialized;\\n\\n    event AccountingSynchronized(uint256 profit, uint256 losses);\\n    event MinterApplied(address indexed minter, uint256 applicationPeriod, uint256 applicationFee, string message);\\n    event MinterDenied(address indexed minter, string message);\\n    event Loss(address indexed reportingMinter, uint256 amount);\\n    event Profit(address indexed reportingMinter, uint256 amount);\\n\\n    error PeriodTooShort();\\n    error FeeTooLow();\\n    error AlreadyRegistered();\\n    error NotMinter();\\n    error TooLate();\\n    error AlreadyInitialized();\\n    error InvalidInput();\\n\\n    modifier minterOnly() {\\n        if (!isMinter(msg.sender) && !isMinter(positions[msg.sender])) revert NotMinter();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initiates the Frankencoin with the provided minimum application period for new plugins\\n     * in seconds, for example 10 days, i.e. 3600*24*10 = 864000\\n     */\\n    constructor(IGovernance reserve_, address router_, uint256 _minApplicationPeriod, address _linkToken, uint64 _mainnetChainSelector, address _bridgeAccounting, address _ccipAdmin) ERC20(18) CrossChainReference(router_, _linkToken) {\\n        MIN_APPLICATION_PERIOD = _minApplicationPeriod;\\n        reserve = reserve_;\\n        MAINNET_CHAIN_SELECTOR = _mainnetChainSelector;\\n        BRIDGE_ACCOUNTING = _bridgeAccounting;\\n        CCIP_ADMIN = _ccipAdmin;\\n    }\\n\\n    function name() external pure override returns (string memory) {\\n        return \\\"Frankencoin\\\";\\n    }\\n\\n    function symbol() external pure override returns (string memory) {\\n        return \\\"ZCHF\\\";\\n    }\\n\\n    /// @notice Initializes the bridged Frankencoin token.\\n    /// @dev This function is only callable once.\\n    /// @param _minters List of addresses that are allowed to mint Frankencoins.\\n    /// @param _messages List of messages that are displayed to the user when the minter is applied.\\n    function initialize(address[] calldata _minters, string[] calldata _messages) external {\\n        if (initialized) revert AlreadyInitialized();\\n        if (_minters.length != _messages.length) revert InvalidInput();\\n\\n        for (uint256 i = 0; i < _minters.length; i++) {\\n            minters[_minters[i]] = block.timestamp;\\n            emit MinterApplied(_minters[i], 0, 0, _messages[i]);\\n        }\\n        initialized = true;\\n    }\\n\\n    /**\\n     * @notice Publicly accessible method to suggest a new way of minting Frankencoin.\\n     * @dev The caller has to pay an application fee that is irrevocably lost even if the new minter is vetoed.\\n     * The caller must assume that someone will veto the new minter unless there is broad consensus that the new minter\\n     * adds value to the Frankencoin system. Complex proposals should have application periods and applications fees\\n     * above the minimum. It is assumed that over time, informal ways to coordinate on new minters emerge. The message\\n     * parameter might be useful for initiating further communication. Maybe it contains a link to a website describing\\n     * the proposed minter.\\n     *\\n     * @param _minter              An address that is given the permission to mint Frankencoins\\n     * @param _applicationPeriod   The time others have to veto the suggestion, at least MIN_APPLICATION_PERIOD\\n     * @param _applicationFee      The fee paid by the caller, at least MIN_FEE\\n     * @param _message             An optional human readable message to everyone watching this contract\\n     */\\n    function suggestMinter(address _minter, uint256 _applicationPeriod, uint256 _applicationFee, string calldata _message) external override {\\n        if (_applicationPeriod < MIN_APPLICATION_PERIOD) revert PeriodTooShort();\\n        if (_applicationFee < MIN_FEE) revert FeeTooLow();\\n        if (minters[_minter] != 0) revert AlreadyRegistered();\\n        _collectProfits(address(this), msg.sender, _applicationFee);\\n        minters[_minter] = block.timestamp + _applicationPeriod;\\n        emit MinterApplied(_minter, _applicationPeriod, _applicationFee, _message);\\n    }\\n\\n    /**\\n     * @notice Make the system more user friendly by skipping the allowance in many cases.\\n     * @dev We trust minters and the positions they have created to mint and burn as they please, so\\n     * giving them arbitrary allowances does not pose an additional risk.\\n     */\\n    function _allowance(address owner, address spender) internal view override returns (uint256) {\\n        uint256 explicit = super._allowance(owner, spender);\\n        if (explicit > 0) {\\n            return explicit; // don't waste gas checking minter\\n        } else if (isMinter(spender) || isMinter(getPositionParent(spender)) || spender == address(reserve)) {\\n            return INFINITY;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows minters to register collateralized debt positions, thereby giving them the ability to mint Frankencoins.\\n     * @dev It is assumed that the responsible minter that registers the position ensures that the position can be trusted.\\n     */\\n    function registerPosition(address _position) external override {\\n        if (!isMinter(msg.sender)) revert NotMinter();\\n        positions[_position] = msg.sender;\\n    }\\n\\n    /**\\n     * @notice Qualified pool share holders can deny minters during the application period.\\n     * @dev Calling this function is relatively cheap thanks to the deletion of a storage slot.\\n     */\\n    function denyMinter(address _minter, address[] calldata _helpers, string calldata _message) external override {\\n        if (block.timestamp > minters[_minter]) revert TooLate();\\n        reserve.checkQualified(msg.sender, _helpers);\\n        delete minters[_minter];\\n        emit MinterDenied(_minter, _message);\\n    }\\n\\n    function mint(address _target, uint256 _amount) external override minterOnly {\\n        _mint(_target, _amount);\\n    }\\n\\n    /**\\n     * Anyone is allowed to burn their ZCHF.\\n     */\\n    function burn(uint256 _amount) external {\\n        _burn(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Burn someone elses ZCHF.\\n     */\\n    function burnFrom(address _owner, uint256 _amount) external override minterOnly {\\n        _burn(_owner, _amount);\\n    }\\n\\n    function canMint(address _minterOrPosition) public view returns (bool) {\\n        return isMinter(_minterOrPosition) || isMinter(positions[_minterOrPosition]);\\n    }\\n\\n    /**\\n     * @notice Notify the Frankencoin that a minter lost economic access to some coins. This does not mean that the coins are\\n     * literally lost. It just means that some ZCHF will likely never be repaid and that in order to bring the system\\n     * back into balance, the lost amount of ZCHF must be removed from the reserve instead.\\n     *\\n     * For example, if a minter printed 1 million ZCHF for a mortgage and the mortgage turned out to be unsound with\\n     * the house only yielding 800'000 in the subsequent auction, there is a loss of 200'000 that needs to be covered\\n     * by the reserve.\\n     */\\n    function coverLoss(address source, uint256 _amount) external minterOnly {\\n        uint256 reserveLeft = balanceOf(address(reserve));\\n        if (_amount > reserveLeft) {\\n            accruedLoss += (_amount - reserveLeft);\\n            _mint(address(reserve), _amount - reserveLeft);\\n        }\\n        _transfer(address(reserve), source, _amount);\\n        emit Loss(source, _amount);\\n    }\\n\\n    function collectProfits(address source, uint256 _amount) external override minterOnly {\\n        _collectProfits(msg.sender, source, _amount);\\n    }\\n\\n    function _collectProfits(address minter, address source, uint256 _amount) internal {\\n        _transfer(source, address(reserve), _amount);\\n        if (accruedLoss > _amount) {\\n            accruedLoss -= _amount;\\n            _burn(address(reserve), _amount);\\n        } else if (accruedLoss > 0) {\\n            _burn(address(reserve), accruedLoss);\\n            accruedLoss = 0;\\n        }\\n        emit Profit(minter, _amount);\\n    }\\n\\n    function synchronizeAccounting() public payable {\\n        synchronizeAccounting(\\\"\\\");\\n    }\\n\\n    function synchronizeAccounting(Client.EVMExtraArgsV2 calldata extraArgs) public payable {\\n        synchronizeAccounting(Client._argsToBytes(extraArgs));\\n    }\\n\\n    /**\\n     * Uses a multichain call to send home all accrued profits, if any\\n     */\\n    function synchronizeAccounting(bytes memory extraArgs) public payable {\\n        (uint256 reserveLeft, uint256 _accruedLoss, Client.EVMTokenAmount[] memory tokenAmounts) = getSynchronizeAccountingData();\\n\\n        if (_accruedLoss > 0) {\\n            accruedLoss = 0;\\n        }\\n        if (reserveLeft > 0) {\\n            _transfer(address(reserve), address(this), reserveLeft);\\n            _approve(address(this), address(ROUTER), reserveLeft);\\n        }\\n\\n        Client.EVM2AnyMessage memory message = _constructMessage(_toReceiver(BRIDGE_ACCOUNTING), abi.encode(reserveLeft, _accruedLoss), tokenAmounts, extraArgs);\\n        _send(MAINNET_CHAIN_SELECTOR, message);\\n        emit AccountingSynchronized(reserveLeft, _accruedLoss);\\n    }\\n\\n    /**\\n     * @notice Returns the CCIP fee required to synchronize accounting.\\n     */\\n    function getSynchronizeAccountingFee(bool nativeToken) public view returns (uint256) {\\n        return getSynchronizeAccountingFee(nativeToken, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Returns the CCIP fee required to synchronize accounting.\\n     */\\n    function getSynchronizeAccountingFee(bool nativeToken, bytes memory extraArgs) public view returns (uint256) {\\n        (uint256 reserveLeft, uint256 _accruedLoss, Client.EVMTokenAmount[] memory tokenAmounts) = getSynchronizeAccountingData();\\n        Client.EVM2AnyMessage memory message = _constructMessage(_toReceiver(BRIDGE_ACCOUNTING), abi.encode(reserveLeft, _accruedLoss), tokenAmounts, nativeToken, extraArgs);\\n        return _calculateFee(MAINNET_CHAIN_SELECTOR, message);\\n    }\\n\\n    /**\\n     * @notice Returns the data required to synchronize accounting. Including the tokenAmounts array.\\n     */\\n    function getSynchronizeAccountingData() public view returns (uint256, uint256, Client.EVMTokenAmount[] memory) {\\n        uint256 reserveLeft = balanceOf(address(reserve));\\n        Client.EVMTokenAmount[] memory tokenAmounts = new Client.EVMTokenAmount[](0);\\n        if (reserveLeft > 0) {\\n            tokenAmounts = new Client.EVMTokenAmount[](1);\\n            tokenAmounts[0] = Client.EVMTokenAmount({token: address(this), amount: reserveLeft});\\n        }\\n        return (reserveLeft, accruedLoss, tokenAmounts);\\n    }\\n\\n    /**\\n     * @notice Returns true if the address is an approved minter.\\n     */\\n    function isMinter(address _minter) public view returns (bool) {\\n        return minters[_minter] != 0 && block.timestamp >= minters[_minter];\\n    }\\n\\n    /**\\n     * @notice Returns the address of the minter that created this position or null if the provided address is unknown.\\n     */\\n    function getPositionParent(address _position) public view returns (address) {\\n        return positions[_position];\\n    }\\n\\n    /*\\n     * @notice Used to register the token initially in the CCIP environment\\n     */\\n    function getCCIPAdmin() external view returns (address) {\\n        return CCIP_ADMIN;\\n    }\\n}\\n\",\"keccak256\":\"0x3454bc25797ddd5d7a04a66108ab6ccae2555d6511eef2d3fbf58c388fb91097\",\"license\":\"MIT\"},\"contracts/stablecoin/Frankencoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../erc20/ERC20PermitLight.sol\\\";\\nimport \\\"../equity/IGovernance.sol\\\";\\nimport \\\"../equity/Equity.sol\\\";\\nimport \\\"./IBasicFrankencoin.sol\\\";\\nimport \\\"./IFrankencoin.sol\\\";\\n\\n/**\\n * @title FrankenCoin\\n * @notice The Frankencoin (ZCHF) is an ERC-20 token that is designed to track the value of the Swiss franc.\\n * It is not upgradable, but open to arbitrary minting plugins. These are automatically accepted if none of the\\n * qualified pool share holders casts a veto, leading to a flexible but conservative governance.\\n */\\ncontract Frankencoin is ERC20PermitLight, IFrankencoin {\\n    /**\\n     * @notice Minimal fee and application period when suggesting a new minter.\\n     */\\n    uint256 public constant MIN_FEE = 1000 * (10 ** 18);\\n    uint256 public immutable MIN_APPLICATION_PERIOD; // for example 10 days\\n\\n    /**\\n     * @notice The contract that holds the reserve.\\n     */\\n    IGovernance public immutable override reserve;\\n\\n    /**\\n     * @notice How much of the reserve belongs to the minters. Everything else belongs to the pool share holders.\\n     * Stored with 6 additional digits of accuracy so no rounding is necessary when dealing with parts per\\n     * million (ppm) in reserve calculations.\\n     */\\n    uint256 private minterReserveE6;\\n\\n    /**\\n     * @notice Map of minters to approval time stamps. If the time stamp is in the past, the minter contract is allowed\\n     * to mint Frankencoins.\\n     */\\n    mapping(address minter => uint256 validityStart) public minters;\\n\\n    /**\\n     * @notice List of positions that are allowed to mint and the minter that registered them.\\n     */\\n    mapping(address position => address registeringMinter) public positions;\\n\\n    event MinterApplied(address indexed minter, uint256 applicationPeriod, uint256 applicationFee, string message);\\n    event MinterDenied(address indexed minter, string message);\\n    event Loss(address indexed reportingMinter, uint256 amount);\\n    event Profit(address indexed reportingMinter, uint256 amount);\\n\\n    error PeriodTooShort();\\n    error FeeTooLow();\\n    error AlreadyRegistered();\\n    error NotMinter();\\n    error TooLate();\\n\\n    modifier minterOnly() {\\n        if (!isMinter(msg.sender) && !isMinter(positions[msg.sender])) revert NotMinter();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initiates the Frankencoin with the provided minimum application period for new plugins\\n     * in seconds, for example 10 days, i.e. 3600*24*10 = 864000\\n     */\\n    constructor(uint256 _minApplicationPeriod) ERC20(18) {\\n        MIN_APPLICATION_PERIOD = _minApplicationPeriod;\\n        reserve = new Equity(this);\\n    }\\n\\n    function name() external pure override returns (string memory) {\\n        return \\\"Frankencoin\\\";\\n    }\\n\\n    function symbol() external pure override returns (string memory) {\\n        return \\\"ZCHF\\\";\\n    }\\n\\n    function initialize(address _minter, string calldata _message) external {\\n        require(totalSupply() == 0 && (Equity(address(reserve)).totalSupply() == 0));\\n        minters[_minter] = block.timestamp;\\n        emit MinterApplied(_minter, 0, 0, _message);\\n    }\\n\\n    /**\\n     * @notice Publicly accessible method to suggest a new way of minting Frankencoin.\\n     * @dev The caller has to pay an application fee that is irrevocably lost even if the new minter is vetoed.\\n     * The caller must assume that someone will veto the new minter unless there is broad consensus that the new minter\\n     * adds value to the Frankencoin system. Complex proposals should have application periods and applications fees\\n     * above the minimum. It is assumed that over time, informal ways to coordinate on new minters emerge. The message\\n     * parameter might be useful for initiating further communication. Maybe it contains a link to a website describing\\n     * the proposed minter.\\n     *\\n     * @param _minter              An address that is given the permission to mint Frankencoins\\n     * @param _applicationPeriod   The time others have to veto the suggestion, at least MIN_APPLICATION_PERIOD\\n     * @param _applicationFee      The fee paid by the caller, at least MIN_FEE\\n     * @param _message             An optional human readable message to everyone watching this contract\\n     */\\n    function suggestMinter(\\n        address _minter,\\n        uint256 _applicationPeriod,\\n        uint256 _applicationFee,\\n        string calldata _message\\n    ) external override {\\n        if (_applicationPeriod < MIN_APPLICATION_PERIOD) revert PeriodTooShort();\\n        if (_applicationFee < MIN_FEE) revert FeeTooLow();\\n        if (minters[_minter] != 0) revert AlreadyRegistered();\\n        _collectProfits(address(this), msg.sender, _applicationFee);\\n        minters[_minter] = block.timestamp + _applicationPeriod;\\n        emit MinterApplied(_minter, _applicationPeriod, _applicationFee, _message);\\n    }\\n\\n    /**\\n     * @notice Make the system more user friendly by skipping the allowance in many cases.\\n     * @dev We trust minters and the positions they have created to mint and burn as they please, so\\n     * giving them arbitrary allowances does not pose an additional risk.\\n     */\\n    function _allowance(address owner, address spender) internal view override returns (uint256) {\\n        uint256 explicit = super._allowance(owner, spender);\\n        if (explicit > 0) {\\n            return explicit; // don't waste gas checking minter\\n        } else if (isMinter(spender) || isMinter(getPositionParent(spender)) || spender == address(reserve)) {\\n            return INFINITY;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice The reserve provided by the owners of collateralized positions.\\n     * @dev The minter reserve can be used to cover losses after the equity holders have been wiped out.\\n     */\\n    function minterReserve() public view returns (uint256) {\\n        return minterReserveE6 / 1000000;\\n    }\\n\\n    /**\\n     * @notice Allows minters to register collateralized debt positions, thereby giving them the ability to mint Frankencoins.\\n     * @dev It is assumed that the responsible minter that registers the position ensures that the position can be trusted.\\n     */\\n    function registerPosition(address _position) external override {\\n        if (!isMinter(msg.sender)) revert NotMinter();\\n        positions[_position] = msg.sender;\\n    }\\n\\n    /**\\n     * @notice The amount of equity of the Frankencoin system in ZCHF, owned by the holders of Frankencoin Pool Shares.\\n     * @dev Note that the equity contract technically holds both the minter reserve as well as the equity, so the minter\\n     * reserve must be subtracted. All fees and other kind of income is added to the Equity contract and essentially\\n     * constitutes profits attributable to the pool share holders.\\n     */\\n    function equity() public view returns (uint256) {\\n        uint256 balance = balanceOf(address(reserve));\\n        uint256 minReserve = minterReserve();\\n        if (balance <= minReserve) {\\n            return 0;\\n        } else {\\n            return balance - minReserve;\\n        }\\n    }\\n\\n    /**\\n     * @notice Qualified pool share holders can deny minters during the application period.\\n     * @dev Calling this function is relatively cheap thanks to the deletion of a storage slot.\\n     */\\n    function denyMinter(address _minter, address[] calldata _helpers, string calldata _message) external override {\\n        if (block.timestamp > minters[_minter]) revert TooLate();\\n        reserve.checkQualified(msg.sender, _helpers);\\n        delete minters[_minter];\\n        emit MinterDenied(_minter, _message);\\n    }\\n\\n    /**\\n     * @notice Mints the provided amount of ZCHF to the target address, automatically forwarding\\n     * the minting fee and the reserve to the right place.\\n     */\\n    function mintWithReserve(\\n        address _target,\\n        uint256 _amount,\\n        uint32 _reservePPM,\\n        uint32 _feesPPM\\n    ) external override minterOnly {\\n        uint256 usableMint = (_amount * (1000_000 - _feesPPM - _reservePPM)) / 1000_000; // rounding down is fine\\n        _mint(_target, usableMint);\\n        _mint(address(reserve), _amount - usableMint); // rest goes to equity as reserves or as fees\\n        minterReserveE6 += _amount * _reservePPM;\\n        emit Profit(msg.sender, (_feesPPM * _amount) / 1000_000);\\n    }\\n\\n    function mint(address _target, uint256 _amount) external override minterOnly {\\n        _mint(_target, _amount);\\n    }\\n\\n    /**\\n     * Anyone is allowed to burn their ZCHF.\\n     */\\n    function burn(uint256 _amount) external {\\n        _burn(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Burn someone elses ZCHF.\\n     */\\n    function burnFrom(address _owner, uint256 _amount) external override minterOnly {\\n        _burn(_owner, _amount);\\n    }\\n\\n    /**\\n     * @notice Burn that amount without reclaiming the reserve, but freeing it up and thereby essentially donating it to the\\n     * pool share holders. This can make sense in combination with 'coverLoss', i.e. when it is the pool share\\n     * holders that bear the risk and depending on the outcome they make a profit or a loss.\\n     *\\n     * Design rule: Minters calling this method are only allowed to so for tokens amounts they previously minted with\\n     * the same _reservePPM amount.\\n     *\\n     * For example, if someone minted 50 ZCHF earlier with a 20% reserve requirement (200000 ppm), they got 40 ZCHF\\n     * and paid 10 ZCHF into the reserve. Now they want to repay the debt by burning 50 ZCHF. When doing so using this\\n     * method, 50 ZCHF get burned and on top of that, 10 ZCHF previously assigned to the minter's reserved are\\n     * reassigned to the pool share holders.\\n     *\\n     * CS-ZCHF2-009: the Profit event can overstate profits in case there is no equity capital left.\\n     */\\n    function burnWithoutReserve(uint256 amount, uint32 reservePPM) public override minterOnly {\\n        _burn(msg.sender, amount);\\n        uint256 reserveReduction = amount * reservePPM;\\n        if (reserveReduction > minterReserveE6) {\\n            emit Profit(msg.sender, minterReserveE6 / 1000_000);\\n            minterReserveE6 = 0; // should never happen, but we want robust behavior in case it does\\n        } else {\\n            minterReserveE6 -= reserveReduction;\\n            emit Profit(msg.sender, reserveReduction / 1000_000);\\n        }\\n    }\\n\\n    /**\\n     * @notice Burns the provided number of tokens plus whatever reserves are associated with that amount given the reserve\\n     * requirement. The caller is only allowed to use this method for tokens also minted through the caller with the\\n     * same _reservePPM amount.\\n     *\\n     * Example: the calling contract has previously minted 100 ZCHF with a reserve ratio of 20% (i.e. 200000 ppm).\\n     * Now they have 41 ZCHF that they do not need so they decide to repay that amount. Assuming the reserves are\\n     * only 90% covered, the call to burnWithReserve will burn the 41 plus 9 from the reserve, reducing the outstanding\\n     * 'debt' of the caller by 50 ZCHF in total. This total is returned by the method so the caller knows how much less\\n     * they owe.\\n     */\\n    function burnWithReserve(\\n        uint256 _amountExcludingReserve,\\n        uint32 _reservePPM\\n    ) external override minterOnly returns (uint256) {\\n        uint256 freedAmount = calculateFreedAmount(_amountExcludingReserve, _reservePPM); // 50 in the example\\n        minterReserveE6 -= freedAmount * _reservePPM; // reduce reserve requirements by original ratio\\n        _transfer(address(reserve), msg.sender, freedAmount - _amountExcludingReserve); // collect assigned reserve\\n        _burn(msg.sender, freedAmount); // burn the rest of the freed amount\\n        return freedAmount;\\n    }\\n\\n    /**\\n     * @notice Burns the target amount taking the tokens to be burned from the payer and the payer's reserve.\\n     * Only use this method for tokens also minted by the caller with the same _reservePPM.\\n     *\\n     * Example: the calling contract has previously minted 100 ZCHF with a reserve ratio of 20% (i.e. 200000 ppm).\\n     * To burn half of that again, the minter calls burnFrom with a target amount of 50 ZCHF. Assuming that reserves\\n     * are only 90% covered, this call will deduct 41 ZCHF from the payer's balance and 9 from the reserve, while\\n     * reducing the minter reserve by 10.\\n     */\\n    function burnFromWithReserve(\\n        address payer,\\n        uint256 targetTotalBurnAmount,\\n        uint32 reservePPM\\n    ) external override minterOnly returns (uint256) {\\n        uint256 assigned = calculateAssignedReserve(targetTotalBurnAmount, reservePPM);\\n        _transfer(address(reserve), payer, assigned); // send reserve to owner\\n        _burn(payer, targetTotalBurnAmount); // and burn the full amount from the owner's address\\n        minterReserveE6 -= targetTotalBurnAmount * reservePPM; // reduce reserve requirements by original ratio\\n        return assigned;\\n    }\\n\\n    /**\\n     * @notice Calculates the reserve attributable to someone who minted the given amount with the given reserve requirement.\\n     * Under normal circumstances, this is just the reserve requirement multiplied by the amount. However, after a\\n     * severe loss of capital that burned into the minter's reserve, this can also be less than that.\\n     */\\n    function calculateAssignedReserve(uint256 mintedAmount, uint32 _reservePPM) public view returns (uint256) {\\n        uint256 theoreticalReserve = (_reservePPM * mintedAmount) / 1000000;\\n        uint256 currentReserve = balanceOf(address(reserve));\\n        uint256 minterReserve_ = minterReserve();\\n        if (currentReserve < minterReserve_) {\\n            // not enough reserves, owner has to take a loss\\n            return (theoreticalReserve * currentReserve) / minterReserve_;\\n        } else {\\n            return theoreticalReserve;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate the amount that is freed when returning amountExcludingReserve given a reserve ratio of reservePPM,\\n     * taking into account potential losses. Example values in the comments.\\n     */\\n    function calculateFreedAmount(\\n        uint256 amountExcludingReserve /* 41 */,\\n        uint32 reservePPM /* 20% */\\n    ) public view returns (uint256) {\\n        uint256 currentReserve = balanceOf(address(reserve)); // 18, 10% below what we should have\\n        uint256 minterReserve_ = minterReserve(); // 20\\n        uint256 adjustedReservePPM = currentReserve < minterReserve_\\n            ? (reservePPM * currentReserve) / minterReserve_\\n            : reservePPM; // 18%\\n        return (1000000 * amountExcludingReserve) / (1000000 - adjustedReservePPM); // 41 / (1-18%) = 50\\n    }\\n\\n    /**\\n     * @notice Notify the Frankencoin that a minter lost economic access to some coins. This does not mean that the coins are\\n     * literally lost. It just means that some ZCHF will likely never be repaid and that in order to bring the system\\n     * back into balance, the lost amount of ZCHF must be removed from the reserve instead.\\n     *\\n     * For example, if a minter printed 1 million ZCHF for a mortgage and the mortgage turned out to be unsound with\\n     * the house only yielding 800'000 in the subsequent auction, there is a loss of 200'000 that needs to be covered\\n     * by the reserve.\\n     */\\n    function coverLoss(address source, uint256 _amount) external override minterOnly {\\n        uint256 reserveLeft = balanceOf(address(reserve));\\n        if (reserveLeft >= _amount) {\\n            _transfer(address(reserve), source, _amount);\\n        } else {\\n            _transfer(address(reserve), source, reserveLeft);\\n            _mint(source, _amount - reserveLeft);\\n        }\\n        emit Loss(source, _amount);\\n    }\\n\\n    function collectProfits(address source, uint256 _amount) external override minterOnly {\\n        _collectProfits(msg.sender, source, _amount);\\n    }\\n\\n    function _collectProfits(address minter, address source, uint256 _amount) internal {\\n        _transfer(source, address(reserve), _amount);\\n        emit Profit(minter, _amount);\\n    }\\n\\n    /**\\n     * @notice Returns true if the address is an approved minter.\\n     */\\n    function isMinter(address _minter) public view override returns (bool) {\\n        return minters[_minter] != 0 && block.timestamp >= minters[_minter];\\n    }\\n\\n    /**\\n     * @notice Returns the address of the minter that created this position or null if the provided address is unknown.\\n     */\\n    function getPositionParent(address _position) public view override returns (address) {\\n        return positions[_position];\\n    }\\n}\\n\",\"keccak256\":\"0xb52e4fa8c43a189355d6cd039a090846c0b9256cb2aac6b03f7c13557bd15f85\",\"license\":\"MIT\"},\"contracts/stablecoin/IBasicFrankencoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../erc20/IERC20.sol\\\";\\nimport \\\"../equity/IGovernance.sol\\\";\\n\\ninterface IBasicFrankencoin is IERC20 {\\n    function MIN_FEE() external view returns (uint256);\\n\\n    function MIN_APPLICATION_PERIOD() external view returns (uint256);\\n\\n    function suggestMinter(\\n        address _minter,\\n        uint256 _applicationPeriod,\\n        uint256 _applicationFee,\\n        string calldata _message\\n    ) external;\\n\\n    function registerPosition(address position) external;\\n\\n    function denyMinter(address minter, address[] calldata helpers, string calldata message) external;\\n\\n    function reserve() external view returns (IGovernance);\\n\\n    function isMinter(address minter) external view returns (bool);\\n\\n    function getPositionParent(address position) external view returns (address);\\n\\n    function mint(address target, uint256 amount) external;\\n\\n    function burnFrom(address target, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function coverLoss(address source, uint256 amount) external;\\n\\n    function collectProfits(address source, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x2e7f3ccc4cae591a78b6b581b3597ad8df757648ce6b8830d4b23fbae83a82d8\",\"license\":\"MIT\"},\"contracts/stablecoin/IFrankencoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../equity/IGovernance.sol\\\";\\nimport \\\"./IBasicFrankencoin.sol\\\";\\n\\ninterface IFrankencoin is IBasicFrankencoin {\\n\\n    function minterReserve() external view returns (uint256);\\n\\n    function calculateAssignedReserve(uint256 mintedAmount, uint32 _reservePPM) external view returns (uint256);\\n\\n    function calculateFreedAmount(uint256 amountExcludingReserve, uint32 reservePPM) external view returns (uint256);\\n\\n    function equity() external view returns (uint256);\\n\\n    function mintWithReserve(address target, uint256 amount, uint32 reservePPM, uint32 feePPM) external;\\n\\n    function burnWithoutReserve(uint256 amountIncludingReserve, uint32 reservePPM) external;\\n\\n    function burnFromWithReserve(address payer, uint256 targetTotalBurnAmount, uint32 _reservePPM) external returns (uint256);\\n\\n    function burnWithReserve(uint256 amountExcludingReserve, uint32 reservePPM) external returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x1bef5a918d494b19b450eac742b78726a0908045bcde24b17979b04eb9bab500\",\"license\":\"MIT\"},\"contracts/utils/MathUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Functions for share valuation\\n */\\ncontract MathUtil {\\n    uint256 internal constant ONE_DEC18 = 10 ** 18;\\n\\n    // Let's go for 12 digits of precision (18-6)\\n    uint256 internal constant THRESH_DEC18 = 10 ** 6;\\n\\n    /**\\n     * @notice Cubic root with Halley approximation\\n     *         Number 1e18 decimal\\n     * @param _v     number for which we calculate x**(1/3)\\n     * @return returns _v**(1/3)\\n     */\\n    function _cubicRoot(uint256 _v) internal pure returns (uint256) {\\n        // Good first guess for _v slightly above 1.0, which is often the case in the Frankencoin system\\n        uint256 x = _v > ONE_DEC18 && _v < 10 ** 19 ? (_v - ONE_DEC18) / 3 + ONE_DEC18 : ONE_DEC18;\\n        uint256 diff;\\n        do {\\n            uint256 powX3 = _mulD18(_mulD18(x, x), x);\\n            uint256 xnew = x * (powX3 + 2 * _v) / (2 * powX3 + _v);\\n            diff = xnew > x ? xnew - x : x - xnew;\\n            x = xnew;\\n        } while (diff > THRESH_DEC18);\\n        return x;\\n    }\\n\\n    function _mulD18(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a * _b) / ONE_DEC18;\\n    }\\n\\n    function _divD18(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a * ONE_DEC18) / _b;\\n    }\\n\\n    function _power3(uint256 _x) internal pure returns (uint256) {\\n        return _mulD18(_mulD18(_x, _x), _x);\\n    }\\n\\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0xb0632ee609697eb1b9dcc33645d3d36260605df7baf3cf66a611a3c39f5d7521\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200ac403803806200ac40833981016040819052620000349162000a4d565b818360000151826000015185604001518660200151856020015186604001516040516200006190620005ba565b6001600160a01b0397881681529587166020870152604086019490945291851660608501526001600160401b03166080840152831660a083015290911660c082015260e001604051809103906000f080158015620000c3573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b039290921691821790556060840151604051909190620000f990620005c8565b6001600160a01b03928316815291166020820152604001604051809103906000f0801580156200012d573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b039283169081179091556040830151909116146200019357600154604082810151905163013b89ed60e61b81526001600160a01b0392831660048201529116602482015260440160405180910390fd5b6040805160008082526020808301808552915463313ce56760e01b909252925191926001600160a01b0390911691829163313ce5679160248087019291908188030181865afa158015620001eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000211919062000b5a565b82866080015187600001516040516200022a90620005d6565b6200023a95949392919062000bcd565b604051809103906000f08015801562000257573d6000803e3d6000fd5b50600280546001600160a01b0319166001600160a01b0392831690811790915560015460405163f2fde38b60e01b8152921660048301529063f2fde38b90602401600060405180830381600087803b158015620002b357600080fd5b505af1158015620002c8573d6000803e3d6000fd5b50505050604051620002da90620005e4565b604051809103906000f080158015620002f7573d6000803e3d6000fd5b50600380546001600160a01b0319166001600160a01b0392909216919091179055604080516002808252606082018352600092602083019080368337505060025482519293506001600160a01b0316918391506000906200035c576200035c62000c14565b6001600160a01b03928316602091820292909201015260035482519116908290600190811062000390576200039062000c14565b6001600160a01b03929092166020928302919091019091015260408051600280825260608201909252600091816020015b6060815260200190600190039081620003c157905050905060405180604001604052806011815260200170109d5c9b935a5b9d151bdad95b941bdbdb607a1b8152508160008151811062000419576200041962000c14565b60200260200101819052506040518060400160405280600a8152602001692a32b9ba26b4b73a32b960b11b815250816001815181106200045d576200045d62000c14565b6020908102919091010152600054604051637021b42160e11b81526001600160a01b039091169063e0436842906200049c908590859060040162000c58565b600060405180830381600087803b158015620004b757600080fd5b505af1158015620004cc573d6000803e3d6000fd5b505060035460005460405163ee1fe2ad60e01b81526001600160a01b0391821660048201523360248201529116925063ee1fe2ad9150604401600060405180830381600087803b1580156200052057600080fd5b505af115801562000535573d6000803e3d6000fd5b505060015460a089015160025460c08b01516040516379124c1160e11b81526001600160a01b03948516965063f224982295506200057a949092169160040162000cd0565b600060405180830381600087803b1580156200059557600080fd5b505af1158015620005aa573d6000803e3d6000fd5b5050505050505050505062000e40565b613a338062000f3483390190565b61235d806200496783390190565b613da58062006cc483390190565b6101d7806200aa6983390190565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156200062d576200062d620005f2565b60405290565b60405160a081016001600160401b03811182821017156200062d576200062d620005f2565b60405160e081016001600160401b03811182821017156200062d576200062d620005f2565b604051601f8201601f191681016001600160401b0381118282101715620006a857620006a8620005f2565b604052919050565b6001600160a01b0381168114620006c657600080fd5b50565b8051620006d681620006b0565b919050565b80516001600160401b0381168114620006d657600080fd5b60006001600160401b038211156200070f576200070f620005f2565b5060051b60200190565b60005b83811015620007365781810151838201526020016200071c565b50506000910152565b600082601f8301126200075157600080fd5b81516001600160401b038111156200076d576200076d620005f2565b62000782601f8201601f19166020016200067d565b8181528460208386010111156200079857600080fd5b620007ab82602083016020870162000719565b949350505050565b80516001600160801b0381168114620006d657600080fd5b600060608284031215620007de57600080fd5b620007e862000608565b905081518015158114620007fb57600080fd5b81526200080b60208301620007b3565b60208201526200081e60408301620007b3565b604082015292915050565b600082601f8301126200083b57600080fd5b8151620008526200084c82620006f3565b6200067d565b808282526020820191508560208460051b87010111156200087257600080fd5b602085015b60208460051b870101811015620009fb5780516001600160401b038111156200089f57600080fd5b8601610120818903601f19011215620008b757600080fd5b620008c162000633565b620008cf60208301620006db565b815260408201516001600160401b03811115620008eb57600080fd5b89603f8285010112620008fd57600080fd5b60208184010151620009136200084c82620006f3565b808282526020820191508c60408460051b868901010111156200093557600080fd5b6040848701015b60408460051b8689010101811015620009895780516001600160401b038111156200096657600080fd5b620009798f604083898c0101016200073f565b845250602092830192016200093c565b50602085015250505060608201516001600160401b03811115620009ac57600080fd5b620009bd8a6020838601016200073f565b604083015250620009d28960808401620007cb565b6060820152620009e68960e08401620007cb565b60808201528452506020928301920162000877565b5095945050505050565b60006060828403121562000a1857600080fd5b62000a2262000608565b905081518152602082015162000a3881620006b0565b602082015260408201516200081e81620006b0565b600080600060a0848603121562000a6357600080fd5b83516001600160401b038082111562000a7b57600080fd5b9085019060e0828803121562000a9057600080fd5b62000a9a62000658565b62000aa583620006c9565b815262000ab560208401620006db565b602082015262000ac860408401620006c9565b604082015262000adb60608401620006c9565b606082015262000aee60808401620006c9565b608082015262000b0160a08401620006c9565b60a082015260c08301518281111562000b1957600080fd5b62000b278982860162000829565b60c083015250945062000b4091505060208501620006c9565b915062000b51856040860162000a05565b90509250925092565b60006020828403121562000b6d57600080fd5b815160ff8116811462000b7f57600080fd5b9392505050565b60008151808452602080850194506020840160005b8381101562000bc25781516001600160a01b03168752958201959082019060010162000b9b565b509495945050505050565b600060018060a01b03808816835260ff8716602084015260a0604084015262000bfa60a084018762000b86565b948116606084015292909216608090910152509392505050565b634e487b7160e01b600052603260045260246000fd5b6000815180845262000c4481602086016020860162000719565b601f01601f19169290920160200192915050565b60408152600062000c6d604083018562000b86565b6020838203818501528185518084528284019150828160051b85010183880160005b8381101562000cc157601f1987840301855262000cae83835162000c2a565b9486019492509085019060010162000c8f565b50909998505050505050505050565b6001600160a01b03848116825283166020808301919091526060604080840182905284518483018190526000936080929183870190600581811b890186018a850189805b8581101562000e2c578c8403607f19018752825180516001600160401b03168552888101516101208a8701819052815190870181905261014080880192828a1b890190910191908c0190865b8181101562000d935761013f198a850301855262000d8084845162000c2a565b948e01949350918d019160010162000d60565b5050508b83015191508681038c88015262000daf818362000c2a565b9150508c82015162000de88e8801828051151582526020808201516001600160801b039081169184019190915260409182015116910152565b50908b01518051151560c087015260208101516001600160801b0390811660e088015260408201511661010087015290978901979450509187019160010162000d14565b50919e9d5050505050505050505050505050565b60e58062000e4f6000396000f3fe6080604052348015600f57600080fd5b506004361060465760003560e01c8063104e992914604b57806328b41bc91460795780637412af7014608b578063f63ce79514609d575b600080fd5b600254605d906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b600054605d906001600160a01b031681565b600354605d906001600160a01b031681565b600154605d906001600160a01b03168156fea2646970667358221220460d334dc447615a5e187e7ecc9c730615ca15ee3eb19535cd5809e33a5cfce564736f6c634300081800336101806040523480156200001257600080fd5b5060405162003a3338038062003a33833981016040819052620000359162000094565b60126080526001600160a01b0395861660a05292851660c05260e093909352938316610160526001600160401b039093166101205281166101005216610140526200013e565b6001600160a01b03811681146200009157600080fd5b50565b600080600080600080600060e0888a031215620000b057600080fd5b8751620000bd816200007b565b6020890151909750620000d0816200007b565b604089015160608a01519197509550620000ea816200007b565b60808901519094506001600160401b03811681146200010857600080fd5b60a08901519093506200011b816200007b565b60c08901519092506200012e816200007b565b8091505092959891949750929550565b60805160a05160c05160e051610100516101205161014051610160516137e06200025360003960008181610a56015281816111e9015281816113e70152818161169f015281816117040152818161173701528181611af90152818161274401528181612790015281816127c701526128e601526000818161044701526108270152600081816109b701528181610fa4015261149701526000818161087d01528181610f4e01526114420152600081816104d7015261154201526000818161052b0152818161266a01526129420152600081816105c501528181610dd60152818161141301528181611cd6015281816122f80152818161238d0152818161255201526126c60152600061057f01526137e06000f3fe6080604052600436106103765760003560e01c806379cc6790116101d1578063c2ba474411610102578063d1fa5e98116100a0578063e0fb2f781161006f578063e0fb2f7814610b33578063eca79fef14610b57578063f46eccc414610b77578063f507469014610ba457600080fd5b8063d1fa5e9814610ab3578063d505accf14610ad3578063dd62ed3e14610af3578063e043684214610b1357600080fd5b8063cd3293de116100dc578063cd3293de14610a44578063d15dcd6214610a78578063d1975e6a14610a8b578063d1a15ff114610a9357600080fd5b8063c2ba4744146109f1578063c3ccc9ef14610a11578063c6fede7d14610a3157600080fd5b80639b404da61161016f578063aa271e1a11610149578063aa271e1a1461092c578063aa5dd7f11461094c578063b52c696d14610985578063c038e298146109a557600080fd5b80639b404da6146108cc5780639f3b3ea3146108ec578063a9059cbb1461090c57600080fd5b80638fd6a6ac116101ab5780638fd6a6ac14610818578063912fa6161461084b57806394b936901461086b57806395d89b411461089f57600080fd5b806379cc6790146107ab5780637ecebe00146107cb578063809eb368146107f857600080fd5b80633644e515116102ab578063604248ab116102495780636ebdb8ee116102235780636ebdb8ee1461071857806370a0823114610738578063737079811461076e57806376c7a3c71461078e57600080fd5b8063604248ab146106c5578063642884df146106e55780636b2242e11461070557600080fd5b806352d48abe1161028557806352d48abe1461063c57806353c521e61461064f57806355f575101461066f57806356b8c724146106a557600080fd5b80633644e515146105e757806340c10f19146105fc57806342966c681461061c57600080fd5b806319e3c428116103185780631b6b6d23116102f25780631b6b6d231461051957806323b872dd1461054d578063313ce5671461056d57806332fe7b26146105b357600080fd5b806319e3c428146104b05780631a46c7e9146104c55780631af716ba146104f957600080fd5b806310f9c77e1161035457806310f9c77e146104155780631183801014610435578063158ef93e1461048157806318160ddd1461049b57600080fd5b806306fdde031461037b578063095ea7b3146103c15780630e57bc7d146103f1575b600080fd5b34801561038757600080fd5b5060408051808201909152600b81526a233930b735b2b731b7b4b760a91b60208201525b6040516103b891906129f2565b60405180910390f35b3480156103cd57600080fd5b506103e16103dc366004612a21565b610bc4565b60405190151581526020016103b8565b3480156103fd57600080fd5b5061040760065481565b6040519081526020016103b8565b34801561042157600080fd5b506103e1610430366004612b45565b610bdb565b34801561044157600080fd5b506104697f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016103b8565b34801561048d57600080fd5b506007546103e19060ff1681565b3480156104a757600080fd5b50600254610407565b6104c36104be366004612c05565b610bf9565b005b3480156104d157600080fd5b506104077f000000000000000000000000000000000000000000000000000000000000000081565b34801561050557600080fd5b506103e1610514366004612c53565b610c69565b34801561052557600080fd5b506104697f000000000000000000000000000000000000000000000000000000000000000081565b34801561055957600080fd5b506103e1610568366004612cc1565b610cdc565b34801561057957600080fd5b506105a17f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020016103b8565b3480156105bf57600080fd5b506104697f000000000000000000000000000000000000000000000000000000000000000081565b3480156105f357600080fd5b50610407610cfe565b34801561060857600080fd5b506104c3610617366004612a21565b610d57565b34801561062857600080fd5b506104c3610637366004612cfd565b610db8565b6104c361064a366004612d16565b610dc5565b34801561065b57600080fd5b5061040761066a366004612da1565b610e70565b34801561067b57600080fd5b5061046961068a366004612df0565b6005602052600090815260409020546001600160a01b031681565b3480156106b157600080fd5b506103e16106c0366004612e0b565b610e9f565b3480156106d157600080fd5b506103e16106e0366004612e64565b610f06565b3480156106f157600080fd5b50610407610700366004612f1d565b610f30565b6104c3610713366004612f6c565b610fd4565b34801561072457600080fd5b506104c3610733366004612a21565b610fe9565b34801561074457600080fd5b50610407610753366004612df0565b6001600160a01b031660009081526020819052604090205490565b34801561077a57600080fd5b506103e1610789366004612f88565b611047565b34801561079a57600080fd5b50610407683635c9adc5dea0000081565b3480156107b757600080fd5b506104c36107c6366004612a21565b611070565b3480156107d757600080fd5b506104076107e6366004612df0565b60036020526000908152604090205481565b34801561080457600080fd5b506103e1610813366004612ff5565b6110cd565b34801561082457600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610469565b34801561085757600080fd5b50610407610866366004613055565b6110f5565b34801561087757600080fd5b506104697f000000000000000000000000000000000000000000000000000000000000000081565b3480156108ab57600080fd5b506040805180820190915260048152632d21a42360e11b60208201526103ab565b3480156108d857600080fd5b506104c36108e736600461312b565b611199565b3480156108f857600080fd5b5061040761090736600461319a565b6112ae565b34801561091857600080fd5b506103e1610927366004612a21565b6112cf565b34801561093857600080fd5b506103e1610947366004612df0565b6112dc565b34801561095857600080fd5b50610469610967366004612df0565b6001600160a01b039081166000908152600560205260409020541690565b34801561099157600080fd5b506104c36109a0366004612df0565b61131d565b3480156109b157600080fd5b506109d97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160401b0390911681526020016103b8565b3480156109fd57600080fd5b506103e1610a0c366004612df0565b61136c565b348015610a1d57600080fd5b50610407610a2c366004613207565b6113a1565b6104c3610a3f366004613224565b6113bc565b348015610a5057600080fd5b506104697f000000000000000000000000000000000000000000000000000000000000000081565b6104c3610a86366004613260565b6114fe565b6104c3611526565b348015610a9f57600080fd5b506104c3610aae36600461327e565b611540565b348015610abf57600080fd5b506104c3610ace366004612a21565b61164a565b348015610adf57600080fd5b506104c3610aee3660046132c8565b6117a5565b348015610aff57600080fd5b50610407610b0e36600461333b565b61199a565b348015610b1f57600080fd5b506104c3610b2e36600461336e565b6119ad565b348015610b3f57600080fd5b50610b48611aed565b6040516103b89392919061341d565b348015610b6357600080fd5b506103e1610b7236600461343c565b611c06565b348015610b8357600080fd5b50610407610b92366004612df0565b60046020526000908152604090205481565b348015610bb057600080fd5b506103e1610bbf36600461345d565b611c2d565b6000610bd1338484611c63565b5060015b92915050565b6000610bec87338888888888611cc5565b5060019695505050505050565b610c6384610c0685611d7c565b8461064a610c19368790038701876134da565b6040805182516024820152602092830151151560448083019190915282518083039091018152606490910190915290810180516001600160e01b0316630181dcf160e41b17905290565b50505050565b6000610c76863386611da9565b610c81868686611e11565b846001600160a01b0316866001600160a01b03167fcd6e659e4c2e75c3bfe47fecaccf39aeb368116a0ee52afb532e07f6cba6c0d1868686604051610cc893929190613558565b60405180910390a350600195945050505050565b6000610ce9848484611e11565b610cf4843384611da9565b5060019392505050565b604080517f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692186020820152469181019190915230606082015260009060800160405160208183030381529060405280519060200120905090565b610d60336112dc565b158015610d8c575033600090815260056020526040902054610d8a906001600160a01b03166112dc565b155b15610daa57604051633e34a41b60e21b815260040160405180910390fd5b610db48282611f28565b5050565b610dc23382611fc5565b50565b610dd0333084611e11565b610dfb307f000000000000000000000000000000000000000000000000000000000000000084611c63565b610e0f84610e0a858585612047565b6120e6565b505082604051610e1f9190613572565b604080519182900382206001600160401b0387168352602083018590529133917f7895812be6b9a01617f760055105f506b5e2f6dff79ff3170e4fdb3391fc0023910160405180910390a350505050565b6000610e9685610e7f86611d7c565b8585604051806020016040528060008152506110f5565b95945050505050565b6000610eac338686611e11565b846001600160a01b0316336001600160a01b03167fcd6e659e4c2e75c3bfe47fecaccf39aeb368116a0ee52afb532e07f6cba6c0d1868686604051610ef393929190613558565b60405180910390a3506001949350505050565b6000610f13873387611da9565b610f2288888888888888611cc5565b506001979650505050505050565b600080600080610f3e611aed565b9250925092506000610f9d610f727f0000000000000000000000000000000000000000000000000000000000000000611d7c565b6040805160208101889052908101869052606001604051602081830303815290604052848a8a61263e565b9050610fc97f0000000000000000000000000000000000000000000000000000000000000000826126ac565b979650505050505050565b610dc2610a3f610c19368490038401846134da565b610ff2336112dc565b15801561101e57503360009081526005602052604090205461101c906001600160a01b03166112dc565b155b1561103c57604051633e34a41b60e21b815260040160405180910390fd5b610db433838361273e565b6000610fc98761105688611d7c565b87611069610c19368a90038a018a6134da565b8787610bdb565b611079336112dc565b1580156110a55750336000908152600560205260409020546110a3906001600160a01b03166112dc565b155b156110c357604051633e34a41b60e21b815260040160405180910390fd5b610db48282611fc5565b6000610fc987876110dd88611d7c565b87604051806020016040528060008152508888610f06565b604080516001808252818301909252600091829190816020015b604080518082019091526000808252602082015281526020019060019003908161110f5790505090506040518060400160405280306001600160a01b0316815260200186815250816000815181106111695761116961358e565b6020026020010181905250610fc987611194886040518060200160405280600081525085898961263e565b6126ac565b6001600160a01b0385166000908152600460205260409020544211156111d25760405163ecdd1c2960e01b815260040160405180910390fd5b60405163352e3a8360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063352e3a8390611222903390889088906004016135a4565b60006040518083038186803b15801561123a57600080fd5b505afa15801561124e573d6000803e3d6000fd5b505050506001600160a01b03851660008181526004602052604080822091909155517fd60c86e83346fdbe3124cb7d1cba32973a9f62d05c4ec801bfe6c09d103803819061129f90859085906135fe565b60405180910390a25050505050565b60006112c5866112bd87611d7c565b8686866110f5565b9695505050505050565b6000610bd1338484611e11565b6001600160a01b03811660009081526004602052604081205415801590610bd55750506001600160a01b031660009081526004602052604090205442101590565b611326336112dc565b61134357604051633e34a41b60e21b815260040160405180910390fd5b6001600160a01b0316600090815260056020526040902080546001600160a01b03191633179055565b6000611377826112dc565b80610bd557506001600160a01b03808316600090815260056020526040902054610bd591166112dc565b6000610bd58260405180602001604052806000815250610f30565b60008060006113c9611aed565b9194509250905081156113dc5760006006555b82156114385761140d7f00000000000000000000000000000000000000000000000000000000000000003085611e11565b611438307f000000000000000000000000000000000000000000000000000000000000000085611c63565b60006114906114667f0000000000000000000000000000000000000000000000000000000000000000611d7c565b6040805160208101889052908101869052606001604051602081830303815290604052848861282f565b90506114bc7f0000000000000000000000000000000000000000000000000000000000000000826120e6565b505060408051858152602081018590527f780ad21fb95421fd83047aa9bb3506c2aea4c8d383daa4476e66d56606632dc2910160405180910390a15050505050565b6115218361150b84611d7c565b8360405180602001604052806000815250610dc5565b505050565b61153e604051806020016040528060008152506113bc565b565b7f000000000000000000000000000000000000000000000000000000000000000084101561158157604051631260d0af60e31b815260040160405180910390fd5b683635c9adc5dea000008310156115ab5760405163732f941360e01b815260040160405180910390fd5b6001600160a01b038516600090815260046020526040902054156115e257604051630ea075bf60e21b815260040160405180910390fd5b6115ed30338561273e565b6115f78442613628565b6001600160a01b038616600081815260046020526040908190209290925590517f97326258efdae63280617ca33884e507791c2abeed7b82acd77f1853394ef94b9061129f90879087908790879061363b565b611653336112dc565b15801561167f57503360009081526005602052604090205461167d906001600160a01b03166112dc565b155b1561169d57604051633e34a41b60e21b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660009081526020819052604090205480821115611732576116e8818361365b565b600660008282546116f99190613628565b9091555061173290507f000000000000000000000000000000000000000000000000000000000000000061172d838561365b565b611f28565b61175d7f00000000000000000000000000000000000000000000000000000000000000008484611e11565b826001600160a01b03167f72fba0ba07d937c660a3130fca36005c0e476cb97b6f00de413976e37eba95018360405161179891815260200190565b60405180910390a2505050565b428410156117fa5760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f4558504952454400000000000000000060448201526064015b60405180910390fd5b60006001611806610cfe565b6001600160a01b038a811660008181526003602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015611912573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906119485750876001600160a01b0316816001600160a01b0316145b6119855760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b60448201526064016117f1565b611990818888611c63565b5050505050505050565b60006119a68383612876565b9392505050565b60075460ff16156119d05760405162dc149f60e41b815260040160405180910390fd5b8281146119f05760405163b4fa3fb360e01b815260040160405180910390fd5b60005b83811015611ad9574260046000878785818110611a1257611a1261358e565b9050602002016020810190611a279190612df0565b6001600160a01b03168152602081019190915260400160002055848482818110611a5357611a5361358e565b9050602002016020810190611a689190612df0565b6001600160a01b03167f97326258efdae63280617ca33884e507791c2abeed7b82acd77f1853394ef94b600080868686818110611aa757611aa761358e565b9050602002810190611ab9919061366e565b604051611ac9949392919061363b565b60405180910390a26001016119f3565b50506007805460ff19166001179055505050565b60008060606000611b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660009081526020819052604090205490565b604080516000808252602082019092529192509081611b74565b6040805180820190915260008082526020820152815260200190600190039081611b4d5790505b5090508115611bf85760408051600180825281830190925290816020015b6040805180820190915260008082526020820152815260200190600190039081611b925790505090506040518060400160405280306001600160a01b031681526020018381525081600081518110611bec57611bec61358e565b60200260200101819052505b600654919591945092509050565b60006112c586611c1587611d7c565b86604051806020016040528060008152508787610bdb565b6000611c578888611c3d89611d7c565b88611c50610c19368b90038b018b6134da565b8888610f06565b98975050505050505050565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b611cd0863086611e11565b611cfb307f000000000000000000000000000000000000000000000000000000000000000086611c63565b611d0a87610e0a878787612047565b505084604051611d1a9190613572565b6040518091039020866001600160a01b0316336001600160a01b03167f06666856ab7ec8eca6666144744c8bdd710c19b0aba4a36495361c82a01099288a888787604051611d6b94939291906136b4565b60405180910390a450505050505050565b604080516001600160a01b0383166020820152606091016040516020818303038152906040529050919050565b6000611db58484612876565b9050600160ff1b811015610c635781811015611dfd57604051637dc7a0d960e11b81526001600160a01b038516600482015260248101829052604481018390526064016117f1565b610c638484611e0c858561365b565b611c63565b6001600160a01b038216611e2457600080fd5b6001600160a01b038316600090815260208190526040902054811115611e87576001600160a01b0383166000818152602081905260409081902054905163391434e360e21b815260048101929092526024820152604481018290526064016117f1565b6001600160a01b03831660009081526020819052604081208054839290611eaf90849061365b565b90915550506001600160a01b03821660009081526020819052604081208054839290611edc908490613628565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611cb891815260200190565b6001600160a01b038216611f3b57600080fd5b8060026000828254611f4d9190613628565b90915550506001600160a01b03821660009081526020819052604081208054839290611f7a908490613628565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b8060026000828254611fd7919061365b565b90915550506001600160a01b0382166000908152602081905260408120805483929061200490849061365b565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611fb9565b61204f61296a565b604080516001808252818301909252600091816020015b60408051808201909152600080825260208201528152602001906001900390816120665790505090506040518060400160405280306001600160a01b0316815260200185815250816000815181106120c0576120c061358e565b6020026020010181905250610e968560405180602001604052806000815250838661282f565b60008060006120f585856126ac565b60608501519091506000906001600160a01b0316156125025760608501516040516370a0823160e01b815233600482015283916001600160a01b0316906370a0823190602401602060405180830381865afa158015612158573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217c91906136dd565b10156121b35760608501516040516346d55cf960e01b81526001600160a01b039091166004820152602481018390526044016117f1565b6060850151604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e90604401602060405180830381865afa158015612203573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222791906136dd565b101561225e57606085015160405163def222f760e01b81526001600160a01b039091166004820152602481018390526044016117f1565b60608501516040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156122b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122db91906136f6565b50606085015160405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590529091169063095ea7b3906044016020604051808303816000875af1158015612351573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237591906136f6565b506040516396f4e9f960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906396f4e9f9906123c49089908990600401613713565b6020604051808303816000875af11580156123e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240791906136dd565b60608601516040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015612457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247b91906136dd565b905080156124fc57606086015160405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156124d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124fa91906136f6565b505b50612632565b8134101561253b5760608501516040516346d55cf960e01b81526001600160a01b039091166004820152602481018390526044016117f1565b6040516396f4e9f960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906396f4e9f990849061258b908a908a90600401613713565b60206040518083038185885af11580156125a9573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906125ce91906136dd565b905060006125dc833461365b565b111561263257336125ed833461365b565b604051600081818185875af1925050503d8060008114612629576040519150601f19603f3d011682016040523d82523d6000602084013e61262e565b606091505b5050505b925090505b9250929050565b61264661296a565b6040518060a001604052808781526020018681526020018581526020018461268e577f0000000000000000000000000000000000000000000000000000000000000000612691565b60005b6001600160a01b031681526020019290925250949350505050565b6040516320487ded60e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906320487ded906126fd9086908690600401613713565b602060405180830381865afa15801561271a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a691906136dd565b612769827f000000000000000000000000000000000000000000000000000000000000000083611e11565b8060065411156127ba578060066000828254612785919061365b565b909155506127b590507f000000000000000000000000000000000000000000000000000000000000000082611fc5565b6127f4565b600654156127f4576127ee7f0000000000000000000000000000000000000000000000000000000000000000600654611fc5565b60006006555b826001600160a01b03167f5314098314219d6e1ce8e41fc5e6ec1ce2f06a9d583079fb6619af9bf6efdf418260405161179891815260200190565b61283761296a565b6040518060a0016040528086815260200185815260200184815260200161285c612936565b6001600160a01b0316815260200192909252509392505050565b6001600160a01b03808316600090815260016020908152604080832093851683529290529081205480156128ab579050610bd5565b6128b4836112dc565b806128de57506001600160a01b038084166000908152600560205260409020546128de91166112dc565b8061291a57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b1561292c57600160ff1b915050610bd5565b6000915050610bd5565b600080341161296457507f000000000000000000000000000000000000000000000000000000000000000090565b50600090565b6040518060a0016040528060608152602001606081526020016060815260200160006001600160a01b03168152602001606081525090565b60005b838110156129bd5781810151838201526020016129a5565b50506000910152565b600081518084526129de8160208601602086016129a2565b601f01601f19169290920160200192915050565b6020815260006119a660208301846129c6565b80356001600160a01b0381168114612a1c57600080fd5b919050565b60008060408385031215612a3457600080fd5b612a3d83612a05565b946020939093013593505050565b80356001600160401b0381168114612a1c57600080fd5b634e487b7160e01b600052604160045260246000fd5b600082601f830112612a8957600080fd5b81356001600160401b0380821115612aa357612aa3612a62565b604051601f8301601f19908116603f01168101908282118183101715612acb57612acb612a62565b81604052838152866020858801011115612ae457600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008083601f840112612b1657600080fd5b5081356001600160401b03811115612b2d57600080fd5b60208301915083602082850101111561263757600080fd5b60008060008060008060a08789031215612b5e57600080fd5b612b6787612a4b565b955060208701356001600160401b0380821115612b8357600080fd5b612b8f8a838b01612a78565b9650604089013595506060890135915080821115612bac57600080fd5b612bb88a838b01612a78565b94506080890135915080821115612bce57600080fd5b50612bdb89828a01612b04565b979a9699509497509295939492505050565b600060408284031215612bff57600080fd5b50919050565b60008060008060a08587031215612c1b57600080fd5b612c2485612a4b565b9350612c3260208601612a05565b925060408501359150612c488660608701612bed565b905092959194509250565b600080600080600060808688031215612c6b57600080fd5b612c7486612a05565b9450612c8260208701612a05565b93506040860135925060608601356001600160401b03811115612ca457600080fd5b612cb088828901612b04565b969995985093965092949392505050565b600080600060608486031215612cd657600080fd5b612cdf84612a05565b9250612ced60208501612a05565b9150604084013590509250925092565b600060208284031215612d0f57600080fd5b5035919050565b60008060008060808587031215612d2c57600080fd5b612d3585612a4b565b935060208501356001600160401b0380821115612d5157600080fd5b612d5d88838901612a78565b9450604087013593506060870135915080821115612d7a57600080fd5b50612d8787828801612a78565b91505092959194509250565b8015158114610dc257600080fd5b60008060008060808587031215612db757600080fd5b612dc085612a4b565b9350612dce60208601612a05565b9250604085013591506060850135612de581612d93565b939692955090935050565b600060208284031215612e0257600080fd5b6119a682612a05565b60008060008060608587031215612e2157600080fd5b612e2a85612a05565b93506020850135925060408501356001600160401b03811115612e4c57600080fd5b612e5887828801612b04565b95989497509550505050565b600080600080600080600060c0888a031215612e7f57600080fd5b612e8888612a4b565b9650612e9660208901612a05565b955060408801356001600160401b0380821115612eb257600080fd5b612ebe8b838c01612a78565b965060608a0135955060808a0135915080821115612edb57600080fd5b612ee78b838c01612a78565b945060a08a0135915080821115612efd57600080fd5b50612f0a8a828b01612b04565b989b979a50959850939692959293505050565b60008060408385031215612f3057600080fd5b8235612f3b81612d93565b915060208301356001600160401b03811115612f5657600080fd5b612f6285828601612a78565b9150509250929050565b600060408284031215612f7e57600080fd5b6119a68383612bed565b60008060008060008060c08789031215612fa157600080fd5b612faa87612a4b565b9550612fb860208801612a05565b945060408701359350612fce8860608901612bed565b925060a08701356001600160401b03811115612fe957600080fd5b612bdb89828a01612b04565b60008060008060008060a0878903121561300e57600080fd5b61301787612a4b565b955061302560208801612a05565b945061303360408801612a05565b93506060870135925060808701356001600160401b03811115612fe957600080fd5b600080600080600060a0868803121561306d57600080fd5b61307686612a4b565b945060208601356001600160401b038082111561309257600080fd5b61309e89838a01612a78565b955060408801359450606088013591506130b782612d93565b909250608087013590808211156130cd57600080fd5b506130da88828901612a78565b9150509295509295909350565b60008083601f8401126130f957600080fd5b5081356001600160401b0381111561311057600080fd5b6020830191508360208260051b850101111561263757600080fd5b60008060008060006060868803121561314357600080fd5b61314c86612a05565b945060208601356001600160401b038082111561316857600080fd5b61317489838a016130e7565b9096509450604088013591508082111561318d57600080fd5b50612cb088828901612b04565b600080600080600060a086880312156131b257600080fd5b6131bb86612a4b565b94506131c960208701612a05565b93506040860135925060608601356131e081612d93565b915060808601356001600160401b038111156131fb57600080fd5b6130da88828901612a78565b60006020828403121561321957600080fd5b81356119a681612d93565b60006020828403121561323657600080fd5b81356001600160401b0381111561324c57600080fd5b61325884828501612a78565b949350505050565b60008060006060848603121561327557600080fd5b612cdf84612a4b565b60008060008060006080868803121561329657600080fd5b61329f86612a05565b9450602086013593506040860135925060608601356001600160401b03811115612ca457600080fd5b600080600080600080600060e0888a0312156132e357600080fd5b6132ec88612a05565b96506132fa60208901612a05565b95506040880135945060608801359350608088013560ff8116811461331e57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561334e57600080fd5b61335783612a05565b915061336560208401612a05565b90509250929050565b6000806000806040858703121561338457600080fd5b84356001600160401b038082111561339b57600080fd5b6133a7888389016130e7565b909650945060208701359150808211156133c057600080fd5b50612e58878288016130e7565b60008151808452602080850194506020840160005b8381101561341257815180516001600160a01b0316885283015183880152604090960195908201906001016133e2565b509495945050505050565b838152826020820152606060408201526000610e9660608301846133cd565b60008060008060006080868803121561345457600080fd5b612c7486612a4b565b600080600080600080600060e0888a03121561347857600080fd5b61348188612a4b565b965061348f60208901612a05565b955061349d60408901612a05565b9450606088013593506134b38960808a01612bed565b925060c08801356001600160401b038111156134ce57600080fd5b612f0a8a828b01612b04565b6000604082840312156134ec57600080fd5b604051604081018181106001600160401b038211171561350e5761350e612a62565b60405282358152602083013561352381612d93565b60208201529392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b838152604060208201526000610e9660408301848661352f565b600082516135848184602087016129a2565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03848116825260406020808401829052908301849052600091859160608501845b878110156135f157836135de86612a05565b16825293820193908201906001016135cc565b5098975050505050505050565b60208152600061325860208301848661352f565b634e487b7160e01b600052601160045260246000fd5b80820180821115610bd557610bd5613612565b8481528360208201526060604082015260006112c560608301848661352f565b81810381811115610bd557610bd5613612565b6000808335601e1984360301811261368557600080fd5b8301803591506001600160401b0382111561369f57600080fd5b60200191503681900382131561263757600080fd5b6001600160401b03851681528360208201526060604082015260006112c560608301848661352f565b6000602082840312156136ef57600080fd5b5051919050565b60006020828403121561370857600080fd5b81516119a681612d93565b6001600160401b0383168152604060208201526000825160a0604084015261373e60e08401826129c6565b90506020840151603f198085840301606086015261375c83836129c6565b9250604086015191508085840301608086015261377983836133cd565b60608701516001600160a01b031660a0870152608087015186820390920160c0870152925090506112c582826129c656fea264697066735822122010d712851f8eade01e9a8ddec8786f5b9dc72e852a7ad7ed43de00fd8e9f640a64736f6c6343000818003360e06040523480156200001157600080fd5b506040516200235d3803806200235d8339810160408190526200003491620000d0565b806001600160a01b031663cd3293de6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000073573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200009991906200010f565b6001600160a01b0390811660805291821660a0521660c05262000136565b6001600160a01b0381168114620000cd57600080fd5b50565b60008060408385031215620000e457600080fd5b8251620000f181620000b7565b60208401519092506200010481620000b7565b809150509250929050565b6000602082840312156200012257600080fd5b81516200012f81620000b7565b9392505050565b60805160a05160c0516121a3620001ba600039600081816101b30152818161033701528181610c5201528181610d7501528181610e4f01526111610152600081816101200152818161036701528181610c7a01528181610da0015261119101526000818161018c0152818161065e01528181610a75015261100c01526121a36000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806356813c46116100a2578063a278ce7311610071578063a278ce7314610292578063e185f1a2146102a5578063e7865c9a146102b8578063f2249822146102cb578063fdc49132146102de57600080fd5b806356813c461461024657806366b5063214610259578063867931341461026c5780638bb4e7611461027f57600080fd5b80631836e0da116100e95780631836e0da146101ae57806327cfe856146101d55780632865ae72146101f757806332ed5b121461020a5780634aef7d8b1461023357600080fd5b80630618da0e1461011b57806306b16f921461015f578063104e9929146101745780631462783414610187575b600080fd5b6101427f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61017261016d366004611384565b6102f1565b005b600054610142906001600160a01b031681565b6101427f000000000000000000000000000000000000000000000000000000000000000081565b6101427f000000000000000000000000000000000000000000000000000000000000000081565b6101df6201518081565b6040516001600160401b039091168152602001610156565b6101726102053660046113c4565b610475565b6101df6102183660046113df565b6001602052600090815260409020546001600160401b031681565b6101726102413660046115bb565b6105d9565b610172610254366004611623565b61065a565b610172610267366004611661565b61077a565b61017261027a366004611703565b610945565b61017261028d366004611863565b610a71565b6101726102a03660046118db565b610bc8565b6101726102b3366004611932565b610c3b565b6101726102c6366004611932565b610ce6565b6101726102d936600461196d565b610d5e565b6101726102ec3660046119d1565b610ec4565b6103208160405160200161030591906119ef565b60405160208183030381529060405280519060200120610f3c565b604051636ed6fd4760e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015282811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063ddadfa8e90604401600060405180830381600087803b1580156103ab57600080fd5b505af11580156103bf573d6000803e3d6000fd5b50506000546001600160a01b031615915061043690505760005460405163f2fde38b60e01b81526001600160a01b0383811660048301529091169063f2fde38b90602401600060405180830381600087803b15801561041d57600080fd5b505af1158015610431573d6000803e3d6000fd5b505050505b6040516001600160a01b03821681527fe22b4f506b7da9a528a95d7063a6cde8d2b6268773b1f7f65c00057531704a3d9060200160405180910390a150565b6000546001600160a01b031661049e5760405163b346648b60e01b815260040160405180910390fd5b6104b2816040516020016103059190611a27565b6040805160018082528183019092526000916020808301908036833701905050905081816000815181106104e8576104e8611a5d565b6001600160401b039290921660209283029190910182015260408051600080825292810190915281610530565b61051d611300565b8152602001906001900390816105155790505b5060005460405163e8a1da1760e01b81529192506001600160a01b03169063e8a1da17906105649085908590600401611c05565b600060405180830381600087803b15801561057e57600080fd5b505af1158015610592573d6000803e3d6000fd5b50506040516001600160401b03861681527f5204aec90a3c794d8e90fded8b46ae9c7c552803e7e832e0c1d358396d859916925060200190505b60405180910390a1505050565b6000836040516020016105ec9190611cab565b6040516020818303038152906040528051906020012090506106118160078585611008565b336001600160a01b03167fc69c8ca301ca62431960a091e21b4ccba9198869711cb21e33c959537aa6e444828660405161064c929190611ce5565b60405180910390a250505050565b81817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663352e3a833384846040518463ffffffff1660e01b81526004016106ac93929190611cfe565b60006040518083038186803b1580156106c457600080fd5b505afa1580156106d8573d6000803e3d6000fd5b5050506000868152600160205260408120546001600160401b03169003905061071c576040516304bbf15f60e11b8152600481018690526024015b60405180910390fd5b60008581526001602052604090819020805467ffffffffffffffff19169055517f1f31008e39db52785cc2c4af1b52bfde142d3ad9ff6b5221888a4700481f2f639061076b9087815260200190565b60405180910390a15050505050565b6000546001600160a01b03166107a35760405163b346648b60e01b815260040160405180910390fd5b6107b7816040516020016103059190611cab565b80511561088157600054602082015160408084015190516318b774f160e21b81526001600160a01b03909316926362ddd3c4926107f8929091600401611d5a565b600060405180830381600087803b15801561081257600080fd5b505af1158015610826573d6000803e3d6000fd5b50505050806040015160405161083c9190611d7c565b604051809103902081602001516001600160401b03167f7d628c9a1796743d365ab521a8b2a4686e419b3269919dc9145ea2ce853b54ea60405160405180910390a350565b6000546020820151604080840151905163acfecf9160e01b81526001600160a01b039093169263acfecf91926108bb929091600401611d5a565b600060405180830381600087803b1580156108d557600080fd5b505af11580156108e9573d6000803e3d6000fd5b5050505080604001516040516108ff9190611d7c565b604051809103902081602001516001600160401b03167f52d00ee4d9bd51b40168f2afc5848837288ce258784ad914278791464b3f4d7660405160405180910390a35b50565b6000546001600160a01b031661096e5760405163b346648b60e01b815260040160405180910390fd5b610982816040516020016103059190611d98565b604080516000808252600160208301818152606084018552929391929184015b6109aa611300565b8152602001906001900390816109a257905050905082816000815181106109d3576109d3611a5d565b602090810291909101015260005460405163e8a1da1760e01b81526001600160a01b039091169063e8a1da1790610a109085908590600401611c05565b600060405180830381600087803b158015610a2a57600080fd5b505af1158015610a3e573d6000803e3d6000fd5b505050507f997ece7f5dbb418762275ab79bd907b726b4b93ce7ce4a3bf20485ed9abe7faa836040516105cc9190611dd2565b81817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663352e3a833384846040518463ffffffff1660e01b8152600401610ac393929190611cfe565b60006040518083038186803b158015610adb57600080fd5b505afa158015610aef573d6000803e3d6000fd5b50506000546001600160a01b03169150610b1e90505760405163b346648b60e01b815260040160405180910390fd5b60005460405163cf7401f360e01b81526001600160a01b039091169063cf7401f390610b52908a908a908a90600401611e27565b600060405180830381600087803b158015610b6c57600080fd5b505af1158015610b80573d6000803e3d6000fd5b505050507f3deebf0b3430431835efe0c537812d7973219fdd0bdd3aeaddb8db166ab7bf27878787604051610bb793929190611e27565b60405180910390a150505050505050565b600083604051602001610bdb9190611fd4565b604051602081830303815290604052805190602001209050610c008160078585611008565b336001600160a01b03167f68457984b8b28a38a49b3e46cb383b047dbca87b3b2e45d9181439f84169d028828660405161064c92919061200e565b604051630ab0ca6d60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063156194da90602401600060405180830381600087803b158015610cbe57600080fd5b505af1158015610cd2573d6000803e3d6000fd5b50505050610ce183838361114a565b505050565b600083604051602001610cf991906119ef565b604051602081830303815290604052805190602001209050610d1e8160158585611008565b604080518281526001600160a01b038616602082015233917f7e3383d715b50982af3e6f86cd3a22cc104cf300b02375e0c8738244d95857c7910161064c565b60405163cb67e3b160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063cb67e3b190602401606060405180830381865afa158015610de9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0d9190612027565b516001600160a01b031614610e3557604051630ea075bf60e21b815260040160405180910390fd5b6040516001623b4f2b60e21b031981526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015285169063ff12c35490602401600060405180830381600087803b158015610e9b57600080fd5b505af1158015610eaf573d6000803e3d6000fd5b50505050610ebe838383610c3b565b50505050565b600083604051602001610ed79190611a27565b604051602081830303815290604052805190602001209050610efc8160078585611008565b604080518281526001600160401b038616602082015233917f5a570504a3f0608bbc8a5bf898d58fba6c092e1424e5f9e5a3e8635cae1976ce910161064c565b6000818152600160205260408120546001600160401b031690819003610f78576040516304bbf15f60e11b815260048101839052602401610713565b42816001600160401b03161115610fad5760405163d606d83f60e01b81526001600160401b0382166004820152602401610713565b60008281526001602052604090819020805467ffffffffffffffff19169055517fa3b6368b6d3f37515d1e7c5f2419ec24fb57f5f867fd9456a70d950bdac1f4c690610ffc9084815260200190565b60405180910390a15050565b81817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663352e3a833384846040518463ffffffff1660e01b815260040161105a93929190611cfe565b60006040518083038186803b15801561107257600080fd5b505afa158015611086573d6000803e3d6000fd5b5050506000878152600160205260409020546001600160401b03161590506110c457604051634c44e3d360e11b815260048101879052602401610713565b6110d16201518086612091565b6110db90426120bc565b600087815260016020908152604091829020805467ffffffffffffffff19166001600160401b039490941693841790558151898152908101929092527f497e45dce2bd7277051c7194a9252a4560c476938b268b26082614bd9d655e55910160405180910390a1505050505050565b604051634e847fc760e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015284811660248301527f00000000000000000000000000000000000000000000000000000000000000001690634e847fc790604401600060405180830381600087803b1580156111d557600080fd5b505af11580156111e9573d6000803e3d6000fd5b50505050826001600160a01b03166379ba50976040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561122857600080fd5b505af115801561123c573d6000803e3d6000fd5b5050821591506112b69050576040805160008152602081019182905263e8a1da1760e01b9091526001600160a01b0384169063e8a1da1790611283908585602483016120e3565b600060405180830381600087803b15801561129d57600080fd5b505af11580156112b1573d6000803e3d6000fd5b505050505b600080546001600160a01b0319166001600160a01b038516908117825560405190917f05dbcb65b33e42bc9e68704a2b109e0f4eee368a6945cad1e857b0197c9fef4291a2505050565b6040518060a0016040528060006001600160401b03168152602001606081526020016060815260200161134c604080516060810182526000808252602082018190529181019190915290565b815260408051606081018252600080825260208281018290529282015291015290565b6001600160a01b038116811461094257600080fd5b60006020828403121561139657600080fd5b81356113a18161136f565b9392505050565b80356001600160401b03811681146113bf57600080fd5b919050565b6000602082840312156113d657600080fd5b6113a1826113a8565b6000602082840312156113f157600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715611430576114306113f8565b60405290565b60405160a081016001600160401b0381118282101715611430576114306113f8565b604051601f8201601f191681016001600160401b0381118282101715611480576114806113f8565b604052919050565b803580151581146113bf57600080fd5b600082601f8301126114a957600080fd5b81356001600160401b038111156114c2576114c26113f8565b6114d5601f8201601f1916602001611458565b8181528460208386010111156114ea57600080fd5b816020850160208301376000918101602001919091529392505050565b60006060828403121561151957600080fd5b61152161140e565b905061152c82611488565b815261153a602083016113a8565b602082015260408201356001600160401b0381111561155857600080fd5b61156484828501611498565b60408301525092915050565b60008083601f84011261158257600080fd5b5081356001600160401b0381111561159957600080fd5b6020830191508360208260051b85010111156115b457600080fd5b9250929050565b6000806000604084860312156115d057600080fd5b83356001600160401b03808211156115e757600080fd5b6115f387838801611507565b9450602086013591508082111561160957600080fd5b5061161686828701611570565b9497909650939450505050565b60008060006040848603121561163857600080fd5b8335925060208401356001600160401b0381111561165557600080fd5b61161686828701611570565b60006020828403121561167357600080fd5b81356001600160401b0381111561168957600080fd5b61169584828501611507565b949350505050565b80356001600160801b03811681146113bf57600080fd5b6000606082840312156116c657600080fd5b6116ce61140e565b90506116d982611488565b81526116e76020830161169d565b60208201526116f86040830161169d565b604082015292915050565b6000602080838503121561171657600080fd5b82356001600160401b038082111561172d57600080fd5b90840190610120828703121561174257600080fd5b61174a611436565b611753836113a8565b8152838301358281111561176657600080fd5b8301601f8101881361177757600080fd5b803583811115611789576117896113f8565b8060051b611798878201611458565b918252828101870191878101908b8411156117b257600080fd5b88850192505b838310156117ee578235878111156117d05760008081fd5b6117de8d8b83890101611498565b83525091880191908801906117b8565b80898701525050505050604083013593508184111561180c57600080fd5b61181887858501611498565b604082015261182a87606085016116b4565b606082015261183c8760c085016116b4565b60808201529695505050505050565b60006060828403121561185d57600080fd5b50919050565b6000806000806000610100868803121561187c57600080fd5b611885866113a8565b9450611894876020880161184b565b93506118a3876080880161184b565b925060e08601356001600160401b038111156118be57600080fd5b6118ca88828901611570565b969995985093965092949392505050565b6000806000604084860312156118f057600080fd5b83356001600160401b038082111561190757600080fd5b90850190610120828803121561191c57600080fd5b9093506020850135908082111561160957600080fd5b60008060006040848603121561194757600080fd5b83356119528161136f565b925060208401356001600160401b0381111561165557600080fd5b6000806000806060858703121561198357600080fd5b843561198e8161136f565b9350602085013561199e8161136f565b925060408501356001600160401b038111156119b957600080fd5b6119c587828801611570565b95989497509550505050565b6000806000604084860312156119e657600080fd5b611952846113a8565b6040808252600d908201526c30b236b4b72a3930b739b332b960991b60608201526001600160a01b0391909116602082015260800190565b6040808252600b908201526a3932b6b7bb32a1b430b4b760a91b60608201526001600160401b0391909116602082015260800190565b634e487b7160e01b600052603260045260246000fd5b60008151808452602080850194506020840160005b83811015611aad5781516001600160401b031687529582019590820190600101611a88565b509495945050505050565b60005b83811015611ad3578181015183820152602001611abb565b50506000910152565b60008151808452611af4816020860160208601611ab8565b601f01601f19169290920160200192915050565b80516001600160401b03168252602080820151610120828501819052815190850181905260009261014080870193600584901b88019091019290820190855b81811015611b765761013f19898603018652611b64858451611adc565b95840195945091830191600101611b47565b50505050604084015191508481036040860152611b938183611adc565b9150506060830151611bcd60608601828051151582526020808201516001600160801b039081169184019190915260409182015116910152565b5060808301518051151560c086015260208101516001600160801b0390811660e0870152604082015116610100860152509392505050565b604081526000611c186040830185611a73565b6020838203818501528185518084528284019150828160051b85010183880160005b83811015611c6857601f19878403018552611c56838351611b08565b94860194925090850190600101611c3a565b50909998505050505050505050565b8051151582526001600160401b03602082015116602083015260006040820151606060408501526116956060850182611adc565b60408152601060408201526f72656d6f7465506f6f6c55706461746560801b60608201526080602082015260006113a16080830184611c77565b8281526040602082015260006116956040830184611c77565b6001600160a01b03848116825260406020808401829052908301849052600091859160608501845b87811015611d4d578435611d398161136f565b841682529382019390820190600101611d26565b5098975050505050505050565b6001600160401b03831681526040602082015260006116956040830184611adc565b60008251611d8e818460208701611ab8565b9190910192915050565b604081526000611dc060408301600881526730b23221b430b4b760c11b602082015260400190565b82810360208401526116958185611b08565b6020815260006113a16020830184611b08565b611dee81611488565b15158252611dfe6020820161169d565b6001600160801b03808216602085015280611e1b6040850161169d565b16604085015250505050565b6001600160401b038416815260e08101611e446020830185611de5565b6116956080830184611de5565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000808335601e19843603018112611e9157600080fd5b83016020810192503590506001600160401b03811115611eb057600080fd5b8036038213156115b457600080fd5b6000838385526020808601955060208560051b8301018460005b87811015611f1357848303601f19018952611ef48288611e7a565b611eff858284611e51565b9a86019a9450505090830190600101611ed9565b5090979650505050505050565b60006101206001600160401b0380611f37856113a8565b1685526020840135601e19853603018112611f5157600080fd5b840160208101903582811115611f6657600080fd5b8060051b3603821315611f7857600080fd5b836020880152611f8b8488018284611ebf565b9350505050611f9d6040840184611e7a565b8583036040870152611fb0838284611e51565b92505050611fc46060850160608501611de5565b6113a160c0850160c08501611de5565b604081526000611ffc60408301600881526730b23221b430b4b760c11b602082015260400190565b82810360208401526116958185611f20565b8281526040602082015260006116956040830184611f20565b60006060828403121561203957600080fd5b61204161140e565b825161204c8161136f565b8152602083015161205c8161136f565b6020820152604083015161206f8161136f565b60408201529392505050565b634e487b7160e01b600052601160045260246000fd5b6001600160401b038181168382160280821691908281146120b4576120b461207b565b505092915050565b6001600160401b038181168382160190808211156120dc576120dc61207b565b5092915050565b6040815260006120f66040830186611a73565b602083820360208501528185835260208301905060208660051b840101876000805b8981101561215d57868403601f190185528235368c900361011e1901811261213e578283fd5b61214a858d8301611f20565b9587019594505091850191600101612118565b50919a995050505050505050505056fea26469706673582212201955670353a01d311b3e5cf9be584737cd996feed5e950e95e05805f9b9e12dc64736f6c634300081800336101006040523480156200001257600080fd5b5060405162003da538038062003da58339810160408190526200003591620005a2565b8484848484336000816200005c57604051639b15e16f60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b03848116919091179091558116156200008f576200008f81620001eb565b50506001600160a01b0385161580620000af57506001600160a01b038116155b80620000c257506001600160a01b038216155b15620000e1576040516342bcdf7f60e11b815260040160405180910390fd5b6001600160a01b03808616608081905290831660c0526040805163313ce56760e01b8152905163313ce567916004808201926020929091908290030181865afa92505050801562000151575060408051601f3d908101601f191682019092526200014e91810190620006c4565b60015b1562000191578060ff168560ff16146200018f576040516332ad3e0760e11b815260ff80871660048301528216602482015260440160405180910390fd5b505b60ff841660a052600480546001600160a01b0319166001600160a01b038316179055825115801560e052620001db57604080516000815260208101909152620001db908462000265565b5050505050505050505062000730565b336001600160a01b038216036200021557604051636d6c4ee560e11b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b03838116918217835560015460405192939116917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60e05162000286576040516335f4a7b360e01b815260040160405180910390fd5b60005b825181101562000311576000838281518110620002aa57620002aa620006e2565b60209081029190910101519050620002c4600282620003c2565b1562000307576040516001600160a01b03821681527f800671136ab6cfee9fbe5ed1fb7ca417811aca3cf864800d127b927adedf75669060200160405180910390a15b5060010162000289565b5060005b8151811015620003bd576000828281518110620003365762000336620006e2565b6020026020010151905060006001600160a01b0316816001600160a01b031603620003625750620003b4565b6200036f600282620003e2565b15620003b2576040516001600160a01b03821681527f2640d4d76caf8bf478aabfa982fa4e1c4eb71a37f93cd15e80dbc657911546d89060200160405180910390a15b505b60010162000315565b505050565b6000620003d9836001600160a01b038416620003f9565b90505b92915050565b6000620003d9836001600160a01b038416620004fd565b60008181526001830160205260408120548015620004f257600062000420600183620006f8565b85549091506000906200043690600190620006f8565b9050808214620004a25760008660000182815481106200045a576200045a620006e2565b9060005260206000200154905080876000018481548110620004805762000480620006e2565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080620004b657620004b66200071a565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050620003dc565b6000915050620003dc565b60008181526001830160205260408120546200054657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620003dc565b506000620003dc565b6001600160a01b03811681146200056557600080fd5b50565b805160ff811681146200057a57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b80516200057a816200054f565b600080600080600060a08688031215620005bb57600080fd5b8551620005c8816200054f565b94506020620005d987820162000568565b60408801519095506001600160401b0380821115620005f757600080fd5b818901915089601f8301126200060c57600080fd5b8151818111156200062157620006216200057f565b8060051b604051601f19603f830116810181811085821117156200064957620006496200057f565b60405291825284820192508381018501918c8311156200066857600080fd5b938501935b828510156200069157620006818562000595565b845293850193928501926200066d565b809850505050505050620006a86060870162000595565b9150620006b86080870162000595565b90509295509295909350565b600060208284031215620006d757600080fd5b620003d98262000568565b634e487b7160e01b600052603260045260246000fd5b81810381811115620003dc57634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60805160a05160c05160e0516135c4620007e160003960008181610523015281816119f801526122f00152600081816104fd015281816116140152611d240152600081816102d101528181610b2001528181611766015281816117ee0152818161182201528181611855015281816118a1015281816118fa01526119650152600081816102520152818161029a0152818161063c01528181611e4a01528181612189015261244001526135c46000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80639a4575b911610104578063c0d78655116100a2578063dc0bd97111610071578063dc0bd971146104fb578063e0351e1314610521578063e8a1da1714610547578063f2fde38b1461055a57600080fd5b8063c0d78655146104ad578063c4bffe2b146104c0578063c75eea9c146104d5578063cf7401f3146104e857600080fd5b8063acfecf91116100de578063acfecf9114610410578063af58d59f14610423578063b0f479a114610489578063b79465801461049a57600080fd5b80639a4575b9146103bb578063a42a7b8b146103db578063a7cd63b7146103fb57600080fd5b806354c8a4f31161017c5780637d54534e1161014b5780637d54534e146103715780638926f54f146103845780638da5cb5b14610397578063962d4020146103a857600080fd5b806354c8a4f31461033057806362ddd3c4146103455780636d3d1a581461035857806379ba50971461036957600080fd5b8063240028e8116101b8578063240028e81461028a57806324f65ee7146102ca57806339077537146102fb5780634c5ef0ed1461031d57600080fd5b806301ffc9a7146101df578063181f5a771461020757806321df0da714610250575b600080fd5b6101f26101ed366004612910565b61056d565b60405190151581526020015b60405180910390f35b6102436040518060400160405280601781526020017f4275726e4d696e74546f6b656e506f6f6c20312e352e3100000000000000000081525081565b6040516101fe9190612980565b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020016101fe565b6101f26102983660046129a8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020016101fe565b61030e6103093660046129c5565b6105bf565b604051905181526020016101fe565b6101f261032b366004612a1c565b610742565b61034361033e366004612ae9565b61078b565b005b610343610353366004612a1c565b610806565b6009546001600160a01b0316610272565b610343610889565b61034361037f3660046129a8565b61090c565b6101f2610392366004612b54565b610968565b6001546001600160a01b0316610272565b6103436103b6366004612bb3565b61097e565b6103ce6103c9366004612c4c565b610a8c565b6040516101fe9190612c86565b6103ee6103e9366004612b54565b610b65565b6040516101fe9190612cbf565b610403610cce565b6040516101fe9190612d23565b61034361041e366004612a1c565b610cdf565b610436610431366004612b54565b610dc2565b6040516101fe919081516001600160801b03908116825260208084015163ffffffff1690830152604080840151151590830152606080840151821690830152608092830151169181019190915260a00190565b6004546001600160a01b0316610272565b6102436104a8366004612b54565b610e6f565b6103436104bb3660046129a8565b610f1e565b6104c8610fae565b6040516101fe9190612d70565b6104366104e3366004612b54565b611064565b6103436104f6366004612eb4565b61110e565b7f0000000000000000000000000000000000000000000000000000000000000000610272565b7f00000000000000000000000000000000000000000000000000000000000000006101f2565b610343610555366004612ae9565b61115f565b6103436105683660046129a8565b6115aa565b60006001600160e01b0319821663aff2afbf60e01b148061059e57506001600160e01b03198216630e64dd2960e01b145b806105b957506001600160e01b031982166301ffc9a760e01b145b92915050565b6040805160208101909152600081526105d7826115be565b6000610630606084013561062b6105f160c0870187612ef9565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061175892505050565b6117ea565b90506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166340c10f1961067160608601604087016129a8565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b1580156106b957600080fd5b505af11580156106cd573d6000803e3d6000fd5b506106e29250505060608401604085016129a8565b6001600160a01b0316336001600160a01b03167f9d228d69b5fdb8d273a2336f8fb8612d039631024ea9bf09c424a9503aa078f08360405161072691815260200190565b60405180910390a3604080516020810190915290815292915050565b60006107838383604051610757929190612f3f565b60408051918290039091206001600160401b0387166000908152600760205291909120600501906119ae565b949350505050565b6107936119c9565b610800848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208088028281018201909352878252909350879250869182918501908490808284376000920191909152506119f692505050565b50505050565b61080e6119c9565b61081783610968565b61084457604051631e670e4b60e01b81526001600160401b03841660048201526024015b60405180910390fd5b6108848383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611b5f92505050565b505050565b6000546001600160a01b031633146108b45760405163015aa1e360e11b815260040160405180910390fd5b600180546001600160a01b0319808216339081179093556000805490911681556040516001600160a01b03909216929183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6109146119c9565b600980546001600160a01b0319166001600160a01b0383169081179091556040519081527f44676b5284b809a22248eba0da87391d79098be38bb03154be88a58bf4d091749060200160405180910390a150565b60006105b960056001600160401b0384166119ae565b6009546001600160a01b031633148015906109a457506001546001600160a01b03163314155b156109c45760405163472511eb60e11b815233600482015260240161083b565b84831415806109d35750848114155b156109f157604051632b477e7160e11b815260040160405180910390fd5b60005b85811015610a8357610a7b878783818110610a1157610a11612f4f565b9050602002016020810190610a269190612b54565b868684818110610a3857610a38612f4f565b905060600201803603810190610a4e9190612f65565b858585818110610a6057610a60612f4f565b905060600201803603810190610a769190612f65565b611c25565b6001016109f4565b50505050505050565b6040805180820190915260608082526020820152610aa982611cf3565b610ab68260600135611e34565b6040516060830135815233907f696de425f79f4a40bc6d2122ca50507f0efbeabbff86a84871b7196ab8ea8df79060200160405180910390a26040518060400160405280610b108460200160208101906104a89190612b54565b8152602001610b5d6040805160ff7f000000000000000000000000000000000000000000000000000000000000000016602082015260609101604051602081830303815290604052905090565b905292915050565b6001600160401b038116600090815260076020526040812060609190610b8d90600501611eaa565b9050600081516001600160401b03811115610baa57610baa612db1565b604051908082528060200260200182016040528015610bdd57816020015b6060815260200190600190039081610bc85790505b50905060005b8251811015610cc65760086000848381518110610c0257610c02612f4f565b602002602001015181526020019081526020016000208054610c2390612f81565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4f90612f81565b8015610c9c5780601f10610c7157610100808354040283529160200191610c9c565b820191906000526020600020905b815481529060010190602001808311610c7f57829003601f168201915b5050505050828281518110610cb357610cb3612f4f565b6020908102919091010152600101610be3565b509392505050565b6060610cda6002611eaa565b905090565b610ce76119c9565b610cf083610968565b610d1857604051631e670e4b60e01b81526001600160401b038416600482015260240161083b565b610d578282604051610d2b929190612f3f565b60408051918290039091206001600160401b038616600090815260076020529190912060050190611eb7565b610d7a57828282604051631d3c8f1f60e21b815260040161083b93929190612fe4565b826001600160401b03167f52d00ee4d9bd51b40168f2afc5848837288ce258784ad914278791464b3f4d768383604051610db5929190613007565b60405180910390a2505050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526001600160401b038216600090815260076020908152604091829020825160a08101845260028201546001600160801b038082168352600160801b80830463ffffffff1695840195909552600160a01b90910460ff1615159482019490945260039091015480841660608301529190910490911660808201526105b990611ec3565b6001600160401b0381166000908152600760205260409020600401805460609190610e9990612f81565b80601f0160208091040260200160405190810160405280929190818152602001828054610ec590612f81565b8015610f125780601f10610ee757610100808354040283529160200191610f12565b820191906000526020600020905b815481529060010190602001808311610ef557829003601f168201915b50505050509050919050565b610f266119c9565b6001600160a01b038116610f4d576040516342bcdf7f60e11b815260040160405180910390fd5b600480546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f02dc5c233404867c793b749c6d644beb2277536d18a7e7974d3f238e4c6f1684910160405180910390a15050565b60606000610fbc6005611eaa565b9050600081516001600160401b03811115610fd957610fd9612db1565b604051908082528060200260200182016040528015611002578160200160208202803683370190505b50905060005b825181101561105d5782818151811061102357611023612f4f565b602002602001015182828151811061103d5761103d612f4f565b6001600160401b0390921660209283029190910190910152600101611008565b5092915050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526001600160401b038216600090815260076020908152604091829020825160a08101845281546001600160801b038082168352600160801b80830463ffffffff1695840195909552600160a01b90910460ff1615159482019490945260019091015480841660608301529190910490911660808201526105b990611ec3565b6009546001600160a01b0316331480159061113457506001546001600160a01b03163314155b156111545760405163472511eb60e11b815233600482015260240161083b565b610884838383611c25565b6111676119c9565b60005b8381101561131c57600085858381811061118657611186612f4f565b905060200201602081019061119b9190612b54565b90506111b160056001600160401b038316611eb7565b6111d957604051631e670e4b60e01b81526001600160401b038216600482015260240161083b565b6001600160401b03811660009081526007602052604081206111fd90600501611eaa565b905060005b81518110156112675761125e82828151811061122057611220612f4f565b602002602001015160076000866001600160401b03166001600160401b03168152602001908152602001600020600501611eb790919063ffffffff16565b50600101611202565b506001600160401b038216600090815260076020526040812080546001600160a81b0319908116825560018201839055600282018054909116905560038101829055906112b760048301826128a3565b60058201600081816112c982826128dd565b50506040516001600160401b03871681527f5204aec90a3c794d8e90fded8b46ae9c7c552803e7e832e0c1d358396d8599169450602001925061130a915050565b60405180910390a1505060010161116a565b5060005b818110156115a357600083838381811061133c5761133c612f4f565b905060200281019061134e919061301b565b611357906130ab565b905061136881606001516000611f51565b61137781608001516000611f51565b80604001515160000361139d576040516342bcdf7f60e11b815260040160405180910390fd5b80516113b4906005906001600160401b0316612016565b6113df578051604051631d5ad3c560e01b81526001600160401b03909116600482015260240161083b565b80516001600160401b0316600090815260076020908152604091829020825160a08082018552606080870180518601516001600160801b0390811680865263ffffffff42168689018190528351511515878b0181905284518a0151841686890181905294518b0151841660809889018190528954600160a01b92830260ff60a01b19600160801b8087026001600160a01b031994851690981788178216929092178d5592810290971760018c01558c519889018d52898e0180518d01518716808b528a8e019590955280515115158a8f018190528151909d01518716988a01899052518d0151909516979098018790526002890180549a9091029990931617179094169590951790925590920290911760038201559082015160048201906115079082613221565b5060005b82602001515181101561154b5761154383600001518460200151838151811061153657611536612f4f565b6020026020010151611b5f565b60010161150b565b507f8d340f17e19058004c20453540862a9c62778504476f6756755cb33bcd6c38c28260000151836040015184606001518560800151604051611591949392919061330a565b60405180910390a15050600101611320565b5050505050565b6115b26119c9565b6115bb81612022565b50565b6115d161029860a08301608084016129a8565b61160a576115e560a08201608083016129a8565b60405163961c9a4f60e01b81526001600160a01b03909116600482015260240161083b565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016632cbc26bb6116496040840160208501612b54565b60405160e083901b6001600160e01b031916815260809190911b67ffffffffffffffff60801b166004820152602401602060405180830381865afa158015611695573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b9919061334a565b156116d757604051630a75a23b60e31b815260040160405180910390fd5b6116ef6116ea6040830160208401612b54565b61209b565b61170f6117026040830160208401612b54565b61032b60a0840184612ef9565b61173b5761172060a0820182612ef9565b6040516324eb47e560e01b815260040161083b929190613007565b6115bb61174e6040830160208401612b54565b8260600135612167565b6000815160000361178a57507f0000000000000000000000000000000000000000000000000000000000000000919050565b81516020146117ae578160405163953576f760e01b815260040161083b9190612980565b6000828060200190518101906117c49190613367565b905060ff8111156105b9578260405163953576f760e01b815260040161083b9190612980565b60007f000000000000000000000000000000000000000000000000000000000000000060ff168260ff16036118205750816105b9565b7f000000000000000000000000000000000000000000000000000000000000000060ff168260ff1611156118f257600061187a7f000000000000000000000000000000000000000000000000000000000000000084613396565b9050604d8160ff1611156118d55760405163a9cb113d60e01b815260ff80851660048301527f00000000000000000000000000000000000000000000000000000000000000001660248201526044810185905260640161083b565b6118e081600a613493565b6118ea90856134a2565b9150506105b9565b600061191e837f0000000000000000000000000000000000000000000000000000000000000000613396565b9050604d8160ff161180611947575061193881600a613493565b611944906000196134a2565b84115b156119995760405163a9cb113d60e01b815260ff80851660048301527f00000000000000000000000000000000000000000000000000000000000000001660248201526044810185905260640161083b565b6119a481600a613493565b61078390856134c4565b600081815260018301602052604081205415155b9392505050565b6001546001600160a01b031633146119f4576040516315ae3a6f60e11b815260040160405180910390fd5b565b7f0000000000000000000000000000000000000000000000000000000000000000611a34576040516335f4a7b360e01b815260040160405180910390fd5b60005b8251811015611abd576000838281518110611a5457611a54612f4f565b60200260200101519050611a728160026121ad90919063ffffffff16565b15611ab4576040516001600160a01b03821681527f800671136ab6cfee9fbe5ed1fb7ca417811aca3cf864800d127b927adedf75669060200160405180910390a15b50600101611a37565b5060005b8151811015610884576000828281518110611ade57611ade612f4f565b6020026020010151905060006001600160a01b0316816001600160a01b031603611b085750611b57565b611b136002826121c2565b15611b55576040516001600160a01b03821681527f2640d4d76caf8bf478aabfa982fa4e1c4eb71a37f93cd15e80dbc657911546d89060200160405180910390a15b505b600101611ac1565b8051600003611b81576040516342bcdf7f60e11b815260040160405180910390fd5b80516020808301919091206001600160401b038416600090815260079092526040909120611bb29060050182612016565b611bd3578282604051631c9dc56960e11b815260040161083b9291906134db565b6000818152600860205260409020611beb8382613221565b50826001600160401b03167f7d628c9a1796743d365ab521a8b2a4686e419b3269919dc9145ea2ce853b54ea83604051610db59190612980565b611c2e83610968565b611c5657604051631e670e4b60e01b81526001600160401b038416600482015260240161083b565b611c61826000611f51565b6001600160401b0383166000908152600760205260409020611c8390836121d7565b611c8e816000611f51565b6001600160401b0383166000908152600760205260409020611cb390600201826121d7565b7f0350d63aa5f270e01729d00d627eeb8f3429772b1818c016c66a588a864f912b838383604051611ce6939291906134fd565b60405180910390a1505050565b611d0661029860a08301608084016129a8565b611d1a576115e560a08201608083016129a8565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016632cbc26bb611d596040840160208501612b54565b60405160e083901b6001600160e01b031916815260809190911b67ffffffffffffffff60801b166004820152602401602060405180830381865afa158015611da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc9919061334a565b15611de757604051630a75a23b60e31b815260040160405180910390fd5b611dff611dfa60608301604084016129a8565b6122ee565b611e17611e126040830160208401612b54565b612347565b6115bb611e2a6040830160208401612b54565b8260600135612421565b604051630852cd8d60e31b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906342966c6890602401600060405180830381600087803b158015611e9657600080fd5b505af11580156115a3573d6000803e3d6000fd5b606060006119c283612464565b60006119c283836124bf565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152611f3682606001516001600160801b031683600001516001600160801b0316846020015163ffffffff1642611f239190613527565b85608001516001600160801b03166125b2565b6001600160801b031682525063ffffffff4216602082015290565b815115611fcf5781602001516001600160801b031682604001516001600160801b0316101580611f8c575060408201516001600160801b0316155b15611fac5781604051632008344960e21b815260040161083b919061353a565b8015611fcb5760405163433fc33d60e01b815260040160405180910390fd5b5050565b60408201516001600160801b0316151580611ff6575060208201516001600160801b031615155b15611fcb57816040516335a2be7360e21b815260040161083b919061353a565b60006119c283836125da565b336001600160a01b0382160361204b57604051636d6c4ee560e11b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b03838116918217835560015460405192939116917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6120a481610968565b6120cc576040516354c8163f60e11b81526001600160401b038216600482015260240161083b565b600480546040516383826b2b60e01b81526001600160401b038416928101929092523360248301526001600160a01b0316906383826b2b90604401602060405180830381865afa158015612124573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612148919061334a565b6115bb5760405163728fe07b60e01b815233600482015260240161083b565b6001600160401b0382166000908152600760205260409020611fcb90600201827f0000000000000000000000000000000000000000000000000000000000000000612629565b60006119c2836001600160a01b0384166124bf565b60006119c2836001600160a01b0384166125da565b81546000906121f390600160801b900463ffffffff1642613527565b905080156122515760018301548354612225916001600160801b03808216928116918591600160801b909104166125b2565b83546001600160801b03919091166001600160a01b031990911617600160801b4263ffffffff16021783555b6020820151835461226e916001600160801b03908116911661286b565b835483511515600160a01b0274ff00000000ffffffffffffffffffffffffffffffff199091166001600160801b039283161717845560208301516040808501518316600160801b0291909216176001850155517f9ea3374b67bf275e6bb9c8ae68f9cae023e1c528b4b27e092f0bb209d3531c1990611ce690849061353a565b7f0000000000000000000000000000000000000000000000000000000000000000156115bb5761231f600282612881565b6115bb576040516368692cbb60e11b81526001600160a01b038216600482015260240161083b565b61235081610968565b612378576040516354c8163f60e11b81526001600160401b038216600482015260240161083b565b6004805460405163a8d87a3b60e01b81526001600160401b038416928101929092526001600160a01b03169063a8d87a3b90602401602060405180830381865afa1580156123ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ee9190613548565b6001600160a01b0316336001600160a01b0316146115bb5760405163728fe07b60e01b815233600482015260240161083b565b6001600160401b0382166000908152600760205260409020611fcb90827f0000000000000000000000000000000000000000000000000000000000000000612629565b606081600001805480602002602001604051908101604052809291908181526020018280548015610f1257602002820191906000526020600020905b8154815260200190600101908083116124a05750505050509050919050565b600081815260018301602052604081205480156125a85760006124e3600183613527565b85549091506000906124f790600190613527565b905080821461255c57600086600001828154811061251757612517612f4f565b906000526020600020015490508087600001848154811061253a5761253a612f4f565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061256d5761256d613565565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105b9565b60009150506105b9565b60006125d1856125c284866134c4565b6125cc908761357b565b61286b565b95945050505050565b6000818152600183016020526040812054612621575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105b9565b5060006105b9565b8254600160a01b900460ff16158061263f575081155b1561264957505050565b825460018401546001600160801b038083169291169060009061267990600160801b900463ffffffff1642613527565b905080156126e557818311156126a257604051634b92ca1560e11b815260040160405180910390fd5b60018601546126c690839085908490600160801b90046001600160801b03166125b2565b865463ffffffff60801b1916600160801b4263ffffffff160217875592505b84821015612750576001600160a01b03841661271e5760405163f94ebcd160e01b8152600481018390526024810186905260440161083b565b604051630d3b2b9560e11b815260048101839052602481018690526001600160a01b038516604482015260640161083b565b8483101561280157600186810154600160801b90046001600160801b031690600090829061277e9082613527565b612788878a613527565b612792919061357b565b61279c91906134a2565b90506001600160a01b0386166127cf576040516302a4f38160e31b8152600481018290526024810186905260440161083b565b604051636864691d60e11b815260048101829052602481018690526001600160a01b038716604482015260640161083b565b61280b8584613527565b86546fffffffffffffffffffffffffffffffff19166001600160801b0382161787556040518681529093507f1871cdf8010e63f2eb8384381a68dfa7416dc571a5517e66e88b2d2d0c0a690a9060200160405180910390a1505050505050565b600081831061287a57816119c2565b5090919050565b6001600160a01b038116600090815260018301602052604081205415156119c2565b5080546128af90612f81565b6000825580601f106128bf575050565b601f0160209004906000526020600020908101906115bb91906128f7565b50805460008255906000526020600020908101906115bb91905b5b8082111561290c57600081556001016128f8565b5090565b60006020828403121561292257600080fd5b81356001600160e01b0319811681146119c257600080fd5b6000815180845260005b8181101561296057602081850181015186830182015201612944565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006119c2602083018461293a565b6001600160a01b03811681146115bb57600080fd5b6000602082840312156129ba57600080fd5b81356119c281612993565b6000602082840312156129d757600080fd5b81356001600160401b038111156129ed57600080fd5b820161010081850312156119c257600080fd5b80356001600160401b0381168114612a1757600080fd5b919050565b600080600060408486031215612a3157600080fd5b612a3a84612a00565b925060208401356001600160401b0380821115612a5657600080fd5b818601915086601f830112612a6a57600080fd5b813581811115612a7957600080fd5b876020828501011115612a8b57600080fd5b6020830194508093505050509250925092565b60008083601f840112612ab057600080fd5b5081356001600160401b03811115612ac757600080fd5b6020830191508360208260051b8501011115612ae257600080fd5b9250929050565b60008060008060408587031215612aff57600080fd5b84356001600160401b0380821115612b1657600080fd5b612b2288838901612a9e565b90965094506020870135915080821115612b3b57600080fd5b50612b4887828801612a9e565b95989497509550505050565b600060208284031215612b6657600080fd5b6119c282612a00565b60008083601f840112612b8157600080fd5b5081356001600160401b03811115612b9857600080fd5b602083019150836020606083028501011115612ae257600080fd5b60008060008060008060608789031215612bcc57600080fd5b86356001600160401b0380821115612be357600080fd5b612bef8a838b01612a9e565b90985096506020890135915080821115612c0857600080fd5b612c148a838b01612b6f565b90965094506040890135915080821115612c2d57600080fd5b50612c3a89828a01612b6f565b979a9699509497509295939492505050565b600060208284031215612c5e57600080fd5b81356001600160401b03811115612c7457600080fd5b820160a081850312156119c257600080fd5b602081526000825160406020840152612ca2606084018261293a565b90506020840151601f198483030160408501526125d1828261293a565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015612d1657603f19888603018452612d0485835161293a565b94509285019290850190600101612ce8565b5092979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612d645783516001600160a01b031683529284019291840191600101612d3f565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612d645783516001600160401b031683529284019291840191600101612d8c565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715612de957612de9612db1565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612e1757612e17612db1565b604052919050565b80151581146115bb57600080fd5b80356001600160801b0381168114612a1757600080fd5b600060608284031215612e5657600080fd5b604051606081018181106001600160401b0382111715612e7857612e78612db1565b6040529050808235612e8981612e1f565b8152612e9760208401612e2d565b6020820152612ea860408401612e2d565b60408201525092915050565b600080600060e08486031215612ec957600080fd5b612ed284612a00565b9250612ee18560208601612e44565b9150612ef08560808601612e44565b90509250925092565b6000808335601e19843603018112612f1057600080fd5b8301803591506001600160401b03821115612f2a57600080fd5b602001915036819003821315612ae257600080fd5b8183823760009101908152919050565b634e487b7160e01b600052603260045260246000fd5b600060608284031215612f7757600080fd5b6119c28383612e44565b600181811c90821680612f9557607f821691505b602082108103612fb557634e487b7160e01b600052602260045260246000fd5b50919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160401b03841681526040602082015260006125d1604083018486612fbb565b602081526000610783602083018486612fbb565b6000823561011e1983360301811261303257600080fd5b9190910192915050565b600082601f83011261304d57600080fd5b81356001600160401b0381111561306657613066612db1565b613079601f8201601f1916602001612def565b81815284602083860101111561308e57600080fd5b816020850160208301376000918101602001919091529392505050565b600061012082360312156130be57600080fd5b6130c6612dc7565b6130cf83612a00565b81526020808401356001600160401b03808211156130ec57600080fd5b9085019036601f8301126130ff57600080fd5b81358181111561311157613111612db1565b8060051b613120858201612def565b918252838101850191858101903684111561313a57600080fd5b86860192505b83831015613176578235858111156131585760008081fd5b6131663689838a010161303c565b8352509186019190860190613140565b808789015250505050604086013592508083111561319357600080fd5b50506131a13682860161303c565b6040830152506131b43660608501612e44565b60608201526131c63660c08501612e44565b608082015292915050565b601f821115610884576000816000526020600020601f850160051c810160208610156131fa5750805b601f850160051c820191505b8181101561321957828155600101613206565b505050505050565b81516001600160401b0381111561323a5761323a612db1565b61324e816132488454612f81565b846131d1565b602080601f831160018114613283576000841561326b5750858301515b600019600386901b1c1916600185901b178555613219565b600085815260208120601f198616915b828110156132b257888601518255948401946001909101908401613293565b50858210156132d05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8051151582526020808201516001600160801b039081169184019190915260409182015116910152565b60006101006001600160401b038716835280602084015261332d8184018761293a565b91505061333d60408301856132e0565b6125d160a08301846132e0565b60006020828403121561335c57600080fd5b81516119c281612e1f565b60006020828403121561337957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60ff82811682821603908111156105b9576105b9613380565b600181815b808511156133ea5781600019048211156133d0576133d0613380565b808516156133dd57918102915b93841c93908002906133b4565b509250929050565b600082613401575060016105b9565b8161340e575060006105b9565b8160018114613424576002811461342e5761344a565b60019150506105b9565b60ff84111561343f5761343f613380565b50506001821b6105b9565b5060208310610133831016604e8410600b841016171561346d575081810a6105b9565b61347783836133af565b806000190482111561348b5761348b613380565b029392505050565b60006119c260ff8416836133f2565b6000826134bf57634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176105b9576105b9613380565b6001600160401b0383168152604060208201526000610783604083018461293a565b6001600160401b038416815260e0810161351a60208301856132e0565b61078360808301846132e0565b818103818111156105b9576105b9613380565b606081016105b982846132e0565b60006020828403121561355a57600080fd5b81516119c281612993565b634e487b7160e01b600052603160045260246000fd5b808201808211156105b9576105b961338056fea2646970667358221220d78ff95b8ff7c2f8ee3267c68cb3ea4058181820a6aa44dfa090e5ff6c6de89864736f6c63430008180033608060405234801561001057600080fd5b506101b7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806363898e2b1461003b578063ee1fe2ad1461005c575b600080fd5b6000546100489060ff1681565b604051901515815260200160405180910390f35b61006f61006a366004610148565b610071565b005b60005460ff16156100b65760405162461bcd60e51b81526004016100ad90602080825260049082015263155cd95960e21b604082015260600190565b60405180910390fd5b6040516340c10f1960e01b81526001600160a01b038281166004830152670de0b6b3a764000060248301528316906340c10f1990604401600060405180830381600087803b15801561010757600080fd5b505af115801561011b573d6000803e3d6000fd5b50506000805460ff1916600117905550505050565b6001600160a01b038116811461014557600080fd5b50565b6000806040838503121561015b57600080fd5b823561016681610130565b9150602083013561017681610130565b80915050925092905056fea2646970667358221220dc907a75169a1c820ce8fae3cc795f6a54b8ba1177de51889b03e28cfc7c3ebd64736f6c63430008180033",
  "deployedBytecode": "0x6080604052348015600f57600080fd5b506004361060465760003560e01c8063104e992914604b57806328b41bc91460795780637412af7014608b578063f63ce79514609d575b600080fd5b600254605d906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b600054605d906001600160a01b031681565b600354605d906001600160a01b031681565b600154605d906001600160a01b03168156fea2646970667358221220460d334dc447615a5e187e7ecc9c730615ca15ee3eb19535cd5809e33a5cfce564736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6499,
        "contract": "contracts/deploy/L2Deployer.sol:L2Deployer",
        "label": "bridgedFrankencoin",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(BridgedFrankencoin)15597"
      },
      {
        "astId": 6502,
        "contract": "contracts/deploy/L2Deployer.sol:L2Deployer",
        "label": "ccipAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(CCIPAdmin)6052"
      },
      {
        "astId": 6505,
        "contract": "contracts/deploy/L2Deployer.sol:L2Deployer",
        "label": "tokenPool",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(BurnMintTokenPool)1005"
      },
      {
        "astId": 6508,
        "contract": "contracts/deploy/L2Deployer.sol:L2Deployer",
        "label": "testMinter",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(L2TestMinter)6742"
      }
    ],
    "types": {
      "t_contract(BridgedFrankencoin)15597": {
        "encoding": "inplace",
        "label": "contract BridgedFrankencoin",
        "numberOfBytes": "20"
      },
      "t_contract(BurnMintTokenPool)1005": {
        "encoding": "inplace",
        "label": "contract BurnMintTokenPool",
        "numberOfBytes": "20"
      },
      "t_contract(CCIPAdmin)6052": {
        "encoding": "inplace",
        "label": "contract CCIPAdmin",
        "numberOfBytes": "20"
      },
      "t_contract(L2TestMinter)6742": {
        "encoding": "inplace",
        "label": "contract L2TestMinter",
        "numberOfBytes": "20"
      }
    }
  }
}